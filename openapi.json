{
  "openapi": "3.0.0",
  "info": {
    "title": "API для работы с CRM \"Мой Класс\"",
    "version": "1.1.7",
    "x-logo": {
      "url": "logo.gif",
      "altText": "Мой Класс",
      "href": "https://moyklass.com"
    }
  },
  "servers": [
    {
      "url": "https://api.moyklass.com",
      "description": "Основной сервер"
    }
  ],
  "security": [
    {
      "companyApiKey": []
    }
  ],
  "x-tagGroups": [
    {
      "name": "API Компании",
      "tags": [
        "companyAuth",
        "rateLimit",
        "company",
        "managers",
        "users",
        "payments",
        "invoices",
        "joins",
        "tasks",
        "groups",
        "lessons",
        "catalog",
        "files",
        "subscriptions",
        "userSubscriptions",
        "userComments",
        "documents",
        "cashboxes"
      ]
    },
    {
      "name": "API ученика",
      "tags": [
        "userAuth",
        "userCommon",
        "userPayments",
        "userLessons",
        "userFiles"
      ]
    }
  ],
  "tags": [
    {
      "name": "rateLimit",
      "x-displayName": "Ограничения",
      "description": "На запросы к API действует ограничение не более 7 запросов в секунду.",
      "x-traitTag": true
    },
    {
      "name": "companyAuth",
      "x-displayName": "Авторизация"
    },
    {
      "name": "company",
      "x-displayName": "Компания"
    },
    {
      "name": "users",
      "x-displayName": "Ученики/лиды",
      "description": "В системе \"клиент\" и \"лид\" - это один и тот же \"ученик\", просто находящийся в разных статусах.\n\nПодробнее: https://help.moyklass.com/hc/ru/articles/360011599159\n"
    },
    {
      "name": "payments",
      "x-displayName": "Платежи"
    },
    {
      "name": "invoices",
      "x-displayName": "Счета"
    },
    {
      "name": "managers",
      "x-displayName": "Сотрудники"
    },
    {
      "name": "joins",
      "x-displayName": "Заявки/записи в группу",
      "description": "\"Заявка\" в системе - это запись ученика в группу.\n\nПодробнее о работе с записями в группу в CRM: https://help.moyklass.com/hc/ru/sections/115002025887\n\nПодробнее о разнице между учеником и записью в группу: https://help.moyklass.com/hc/ru/articles/360011599159\n"
    },
    {
      "name": "subscriptions",
      "x-displayName": "Виды абонементов"
    },
    {
      "name": "userSubscriptions",
      "x-displayName": "Абонементы учеников"
    },
    {
      "name": "tasks",
      "x-displayName": "Задачи"
    },
    {
      "name": "groups",
      "x-displayName": "Группы"
    },
    {
      "name": "lessons",
      "x-displayName": "Занятия"
    },
    {
      "name": "catalog",
      "x-displayName": "Справочники"
    },
    {
      "name": "files",
      "x-displayName": "Файлы"
    },
    {
      "name": "userComments",
      "x-displayName": "Комментарии учеников"
    },
    {
      "name": "userAuth",
      "x-displayName": "Авторизация"
    },
    {
      "name": "userLessons",
      "x-displayName": "Занятия"
    },
    {
      "name": "userCommon",
      "x-displayName": "Ученики"
    },
    {
      "name": "userPayments",
      "x-displayName": "Платежи и списания"
    },
    {
      "name": "inProgress",
      "x-displayName": "В разработке",
      "description": "Методы, которые еще не реализованы и в данный момент находятся в разработке"
    },
    {
      "name": "userFiles",
      "x-displayName": "Файлы"
    },
    {
      "name": "documents",
      "x-displayName": "Документы"
    },
    {
      "name": "cashboxes",
      "x-displayName": "Кассы"
    }
  ],
  "paths": {
    "/v1/company/auth/getToken": {
      "post": {
        "tags": [
          "companyAuth"
        ],
        "summary": "Получение токена",
        "description": "Авторизация. Получение токена для работы с API.\nКлючи API вы можете создавать и просматривать в разделе CRM [\"Мой Класс\" - \"Настройки - API\"](https://app.moyklass.com/settings/settings/api).\n\n[Подробнее](https://help.moyklass.com/hc/ru/articles/360027261934-%D0%A0%D0%B0%D0%B1%D0%BE%D1%82%D0%B0-%D1%81-API).\n",
        "security": [],
        "x-codeSamples": [
          {
            "lang": "PHP",
            "source": "$api_key = 'Oul76YVXXQnH3YWWidkDaHyoUBGHCOyOO0oky7y6T1EJBAWnEi'; //Ваш ключ доступа\n$url_auth = 'https://api.moyklass.com/v1/company/auth/getToken';\n$post_auth = array(\n  'apiKey' => $api_key\n);\n$curl = curl_init();\ncurl_setopt($curl, CURLOPT_CUSTOMREQUEST,\"POST\");\ncurl_setopt($curl, CURLOPT_URL, $url_auth);\ncurl_setopt($curl, CURLOPT_POSTFIELDS, json_encode($post_auth));\ncurl_setopt($curl, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));\ncurl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n$out = curl_exec($curl);\ncurl_close($curl);\n$response = json_decode($out, true);\n$access_token = $response['accessToken'];\nprint_r($access_token)\n"
          }
        ],
        "requestBody": {
          "description": "Параметры авторизации",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KeyAuth"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Токен доступа",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessToken"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/auth/refreshToken": {
      "post": {
        "tags": [
          "companyAuth"
        ],
        "summary": "Обновление токена",
        "description": "Генерирует новый токен, текущий токен при этом продолжает действовать.",
        "responses": {
          "200": {
            "description": "Новый токен доступа",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessToken"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/auth/revokeToken": {
      "post": {
        "tags": [
          "companyAuth"
        ],
        "summary": "Удаление токена",
        "description": "Удаляет существующий токен. Токен передается в заголовке **x-access-token**",
        "responses": {
          "204": {
            "description": "Токен удален"
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/users": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Список учеников",
        "description": "Производит поиск учеников в соответствии с фильтром",
        "parameters": [
          {
            "$ref": "#/components/parameters/createdAt"
          },
          {
            "$ref": "#/components/parameters/updatedAt"
          },
          {
            "$ref": "#/components/parameters/stateChangedAt"
          },
          {
            "$ref": "#/components/parameters/phone"
          },
          {
            "$ref": "#/components/parameters/email"
          },
          {
            "$ref": "#/components/parameters/name"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "name": "sort",
            "description": "Сортировка",
            "in": "query",
            "example": "createdAt",
            "schema": {
              "default": "id",
              "type": "string",
              "enum": [
                "id",
                "name",
                "createdAt",
                "updatedAt"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/sortDirection"
          },
          {
            "$ref": "#/components/parameters/amoCRMContactId"
          },
          {
            "$ref": "#/components/parameters/bitrixContactId"
          },
          {
            "$ref": "#/components/parameters/includePayLink"
          }
        ],
        "x-codeSamples": [
          {
            "lang": "PHP",
            "source": "$access_token = 'Ваш accessToken';\n$url = 'https://api.moyklass.com/v1/company/users?phone=79221&limit=4';\n$curl = curl_init();\ncurl_setopt($curl, CURLOPT_URL, $url);\ncurl_setopt($curl, CURLOPT_HTTPHEADER, array(\n        \"x-access-token:\" . $access_token,\n        \"Content-Type: application/json\"\n));\ncurl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n$out = curl_exec($curl);\ncurl_close($curl);\n$response = json_decode($out, true);\nprint_r($response);\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Список учеников",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка в параметрах фильтра",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Создание ученика",
        "description": "Создает нового ученика",
        "requestBody": {
          "description": "Информация об ученике",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Данные созданного ученика",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/users/{userId}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Информация об ученике",
        "description": "Возвращает основную информацию об ученике",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID ученика",
            "example": 123456,
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "$ref": "#/components/parameters/includeJoins"
          },
          {
            "$ref": "#/components/parameters/includePayLink"
          }
        ],
        "responses": {
          "200": {
            "description": "Данные ученика",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/User"
                    },
                    {
                      "properties": {
                        "joins": {
                          "description": "Заявки ученика (при includeJoins=true)",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Join"
                          }
                        },
                        "payLinkKey": {
                          "description": "Ключ оплаты (при includePayLink=true)",
                          "type": "string",
                          "example": "0047245cc1bc74076d704e20000be5aaa798e432"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Ученик не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Изменение ученика",
        "description": "Изменяет основную информацию об ученике",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID ученика",
            "example": 123456,
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Обновленная информация об ученике",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Обновленные данные ученика",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Ученик не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Удаление ученика",
        "description": "Удаляет ученика из системы. Вместе с ним удаляет также все его записи, платежи, документы и т.д.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID ученика",
            "example": 123456,
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ученик удален"
          },
          "404": {
            "description": "Ученик не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/payments": {
      "get": {
        "tags": [
          "payments"
        ],
        "summary": "Платежи",
        "description": "Возвращает список заявок платежей",
        "parameters": [
          {
            "$ref": "#/components/parameters/createdAt"
          },
          {
            "name": "date",
            "in": "query",
            "description": "Дата платежа. Если указана одна дата, то происходит поиск только по одной дате. Если указаны 2 даты, то производится поиск по диапазону",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "maxLength": 2,
              "items": {
                "type": "string",
                "format": "date"
              }
            },
            "example": "2019-01-01"
          },
          {
            "name": "summa",
            "in": "query",
            "description": "Сумма платежа. Списания и возвраты указываются с минусом.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "maxLength": 2,
              "items": {
                "type": "number"
              }
            }
          },
          {
            "name": "invoiceId",
            "in": "query",
            "description": "Id счета",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "optype",
            "in": "query",
            "description": "Тип операции. income - входящий платеж, debit - списание, refund - возврат",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "maxLength": 3,
              "items": {
                "type": "string",
                "enum": [
                  "income",
                  "debit",
                  "refund"
                ]
              }
            }
          },
          {
            "name": "paymentTypeId",
            "in": "query",
            "description": "Тип платежа",
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/includeUserSubscriptions"
          },
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/filialId"
          },
          {
            "name": "appendInvoices",
            "in": "query",
            "description": "Возвратить вместе с платежами данные счетов",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "Список платежей",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPaymentsExtended"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "payments"
        ],
        "summary": "Создание платежа",
        "description": "Добавляет платеж клиенту. В этом методе можно добавить входящий платеж (income) и возврат (refund)",
        "requestBody": {
          "description": "Информация о платеже",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPaymentExtended"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Данные созданного платежа",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPaymentExtended"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "500": {
            "description": "Ошибка на стороне сервера",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/payments/{paymentId}": {
      "get": {
        "tags": [
          "payments"
        ],
        "summary": "Информация о платеже",
        "description": "Возвращает информацию о платеже",
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "description": "ID платежа",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Данные платежа",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPaymentExtended"
                }
              }
            }
          },
          "404": {
            "description": "Платеж не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "payments"
        ],
        "summary": "Изменение платежа",
        "description": "Изменяет платеж. Применяется только к приходам (optype=income), для других типов платежей будет возвращен код 403",
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "description": "ID платежа",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Обновленная информация по платежу",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPaymentExtendedEdit"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Обновленные данные платежа",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPaymentExtended"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Платеж не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "payments"
        ],
        "summary": "Удаление платежа",
        "description": "Удаляет платеж из системы.",
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "description": "Id платежа",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Платеж удален"
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Платеж не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/invoices": {
      "get": {
        "tags": [
          "invoices"
        ],
        "summary": "Счета",
        "description": "Возвращает список счетов",
        "parameters": [
          {
            "$ref": "#/components/parameters/createdAt"
          },
          {
            "name": "payUntil",
            "in": "query",
            "description": "Срок оплаты счета. Если указана одна дата, то происходит поиск только по одной дате. Если указаны 2 даты, то производится поиск по диапазону",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "maxLength": 2,
              "items": {
                "type": "string",
                "format": "date"
              }
            },
            "example": "2019-01-01"
          },
          {
            "name": "price",
            "in": "query",
            "description": "Сумма счета.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "maxLength": 2,
              "items": {
                "type": "number"
              }
            }
          },
          {
            "name": "userSubscriptionId",
            "description": "ID абонемента ученика",
            "in": "query",
            "example": 123,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "joinId",
            "description": "ID записи в группу",
            "in": "query",
            "example": 123,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "$ref": "#/components/parameters/includeUserSubscriptions"
          },
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "Список счетов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInvoices"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/invoices/{invoiceId}": {
      "get": {
        "tags": [
          "invoices"
        ],
        "summary": "Информация о счете",
        "description": "Возвращает информацию о счете",
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "description": "ID счета",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Данные счета",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInvoice"
                }
              }
            }
          },
          "404": {
            "description": "Счет не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "invoices"
        ],
        "summary": "Изменение счета",
        "description": "Изменяет счет",
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "description": "ID счета",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Обновленная информация по счету",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserInvoiceEdit"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Обновленные данные счета",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInvoice"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Счет не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "invoices"
        ],
        "summary": "Удаление счета",
        "description": "Удаляет счет из системы. Удаление возможно только если нет списаний по счету, иначе будет возвращен код 400",
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "description": "Id счета",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Счет удален"
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Счет не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/managers": {
      "get": {
        "tags": [
          "managers"
        ],
        "summary": "Список сотрудников",
        "description": "Возвращает список сотрудников",
        "responses": {
          "200": {
            "description": "Список сотрудников",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Manager"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "managers"
        ],
        "summary": "Создание сотрудника",
        "description": "Создает нового сотрудника",
        "requestBody": {
          "description": "Информация о сотруднике",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Manager"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Созданный сотрудник",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Manager"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/managers/{managerId}": {
      "get": {
        "tags": [
          "managers"
        ],
        "summary": "Информация о сотруднике",
        "description": "Возвращает информацию о сотруднике",
        "parameters": [
          {
            "name": "managerId",
            "in": "path",
            "description": "ID сотрудника",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Данные о сотруднике",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Manager"
                }
              }
            }
          },
          "404": {
            "description": "Сотрудник не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "managers"
        ],
        "summary": "Удаление сотрудника",
        "description": "Удаляет сотрудника",
        "parameters": [
          {
            "name": "managerId",
            "in": "path",
            "description": "ID сотрудника",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Данные для удаления сотрудника",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "replaceToManagerId": {
                    "description": "ID сотрудника, на которого будут назначены все невыполненные задачи, предстоящие занятия, если они есть, и клиенты удаляемого сотрудника.",
                    "type": "integer",
                    "format": "int64",
                    "example": 2
                  }
                },
                "required": [
                  "replaceToManagerId"
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Сотрудник удален"
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "404": {
            "description": "Сотрудник не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "managers"
        ],
        "summary": "Изменение сотрудника",
        "description": "Изменяет сотрудника",
        "parameters": [
          {
            "name": "managerId",
            "in": "path",
            "description": "ID сотрудника",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Новые данные сотрудника",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManagerEdit"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Обновленные данные сотрудника",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Manager"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Сотрудник не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/advSources": {
      "get": {
        "tags": [
          "catalog"
        ],
        "summary": "Информационные источники",
        "description": "Возвращает список информационных источников",
        "responses": {
          "200": {
            "description": "Список информационных источников",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdvSource"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/createSources": {
      "get": {
        "tags": [
          "catalog"
        ],
        "summary": "Способы заведения заявок",
        "description": "Возвращает список возможных способов заведения клиентов и заявок",
        "responses": {
          "200": {
            "description": "Список способов",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateSource"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/statusReasons": {
      "get": {
        "tags": [
          "catalog"
        ],
        "summary": "Причины изменения статуса",
        "description": "Возвращает причины изменения статуса записи",
        "parameters": [
          {
            "$ref": "#/components/parameters/reasonType"
          }
        ],
        "responses": {
          "200": {
            "description": "Список причин",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StatusReason"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/filials": {
      "get": {
        "tags": [
          "company"
        ],
        "summary": "Филиалы компании",
        "description": "Возвращает список филиалов",
        "responses": {
          "200": {
            "description": "Список филиалов",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Filial"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/userAttributes": {
      "get": {
        "tags": [
          "catalog"
        ],
        "summary": "Признаки ученика",
        "description": "Возвращает список всех доступных признаков ученика",
        "responses": {
          "200": {
            "description": "Список признаков",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserAttribute"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/rooms": {
      "get": {
        "tags": [
          "company"
        ],
        "summary": "Аудитории",
        "description": "Аудитории компании",
        "responses": {
          "200": {
            "description": "Список аудиторий",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Room"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/courses": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "Программы",
        "parameters": [
          {
            "$ref": "#/components/parameters/includeClasses"
          },
          {
            "$ref": "#/components/parameters/includeImages"
          }
        ],
        "description": "Возвращает список программ обучения",
        "responses": {
          "200": {
            "description": "Список программ",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Course"
                      },
                      {
                        "properties": {
                          "classes": {
                            "description": "Группы (при includeClasses=true)",
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/Class"
                            }
                          },
                          "images": {
                            "description": "Изображения (при includeImages=true)",
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/Image"
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/classes": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "Группы",
        "parameters": [
          {
            "$ref": "#/components/parameters/includeImages"
          },
          {
            "$ref": "#/components/parameters/includeAttributes"
          }
        ],
        "description": "Возвращает список групп (наборов)",
        "responses": {
          "200": {
            "description": "Список групп",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Class"
                      },
                      {
                        "properties": {
                          "images": {
                            "description": "Изображения (при includeImages=true)",
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/Image"
                            }
                          },
                          "attributes": {
                            "description": "Признаки группы (при includeAttributes=true)",
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/ClassAttributeValue"
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/classes/{classId}": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "Информация о группе",
        "description": "Возвращает основную информацию о группе",
        "parameters": [
          {
            "name": "classId",
            "in": "path",
            "description": "ID группы",
            "example": 123456,
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "$ref": "#/components/parameters/includeAttributes"
          }
        ],
        "responses": {
          "200": {
            "description": "Данные группы",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Class"
                    },
                    {
                      "properties": {
                        "attributes": {
                          "description": "Признаки группы (при includeAttributes=true)",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ClassAttributeValue"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Группа не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/classes/{classId}/attribute/{attributeId}": {
      "post": {
        "tags": [
          "groups"
        ],
        "summary": "Изменение атрибута группы",
        "description": "Изменяет информацию в атрибутах группы",
        "parameters": [
          {
            "name": "classId",
            "in": "path",
            "description": "ID группы",
            "example": 123456,
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "attributeId",
            "in": "path",
            "description": "ID атрибута или его alias",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Новое значение атрибута",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "title": "Атрибут прочих типов",
                    "required": [
                      "value"
                    ],
                    "properties": {
                      "value": {
                        "description": "Значение атрибута. При передаче null атрибут удаляется.",
                        "oneOf": [
                          {
                            "type": "integer",
                            "format": "int64",
                            "nullable": true
                          },
                          {
                            "type": "boolean",
                            "nullable": true
                          },
                          {
                            "type": "string",
                            "nullable": true
                          }
                        ],
                        "example": false
                      }
                    }
                  },
                  {
                    "type": "object",
                    "title": "Атрибут типа select",
                    "required": [
                      "valueId"
                    ],
                    "properties": {
                      "valueId": {
                        "description": "ID значения атрибута (если тип атрибута select). При передаче null атрибут удаляется.",
                        "type": "integer",
                        "format": "int64",
                        "nullable": true,
                        "example": 150
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Обновленные данные группы",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Class"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Группа не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/classAttributes": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "Признаки группы",
        "description": "Возвращает список всех доступных признаков группы",
        "responses": {
          "200": {
            "description": "Список признаков",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClassAttribute"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/lessons/{lessonId}/task/{type}/files": {
      "post": {
        "tags": [
          "lessons"
        ],
        "summary": "Добавление файла задания на занятие",
        "description": "Добавляет файл задания на занятие",
        "parameters": [
          {
            "name": "lessonId",
            "in": "path",
            "description": "ID занятия",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "type",
            "in": "path",
            "description": "Тип задания (Домашнее / за занятие)",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "home",
                "lesson"
              ]
            }
          }
        ],
        "requestBody": {
          "description": "Файл",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DownloadFile"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Файл добавлен"
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Задание или занятие не найдено",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "413": {
            "description": "Файл слишком большой",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "lessons"
        ],
        "summary": "Список файлов задания",
        "description": "Возвращает массив файлов прикрепленных к заданию",
        "parameters": [
          {
            "name": "lessonId",
            "in": "path",
            "description": "ID занятия",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "type",
            "in": "path",
            "description": "Тип задания (Домашнее / за занятие)",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "home",
                "lesson"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Список файлов прикрепленных к заданию",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LessonFile"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Задание или занятие не найдено",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/lessons/{lessonId}/task/{type}": {
      "post": {
        "tags": [
          "lessons"
        ],
        "summary": "Создание/изменение задания на занятие",
        "description": "Создает или, если уже создано, изменяет задание на занятие",
        "parameters": [
          {
            "name": "lessonId",
            "in": "path",
            "description": "ID занятия",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "type",
            "in": "path",
            "description": "Тип задания (Домашнее / за занятие)",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "home",
                "lesson"
              ]
            }
          }
        ],
        "requestBody": {
          "description": "Данные задания",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LessonTaskEdit"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Задание обновлено/добавлено"
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Задание или занятие не найдено",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "lessons"
        ],
        "summary": "Удаление задания на занятие",
        "description": "Удаляет задание из системы.",
        "parameters": [
          {
            "name": "lessonId",
            "in": "path",
            "description": "ID занятия",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "type",
            "in": "path",
            "description": "Тип задания (Домашнее / за занятие)",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "home",
                "lesson"
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Задание удалено"
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Задание или занятие не найдено",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/lessons/{lessonId}/answer": {
      "post": {
        "tags": [
          "lessons"
        ],
        "summary": "Создание ответа на задание",
        "description": "Создает ответ на задание",
        "parameters": [
          {
            "name": "lessonId",
            "in": "path",
            "description": "ID занятия",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Данные ответа",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskAnswer"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Ответ добавлен"
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Занятие не найдено",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/lessons/{lessonId}/answer/{answerId}": {
      "get": {
        "tags": [
          "lessons"
        ],
        "summary": "Получение ответа на задание",
        "description": "Возвращает ответ на задание",
        "parameters": [
          {
            "name": "lessonId",
            "in": "path",
            "description": "ID занятия",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "answerId",
            "in": "path",
            "description": "ID ответа",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ответ на задание",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskAnswer"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Занятие или ответ не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "lessons"
        ],
        "summary": "Редактирование ответа на задание",
        "description": "Редактирует ответ на задание",
        "security": [
          {
            "userSession": [],
            "xCookieToken": [],
            "xCsrfToken": []
          },
          {
            "userOAuth": []
          }
        ],
        "parameters": [
          {
            "name": "lessonId",
            "in": "path",
            "description": "ID занятия",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "answerId",
            "in": "path",
            "description": "ID ответа",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Редактируемые данные ответа",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskAnswerEdit"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Ответ добавлен"
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Занятие или ответ не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "lessons"
        ],
        "summary": "Удаление ответа на задание",
        "description": "Удаляет ответ на задание",
        "parameters": [
          {
            "name": "lessonId",
            "in": "path",
            "description": "ID занятия",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "answerId",
            "in": "path",
            "description": "ID ответа",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ответ удален"
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Занятие или ответ не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/lessons/{lessonId}/answer/{answerId}/status": {
      "post": {
        "tags": [
          "lessons"
        ],
        "summary": "Смена статуса ответа на задание",
        "description": "Меняет статус ответа на задание",
        "parameters": [
          {
            "name": "lessonId",
            "in": "path",
            "description": "ID занятия",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "answerId",
            "in": "path",
            "description": "ID ответа",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Данные статуса",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskAnswerStatus"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Ответ добавлен"
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Занятие или ответ не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/lessons/{lessonId}/answer/{answerId}/comment": {
      "post": {
        "tags": [
          "lessons"
        ],
        "summary": "Создание комментария к ответу на задание",
        "description": "Создает комментарий к ответу на задание",
        "parameters": [
          {
            "name": "lessonId",
            "in": "path",
            "description": "ID занятия",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "answerId",
            "in": "path",
            "description": "ID ответа",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Данные ответа",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskAnswerCommentCreate"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Комментарий добавлен"
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Занятие или ответ не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/lessons/{lessonId}/answer/{answerId}/files": {
      "post": {
        "tags": [
          "lessons"
        ],
        "summary": "Прикрепление файла к ответу на задание",
        "description": "Прикрепляет файл к ответу на задание",
        "parameters": [
          {
            "name": "lessonId",
            "in": "path",
            "description": "ID занятия",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "answerId",
            "in": "path",
            "description": "ID ответа",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Данные файла",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskAnswerFileCreate"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Файл прикреплен"
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Занятие или ответ не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/lessons/{lessonId}/answer/{answerId}/files/{fileId}": {
      "delete": {
        "tags": [
          "lessons"
        ],
        "summary": "Удаление файла к ответу на задание",
        "description": "Удаляет файла к ответу на задание",
        "parameters": [
          {
            "name": "lessonId",
            "in": "path",
            "description": "ID занятия",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "answerId",
            "in": "path",
            "description": "ID ответа",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "ID файла",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Файл удален"
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Занятие или ответ не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/lessons/{lessonId}/answer/{answerId}/comment/{commentId}": {
      "delete": {
        "tags": [
          "lessons"
        ],
        "summary": "Удаление комментария к ответу на задание",
        "description": "Удаляет комментарий к ответу на задание",
        "parameters": [
          {
            "name": "lessonId",
            "in": "path",
            "description": "ID занятия",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "answerId",
            "in": "path",
            "description": "ID ответа",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "ID комментария",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Комментарий удален"
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Занятие или ответ не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/lessons/{lessonId}/mark/{type}/{userId}": {
      "post": {
        "tags": [
          "lessons"
        ],
        "summary": "Создание/изменение оценки за занятие",
        "description": "Создает или, если уже создано, изменяет оценку на занятие",
        "parameters": [
          {
            "name": "lessonId",
            "in": "path",
            "description": "ID занятия",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "ID пользователя",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "type",
            "in": "path",
            "description": "Тип оценки (За дз / за занятие)",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "home",
                "lesson"
              ]
            }
          }
        ],
        "requestBody": {
          "description": "Данные оценки",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LessonMarkEdit"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Оценка обновлена/добавлена"
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Оценка или занятие не найдено",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "lessons"
        ],
        "summary": "Удаление оценки за занятие",
        "description": "Удаляет оценку из системы.",
        "parameters": [
          {
            "name": "lessonId",
            "in": "path",
            "description": "ID занятия",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "ID пользователя",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "type",
            "in": "path",
            "description": "Тип оценки (За дз / за занятие)",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "home",
                "lesson"
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Оценка удалена"
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Оценка или занятие не найдено",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/lessons": {
      "get": {
        "tags": [
          "lessons"
        ],
        "summary": "Занятия",
        "description": "Возвращает список занятий",
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "Дата проведения занятий. Если указана одна дата, то происходит поиск только по одной дате. Если указаны 2 даты, то производится поиск по диапазону",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "maxLength": 2,
              "items": {
                "type": "string",
                "format": "date"
              }
            },
            "example": "2019-01-01"
          },
          {
            "$ref": "#/components/parameters/lessonId"
          },
          {
            "$ref": "#/components/parameters/roomId"
          },
          {
            "$ref": "#/components/parameters/filialId"
          },
          {
            "$ref": "#/components/parameters/classId"
          },
          {
            "$ref": "#/components/parameters/teacherId"
          },
          {
            "$ref": "#/components/parameters/lessonStatusId"
          },
          {
            "$ref": "#/components/parameters/lessonUserId"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/includeRecords"
          },
          {
            "$ref": "#/components/parameters/includeWorkOffs"
          },
          {
            "$ref": "#/components/parameters/includeMarks"
          },
          {
            "$ref": "#/components/parameters/includeTasks"
          },
          {
            "$ref": "#/components/parameters/includeTaskAnswers"
          },
          {
            "$ref": "#/components/parameters/includeUserSubscriptions"
          },
          {
            "$ref": "#/components/parameters/includeParams"
          }
        ],
        "responses": {
          "200": {
            "description": "Список занятий",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Lessons"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "lessons"
        ],
        "summary": "Создание занятия",
        "description": "Создает занятие",
        "parameters": [
          {
            "$ref": "#/components/parameters/includeParams"
          }
        ],
        "requestBody": {
          "description": "Данные занятия",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "date": {
                    "description": "Дата занятия",
                    "type": "string",
                    "format": "date",
                    "example": "2022-02-22T00:00:00.000Z"
                  },
                  "comment": {
                    "description": "Комментарий к занятию",
                    "nullable": true,
                    "type": "string"
                  },
                  "topic": {
                    "description": "Тема занятия",
                    "nullable": true,
                    "type": "string"
                  },
                  "description": {
                    "description": "Описание занятия",
                    "nullable": true,
                    "type": "string"
                  },
                  "beginTime": {
                    "description": "Время начала",
                    "type": "string",
                    "pattern": "^(?:(?:[01][0-9])|(?:2[0-3])):[0-5][0-9]$",
                    "example": "08:30"
                  },
                  "endTime": {
                    "description": "Время окончания",
                    "type": "string",
                    "pattern": "^(?:(?:[01][0-9])|(?:2[0-3])):[0-5][0-9]$",
                    "example": "09:15"
                  },
                  "filialId": {
                    "description": "ID филиала компании",
                    "type": "integer",
                    "format": "int64",
                    "example": 10
                  },
                  "roomId": {
                    "description": "ID аудитории/зала",
                    "type": "integer",
                    "format": "int64",
                    "example": 505
                  },
                  "maxStudents": {
                    "description": "Максимально допустимое количество учеников на занятии.\n\n  * `0` – не ограничено\n",
                    "nullable": true,
                    "type": "integer",
                    "format": "int64",
                    "example": 30,
                    "minimum": 0,
                    "default": 0
                  },
                  "classId": {
                    "description": "ID группы",
                    "type": "integer",
                    "format": "int64",
                    "example": 171331
                  },
                  "params": {
                    "description": "Дополнительные параметры",
                    "type": "object",
                    "properties": {
                      "video": {
                        "description": "Видео к занятию",
                        "nullable": true,
                        "type": "object",
                        "properties": {
                          "value": {
                            "description": "Ссылка на видео",
                            "pattern": "^(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$",
                            "type": "string"
                          },
                          "visible": {
                            "description": "Показывать ли ученику",
                            "type": "boolean",
                            "default": true
                          },
                          "description": {
                            "description": "Описание",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "value"
                        ]
                      },
                      "webinar": {
                        "description": "Ссылка на вебинар",
                        "nullable": true,
                        "type": "object",
                        "properties": {
                          "value": {
                            "description": "Ссылка на вебинар",
                            "pattern": "^(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$",
                            "type": "string"
                          },
                          "visible": {
                            "description": "Показывать ли ученику",
                            "type": "boolean",
                            "default": true
                          },
                          "description": {
                            "description": "Описание",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "value"
                        ]
                      },
                      "lessonSettings": {
                        "$ref": "#/components/schemas/LessonSettings"
                      }
                    }
                  },
                  "userId": {
                    "type": "integer",
                    "format": "int64",
                    "description": "ID ученика. Только для индивидуальных занятий."
                  },
                  "lessonRecord": {
                    "type": "object",
                    "description": "Данные записи. Только для индивидуальных занятий.",
                    "properties": {
                      "free": {
                        "description": "Бесплатная запись (посещение для ученика будет бесплатным)",
                        "type": "boolean",
                        "default": false,
                        "example": true
                      },
                      "test": {
                        "description": "Пробная запись на занятие",
                        "default": false,
                        "type": "boolean"
                      },
                      "missedLessonRecordId": {
                        "description": "Id записи на пропущенное занятие (для создания отработки). В случае использования, параметры free и test берутся у пропущенного занятия.",
                        "type": "number"
                      }
                    }
                  },
                  "teacherIds": {
                    "description": "ID преподавателей. Обязательно для индивидуальных занятий.",
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                },
                "required": [
                  "date",
                  "beginTime",
                  "endTime",
                  "filialId",
                  "roomId",
                  "classId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Данные созданного занятия",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Lesson"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Группа не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/lessons/{lessonId}": {
      "get": {
        "tags": [
          "lessons"
        ],
        "summary": "Информация о занятии",
        "description": "Возвращает информацию о занятии",
        "parameters": [
          {
            "name": "lessonId",
            "in": "path",
            "description": "ID занятия",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "$ref": "#/components/parameters/includeRecords"
          },
          {
            "$ref": "#/components/parameters/includeWorkOffs"
          },
          {
            "$ref": "#/components/parameters/includeMarks"
          },
          {
            "$ref": "#/components/parameters/includeTasks"
          },
          {
            "$ref": "#/components/parameters/includeTaskAnswers"
          },
          {
            "$ref": "#/components/parameters/includeParams"
          }
        ],
        "responses": {
          "200": {
            "description": "Данные занятия",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Lesson"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "lessons"
        ],
        "summary": "Удаление занятия",
        "description": "Удаляет занятие",
        "parameters": [
          {
            "name": "lessonId",
            "in": "path",
            "description": "ID занятия",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Занятие удалено"
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Занятие не найдено",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "lessons"
        ],
        "summary": "Изменение занятия",
        "description": "Изменяет занятие",
        "parameters": [
          {
            "name": "lessonId",
            "in": "path",
            "description": "ID занятия",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "$ref": "#/components/parameters/includeParams"
          }
        ],
        "requestBody": {
          "description": "Данные занятия",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "date": {
                    "description": "Дата занятия",
                    "type": "string",
                    "format": "date",
                    "example": "2022-02-22T00:00:00.000Z"
                  },
                  "comment": {
                    "description": "Комментарий к занятию",
                    "nullable": true,
                    "type": "string"
                  },
                  "topic": {
                    "description": "Тема занятия",
                    "nullable": true,
                    "type": "string"
                  },
                  "description": {
                    "description": "Описание занятия",
                    "nullable": true,
                    "type": "string"
                  },
                  "beginTime": {
                    "description": "Время начала",
                    "type": "string",
                    "pattern": "^(?:(?:[01][0-9])|(?:2[0-3])):[0-5][0-9]$",
                    "example": "08:30"
                  },
                  "endTime": {
                    "description": "Время окончания",
                    "type": "string",
                    "pattern": "^(?:(?:[01][0-9])|(?:2[0-3])):[0-5][0-9]$",
                    "example": "09:15"
                  },
                  "filialId": {
                    "description": "ID филиала компании",
                    "type": "integer",
                    "format": "int64",
                    "example": 10
                  },
                  "roomId": {
                    "description": "ID аудитории/зала",
                    "type": "integer",
                    "format": "int64",
                    "example": 505
                  },
                  "maxStudents": {
                    "description": "Максимально допустимое количество учеников на занятии",
                    "nullable": true,
                    "type": "integer",
                    "format": "int64",
                    "example": 30
                  },
                  "status": {
                    "description": "Статус занятия\n\n  * `0` – Не проведено\n\n  * `1` – Проведено\n",
                    "type": "integer",
                    "enum": [
                      0,
                      1
                    ],
                    "default": 0
                  },
                  "params": {
                    "description": "Дополнительные параметры",
                    "type": "object",
                    "properties": {
                      "video": {
                        "description": "Видео к занятию",
                        "nullable": true,
                        "type": "object",
                        "properties": {
                          "value": {
                            "description": "Ссылка на видео",
                            "pattern": "^(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$",
                            "type": "string"
                          },
                          "visible": {
                            "description": "Показывать ли ученику",
                            "type": "boolean",
                            "default": true
                          },
                          "description": {
                            "description": "Описание",
                            "nullable": true,
                            "type": "string"
                          }
                        }
                      },
                      "webinar": {
                        "description": "Ссылка на вебинар",
                        "nullable": true,
                        "type": "object",
                        "properties": {
                          "value": {
                            "description": "Ссылка на вебинар",
                            "pattern": "^(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$",
                            "type": "string"
                          },
                          "visible": {
                            "description": "Показывать ли ученику",
                            "type": "boolean",
                            "default": true
                          },
                          "description": {
                            "description": "Описание",
                            "nullable": true,
                            "type": "string"
                          }
                        }
                      },
                      "lessonSettings": {
                        "$ref": "#/components/schemas/LessonSettings"
                      }
                    }
                  },
                  "lessonRecord": {
                    "type": "object",
                    "description": "Данные записи. Только для индивидуальных занятий.",
                    "properties": {
                      "free": {
                        "description": "Бесплатная запись (посещение для ученика будет бесплатным)",
                        "type": "boolean",
                        "default": false,
                        "example": true
                      },
                      "test": {
                        "description": "Пробная запись на занятие",
                        "default": false,
                        "type": "boolean"
                      },
                      "missedLessonRecordId": {
                        "description": "Id записи на пропущенное занятие (для создания отработки). В случае использования, параметры free и test берутся у пропущенного занятия.",
                        "type": "number"
                      }
                    }
                  },
                  "teacherIds": {
                    "description": "ID преподавателей",
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Обновленные данные занятия",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Lesson"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Занятие не найдено",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/lessons/{lessonId}/status": {
      "post": {
        "tags": [
          "lessons"
        ],
        "summary": "Изменение статуса занятия",
        "description": "Изменяет статус занятия",
        "parameters": [
          {
            "name": "lessonId",
            "in": "path",
            "description": "ID занятия",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Новый статус",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "status": {
                    "description": "Статус занятия. 0 - не проведено, 1 - проведено",
                    "type": "integer",
                    "format": "int64",
                    "enum": [
                      0,
                      1
                    ]
                  }
                },
                "required": [
                  "status"
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Статус изменен"
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Занятие не найдено",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/lessons/{lessonId}/workOff": {
      "post": {
        "tags": [
          "lessons"
        ],
        "summary": "Создание отработки",
        "description": "Создает запись на отработку для пропущенного занятия",
        "parameters": [
          {
            "name": "lessonId",
            "in": "path",
            "description": "ID занятия с пропуском",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Информация для создания отработки",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LessonWorkOffCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Отработка создана",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LessonRecordExtended"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Запись не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/subscriptions": {
      "get": {
        "tags": [
          "subscriptions"
        ],
        "summary": "Список абонементов",
        "description": "Возвращает список абонементов",
        "parameters": [
          {
            "$ref": "#/components/parameters/createdAt"
          },
          {
            "$ref": "#/components/parameters/filialId"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "name": "useDiscount",
            "description": "Применять скидку клиента",
            "in": "query",
            "example": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "externalId",
            "description": "Пользовательский номер абонемента",
            "in": "query",
            "example": "'ЛТ-2305' или ['ЛТ-2305', 'ЛТ-2377']",
            "schema": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ]
            }
          },
          {
            "name": "subscriptionGroupingId",
            "description": "ID группировки абонементов.",
            "in": "query",
            "example": 2,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "includeFamilySubs",
            "description": "Включает семейные абонементы в ответ",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Список абонементов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscriptions"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "subscriptions"
        ],
        "summary": "Создание абонемента",
        "description": "Создает новый абонемент",
        "requestBody": {
          "description": "Информация об абонементе",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Созданный абонемент",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/subscriptions/{subscriptionId}": {
      "get": {
        "tags": [
          "subscriptions"
        ],
        "summary": "Информация об абонементе",
        "description": "Возвращает информацию об абонементе",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "ID абонемента",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Данные об абонементе",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "404": {
            "description": "Абонемент не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "subscriptions"
        ],
        "summary": "Удаление абонемента",
        "description": "Удаляет абонемент",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "ID абонемента",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Абонемент удален"
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "404": {
            "description": "Абонемент не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "subscriptions"
        ],
        "summary": "Изменение абонемента",
        "description": "Изменяет абонемент",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "ID абонемента",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Новые данные абонемента",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Обновленные данные абонемента",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Абонемент не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/userSubscriptions": {
      "get": {
        "tags": [
          "userSubscriptions"
        ],
        "summary": "Список абонементов ученика",
        "description": "Возвращает список абонементов ученика",
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/managerId"
          },
          {
            "name": "externalId",
            "description": "Пользовательский номер абонемента",
            "in": "query",
            "example": "'ЛТ-2305' или ['ЛТ-2305', 'ЛТ-2377']",
            "schema": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ]
            }
          },
          {
            "name": "courseId",
            "description": "ID программы группы абонемента",
            "in": "query",
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "format": "int64"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              ]
            },
            "example": "100 или [ 100, 101 ]"
          },
          {
            "name": "classId",
            "description": "ID группы абонемента",
            "in": "query",
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "format": "int64"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              ]
            },
            "example": "123 или [ 123, 124 ]"
          },
          {
            "name": "mainClassId",
            "description": "ID основной группы абонемента",
            "in": "query",
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "format": "int64"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              ]
            },
            "example": "123 или [ 123, 124 ]"
          },
          {
            "name": "sellDate",
            "in": "query",
            "description": "Дата продажи. Если указана одна дата, то происходит поиск только по одной дате. Если указаны 2 даты, то производится поиск по диапазону",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "maxLength": 2,
              "items": {
                "type": "string",
                "format": "date"
              }
            },
            "example": "2019-01-01"
          },
          {
            "name": "beginDate",
            "in": "query",
            "description": "Дата начала действия. Если указана одна дата, то происходит поиск только по одной дате. Если указаны 2 даты, то производится поиск по диапазону",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "maxLength": 2,
              "items": {
                "type": "string",
                "format": "date"
              }
            },
            "example": "2019-01-01"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Дата окончания действия. Если указана одна дата, то происходит поиск только по одной дате. Если указаны 2 даты, то производится поиск по диапазону",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "maxLength": 2,
              "items": {
                "type": "string",
                "format": "date"
              }
            },
            "example": "2019-01-01"
          },
          {
            "$ref": "#/components/parameters/userSubscriptionStatus"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "Список абонементов ученика",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSubscriptions"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "userSubscriptions"
        ],
        "summary": "Создание абонемента ученика",
        "description": "Создает новый абонемент ученика",
        "requestBody": {
          "description": "Информация об абонементе ученика",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSubscription"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Созданный абонемент ученика",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSubscription"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/userSubscriptions/{userSubscriptionId}": {
      "get": {
        "tags": [
          "userSubscriptions"
        ],
        "summary": "Информация об абонементе ученика",
        "description": "Возвращает информацию об абонементе ученика",
        "parameters": [
          {
            "name": "userSubscriptionId",
            "in": "path",
            "description": "ID абонемента ученика",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Данные об абонементе ученика",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSubscription"
                }
              }
            }
          },
          "404": {
            "description": "Абонемент ученика не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "userSubscriptions"
        ],
        "summary": "Удаление абонемента ученика",
        "description": "Удаляет абонемент ученика",
        "parameters": [
          {
            "name": "userSubscriptionId",
            "in": "path",
            "description": "ID абонемента ученика",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Абонемент ученика удален"
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "404": {
            "description": "Абонемент ученика не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "userSubscriptions"
        ],
        "summary": "Изменение абонемента ученика",
        "description": "Изменяет абонемент ученика",
        "parameters": [
          {
            "name": "userSubscriptionId",
            "in": "path",
            "description": "ID абонемента ученика",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Новые данные абонемента ученика",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSubscriptionEdit"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Обновленные данные абонемента ученика",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSubscription"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Абонемент ученика не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/userSubscriptions/{userSubscriptionId}/status": {
      "post": {
        "tags": [
          "userSubscriptions"
        ],
        "summary": "Изменение статуса абонемента ученика",
        "description": "Изменяет статус абонемента ученика",
        "parameters": [
          {
            "name": "userSubscriptionId",
            "in": "path",
            "description": "ID абонемента ученика",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Статус абонемента ученика",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "statusId": {
                    "description": "Статус абонемента:\n* `1` - Не активный\n* `2` - Активный\n",
                    "type": "integer",
                    "format": "int64",
                    "enum": [
                      1,
                      2
                    ]
                  }
                },
                "required": [
                  "statusId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Обновленные данные абонемента ученика",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSubscription"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Абонемент не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/userSubscriptions/{userSubscriptionId}/freeze": {
      "post": {
        "tags": [
          "userSubscriptions"
        ],
        "summary": "Изменение заморозки абонемента ученика",
        "description": "Изменяет заморозку абонемента ученика",
        "parameters": [
          {
            "name": "userSubscriptionId",
            "in": "path",
            "description": "ID абонемента ученика",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Даты заморозки",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "freezeFrom": {
                    "description": "Дата начала заморозки",
                    "type": "string",
                    "format": "date",
                    "example": "2019-06-12T00:00:00.000Z"
                  },
                  "freezeTo": {
                    "description": "Дата окончания заморозки",
                    "type": "string",
                    "format": "date",
                    "example": "2019-06-15T00:00:00.000Z"
                  }
                },
                "required": [
                  "freezeFrom",
                  "freezeTo"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Обновленные данные абонемента ученика",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSubscription"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Абонемент не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "userSubscriptions"
        ],
        "summary": "Удаление заморозки абонемента ученика",
        "description": "Удаляет заморозку абонемента ученика",
        "parameters": [
          {
            "name": "userSubscriptionId",
            "in": "path",
            "description": "ID абонемента ученика",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Обновленные данные абонемента ученика",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSubscription"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Абонемент не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/lessonRecords": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "Записи на занятия",
        "description": "Возвращает список записей на занятия",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "ID ученика",
            "explode": false,
            "schema": {
              "type": "array",
              "maxLength": 50,
              "items": {
                "type": "integer",
                "format": "int64"
              }
            },
            "example": 1
          },
          {
            "name": "lessonId",
            "in": "query",
            "description": "ID занятия",
            "schema": {
              "type": "array",
              "maxLength": 50,
              "items": {
                "type": "integer",
                "format": "int64"
              }
            },
            "example": 1
          },
          {
            "name": "classId",
            "in": "query",
            "description": "ID группы",
            "schema": {
              "type": "array",
              "maxLength": 50,
              "items": {
                "type": "integer",
                "format": "int64"
              }
            },
            "example": 1
          },
          {
            "name": "date",
            "in": "query",
            "description": "Дата проведения занятий. Если указана одна дата, то происходит поиск только по одной дате. Если указаны 2 даты, то производится поиск по диапазону",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "maxLength": 2,
              "items": {
                "type": "string",
                "format": "date"
              }
            },
            "example": "2019-01-01"
          },
          {
            "name": "free",
            "in": "query",
            "description": "Бесплатная запись (посещение для ученика будет бесплатным)",
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "name": "visit",
            "in": "query",
            "description": "Статус посещения (true - ученик посетил занятие, false - пропустил)",
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "name": "test",
            "in": "query",
            "description": "Пробная запись на занятие",
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Не учитывать запись в количестве занятых мест",
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "name": "goodReason",
            "in": "query",
            "description": "Уважительная причина отсутствия (true - есть уважительная причина, false - нет)",
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "name": "paid",
            "in": "query",
            "description": "Платное занятие (true - платное, false - нет)",
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "name": "includeUserSubscriptions",
            "in": "query",
            "description": "Включить в ответ абонементы ученика (работает при includeBills=true)",
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "name": "includeFamilyRecords",
            "in": "query",
            "description": "Включить записи участников семьи",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/includeBills"
          },
          {
            "$ref": "#/components/parameters/includeWorkOffs"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "description": "Список записей",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LessonRecords"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "groups"
        ],
        "summary": "Содание записи на занятие",
        "description": "Создает новую запись на занятие",
        "requestBody": {
          "description": "Информация о записи",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LessonRecord"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Данные созданной записи",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LessonRecord"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/lessonRecords/{recordId}": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "Информация о записи",
        "parameters": [
          {
            "name": "recordId",
            "in": "path",
            "description": "ID записи",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "description": "Возвращает информацию о записи на занятие",
        "responses": {
          "200": {
            "description": "Данные записи",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LessonRecordExtended"
                }
              }
            }
          },
          "404": {
            "description": "Запись не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "groups"
        ],
        "summary": "Изменение записи",
        "description": "Изменяет информацию о записи",
        "parameters": [
          {
            "name": "recordId",
            "in": "path",
            "description": "ID записи",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Обновленная информация о записи",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LessonRecordEdit"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Обновленные данные записи",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LessonRecord"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Запись не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "groups"
        ],
        "summary": "Удаление записи",
        "description": "Удаляет запись на занятие",
        "parameters": [
          {
            "name": "recordId",
            "in": "path",
            "description": "ID записи",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Запись удалена"
          },
          "404": {
            "description": "Запись не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/joins": {
      "get": {
        "tags": [
          "joins"
        ],
        "summary": "Заявки",
        "description": "Возвращает список заявок (записей) в группы",
        "parameters": [
          {
            "$ref": "#/components/parameters/createdAt"
          },
          {
            "$ref": "#/components/parameters/updatedAt"
          },
          {
            "$ref": "#/components/parameters/stateChangedAt"
          },
          {
            "$ref": "#/components/parameters/filialId"
          },
          {
            "$ref": "#/components/parameters/classId"
          },
          {
            "$ref": "#/components/parameters/joinStatusId"
          },
          {
            "$ref": "#/components/parameters/joinUserId"
          },
          {
            "$ref": "#/components/parameters/managerId"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "name": "sort",
            "description": "Сортировка",
            "in": "query",
            "example": "createdAt",
            "schema": {
              "default": "id",
              "type": "string",
              "enum": [
                "id",
                "createdAt",
                "updatedAt"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/sortDirection"
          }
        ],
        "responses": {
          "200": {
            "description": "Список заявок",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Joins"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "joins"
        ],
        "summary": "Создание заявки",
        "description": "Создает новую заявку (запись) в группу",
        "requestBody": {
          "description": "Информация о заявке",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Join"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Данные созданной заявки",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Join"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "500": {
            "description": "Ошибка на стороне сервера",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/joins/{joinId}": {
      "get": {
        "tags": [
          "joins"
        ],
        "summary": "Информация о заявке",
        "description": "Возвращает информацию о заявке",
        "parameters": [
          {
            "name": "joinId",
            "in": "path",
            "description": "ID заявки",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Данные заявки",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Join"
                }
              }
            }
          },
          "404": {
            "description": "Заявка не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "joins"
        ],
        "summary": "Изменение заявки",
        "description": "Изменяет основную информацию по заявке",
        "parameters": [
          {
            "name": "joinId",
            "in": "path",
            "description": "ID заявки",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Обновленная информация по заявке",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JoinEdit"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Обновленные данные заявки",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Join"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Заявка не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "joins"
        ],
        "summary": "Удаление заявки",
        "description": "Удаляет заявку из системы.",
        "parameters": [
          {
            "name": "joinId",
            "in": "path",
            "description": "ID заявки",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Заявка удалена"
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Заявка не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/joins/{joinId}/status": {
      "post": {
        "tags": [
          "joins"
        ],
        "summary": "Изменение статуса заявки",
        "description": "Изменяет статус заявки",
        "parameters": [
          {
            "name": "joinId",
            "in": "path",
            "description": "ID заявки",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Новый статус и причина изменения",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "statusId": {
                    "description": "Статус заявки",
                    "type": "integer",
                    "format": "int64",
                    "example": 2
                  },
                  "statusChangeReasonId": {
                    "description": "ID причины смены статуса. Для изменения статуса заявки на \"Отказался\" используется набор причин клиента",
                    "type": "integer",
                    "format": "int32",
                    "example": 1
                  }
                },
                "required": [
                  "statusId"
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Статус изменен"
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Заявка не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/joins/{joinId}/tags": {
      "post": {
        "tags": [
          "joins"
        ],
        "summary": "Изменение тегов заявки",
        "description": "Изменяет теги заявки",
        "parameters": [
          {
            "name": "joinId",
            "in": "path",
            "description": "ID заявки",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Новые теги",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "tags": {
                    "description": "Id тегов",
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "example": [
                      2,
                      4
                    ]
                  }
                },
                "required": [
                  "tags"
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Теги изменены"
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Заявка не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/tasks": {
      "get": {
        "tags": [
          "tasks"
        ],
        "summary": "Задачи",
        "description": "Возвращает список задач",
        "parameters": [
          {
            "$ref": "#/components/parameters/createdAt"
          },
          {
            "$ref": "#/components/parameters/filialId"
          },
          {
            "$ref": "#/components/parameters/classId"
          },
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/managerId"
          },
          {
            "$ref": "#/components/parameters/taskCompleted"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "Список задач",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tasks"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tasks"
        ],
        "summary": "Создание задачи",
        "description": "Создает новую задачу",
        "requestBody": {
          "description": "Информация о задаче",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Task"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Данные созданной задачи",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/tasks/{taskId}": {
      "get": {
        "tags": [
          "tasks"
        ],
        "summary": "Информация о задаче",
        "description": "Возвращает задачу",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "ID задачи",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Данные задачи",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "404": {
            "description": "Задача не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tasks"
        ],
        "summary": "Изменение задачи",
        "description": "Изменяет задачу",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "ID задачи",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Обновленая задача",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Task"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Обновленные данные задачи",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Задача не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "tasks"
        ],
        "summary": "Удаление задачи",
        "description": "Удаляет задачу из системы.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "ID задачи",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Задача удалена"
          },
          "404": {
            "description": "Задача не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/joinStatuses": {
      "get": {
        "tags": [
          "catalog"
        ],
        "summary": "Статусы заявок",
        "description": "Возвращает список статусов заявок",
        "responses": {
          "200": {
            "description": "Список статусов",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JoinStatus"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/clientStatuses": {
      "get": {
        "tags": [
          "catalog"
        ],
        "summary": "Статусы клиентов",
        "description": "Возвращает список статусов клиентов",
        "responses": {
          "200": {
            "description": "Список статусов",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClientStatus"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/joinTags": {
      "get": {
        "tags": [
          "catalog"
        ],
        "summary": "Теги заявок",
        "description": "Возвращает список тегов для заявок",
        "responses": {
          "200": {
            "description": "Список тегов",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JoinTag"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/paymentTypes": {
      "get": {
        "tags": [
          "catalog"
        ],
        "summary": "Типы платежей",
        "description": "Возвращает типы платежей",
        "responses": {
          "200": {
            "description": "Список типов",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/files": {
      "post": {
        "tags": [
          "files"
        ],
        "summary": "Загрузка свободного файла",
        "description": "Загрузка свободного файла",
        "requestBody": {
          "description": "Данные файла",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileCreateCompany"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Файл добавлен",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "description": "ID созданного файла",
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "files"
        ],
        "summary": "Получение списка файлов пользователя",
        "description": "Получение списка файлов пользователя",
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "description": "Список файлов",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/File"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/files/{fileId}": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "Скачивание файла",
        "description": "Скачивание файла",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "ID файла",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Данные файла",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DownloadFile"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "files"
        ],
        "summary": "Удаление файла",
        "description": "Удаление файла",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "ID файла",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Файл удален"
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Файл не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "files"
        ],
        "summary": "Редактирование файла",
        "description": "Редактирование файла",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "ID файла",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Данные файла",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileEditCompany"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Файл отредактирован"
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/userComments": {
      "get": {
        "tags": [
          "userComments"
        ],
        "summary": "Комментарии",
        "description": "Возвращает список комментариев",
        "parameters": [
          {
            "$ref": "#/components/parameters/createdAt"
          },
          {
            "$ref": "#/components/parameters/classId"
          },
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/managerId"
          },
          {
            "$ref": "#/components/parameters/lessonId"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "Список комментариев",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserComments"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "userComments"
        ],
        "summary": "Создание комментария",
        "description": "Создает новый комментарий",
        "requestBody": {
          "description": "Комментарий",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserComment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Данные созданного комментария",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserComment"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/userComments/{commentId}": {
      "post": {
        "tags": [
          "userComments"
        ],
        "summary": "Изменение комментария",
        "description": "Изменяет комментарий",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "ID комментария",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Новые данные комментария",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCommentEdit"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Обновленный комментарий",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserComment"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Комментарий не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "userComments"
        ],
        "summary": "Информация о комментарии",
        "description": "Возвращает информацию о комментарии",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "ID комментария",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Комментарий",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserComment"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Комментарий не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "userComments"
        ],
        "summary": "Удаление комментария",
        "description": "Удаляет комментарий",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "ID комментария",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Комментарий удален"
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Комментарий не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/roles": {
      "get": {
        "tags": [
          "managers"
        ],
        "summary": "Список ролей сотрудников",
        "description": "Возвращает список ролей сотрудников",
        "responses": {
          "200": {
            "description": "Список ролей сотрудников",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/roles/{roleId}": {
      "get": {
        "tags": [
          "managers"
        ],
        "summary": "Информация о роли сотрудника",
        "description": "Возвращает информацию о роли сотрудника",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "ID роли сотрудника",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Данные роли сотрудника",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "404": {
            "description": "Роль не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/rates": {
      "get": {
        "tags": [
          "managers"
        ],
        "summary": "Список ставок сдельной оплаты",
        "description": "Возвращает список ставок сдельной оплаты",
        "responses": {
          "200": {
            "description": "Список ставок сдельной оплаты",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rate"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/rates/{rateId}": {
      "get": {
        "tags": [
          "managers"
        ],
        "summary": "Информация о ставке сдельной оплаты",
        "description": "Возвращает информацию о ставке сдельной оплаты",
        "parameters": [
          {
            "name": "rateId",
            "in": "path",
            "description": "ID ставки сдельной оплаты",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Данные ставки сдельной оплаты",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rate"
                }
              }
            }
          },
          "404": {
            "description": "Ставка сдельной оплаты не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/contracts": {
      "get": {
        "tags": [
          "documents"
        ],
        "summary": "Документы",
        "description": "Возвращает список документов",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "ID ученика",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Список документов",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Contract"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/auth/login": {
      "get": {
        "tags": [
          "userAuth"
        ],
        "summary": "Авторизация аккаунта через токен авторизации",
        "description": "Для авторизации используются токен, созданный в методе POST /v1/user/auth/authToken\n",
        "security": [],
        "parameters": [
          {
            "name": "Origin",
            "description": "Имя сервера, с которого производится запрос. Домен должен быть прописан в настройках личного кабинета, иначе авторизация не пройдет.\n",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authToken",
            "in": "query",
            "description": "Токен авторизации",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Успешная авторизация",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessTokenLogin"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "userAuth"
        ],
        "summary": "Авторизация аккаунта",
        "description": "Для авторизации используются реквизиты аккаунта\n",
        "security": [],
        "parameters": [
          {
            "name": "Origin",
            "description": "Имя сервера, с которого производится запрос. Домен должен быть прописан в настройках личного кабинета, иначе авторизация не пройдет.\n",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Параметры авторизации",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAuth"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Результат авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResult"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/auth/authToken": {
      "post": {
        "tags": [
          "userAuth"
        ],
        "summary": "Получение токена авторизации",
        "description": "Для авторизации используются реквизиты аккаунта. Метод нужен для получения временного токена авторизации.\n",
        "security": [],
        "parameters": [
          {
            "name": "Origin",
            "description": "Имя сервера, с которого производится запрос. Домен должен быть прописан в настройках личного кабинета, иначе авторизация не пройдет.\n",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Параметры авторизации",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAuth"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Результат авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthTokenResult"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/auth/logout": {
      "post": {
        "tags": [
          "userAuth"
        ],
        "summary": "Логаут аккаунта",
        "description": "Метод для выхода из системы. Сбрасывает сессию аккаунта.\n",
        "security": [
          {
            "userSession": [],
            "xCookieToken": [],
            "xCsrfToken": []
          },
          {
            "userOAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "Успешный выход"
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/auth/refresh": {
      "post": {
        "tags": [
          "userAuth"
        ],
        "summary": "Обновление сессии",
        "description": "Обновление сессии аккаунта. создает новую сессию с новым таймаутом и новым токеном CSRF. Старая сессия при этом перестает действовать\n",
        "security": [
          {
            "userSession": [],
            "xCookieToken": [],
            "xCsrfToken": []
          },
          {
            "userOAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Результат авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResult"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/auth/sendRestoreKey": {
      "post": {
        "tags": [
          "userAuth"
        ],
        "summary": "Ключ восстановления пароля",
        "description": "Отправляет на указанный email ключ для восстановления пароля",
        "security": [],
        "parameters": [
          {
            "name": "Origin",
            "description": "Имя сервера, с которого производится запрос. Домен должен быть прописан в настройках личного кабинета, иначе ключ не будет отправлен.\n",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Параметры для отправки ключа",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRestoreKey"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Ключ отправлен"
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "404": {
            "description": "Email не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/auth/setPassword": {
      "post": {
        "tags": [
          "userAuth"
        ],
        "summary": "Установка пароля",
        "description": "Устанавливает пароль на основе указанного ключа восстановления",
        "security": [],
        "parameters": [
          {
            "name": "Origin",
            "description": "Имя сервера, с которого производится запрос. Домен должен быть прописан в настройках личного кабинета, иначе пароль не будет восстановлен.\n",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Параметры для отправки ключа",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRestorePassword"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Пароль установлен"
          },
          "404": {
            "description": "Ключ не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/baseInfo": {
      "get": {
        "tags": [
          "userCommon"
        ],
        "summary": "Основная информация аккаунта",
        "security": [
          {
            "userSession": [],
            "xCookieToken": [],
            "xCsrfToken": []
          },
          {
            "userOAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Referer",
            "description": "Имя сервера, с которого производится запрос. Домен должен быть прописан в настройках личного кабинета.\n",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Возвращает основную информацию по аккаунту: ученики, их балансы, записи, группы, в которые они записаны и т.д.\n",
        "responses": {
          "200": {
            "description": "Данные аккаунта",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountInfo"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/lkSettings": {
      "get": {
        "tags": [
          "userCommon"
        ],
        "summary": "Настройки личного кабинета",
        "security": [],
        "parameters": [
          {
            "name": "Referer",
            "description": "Имя сервера, с которого производится запрос. Домен должен быть прописан в настройках личного кабинета.\n",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Настройки",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LkSettings"
                }
              }
            }
          },
          "404": {
            "description": "Домен личного кабинета не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/manifest.json": {
      "get": {
        "tags": [
          "userCommon"
        ],
        "summary": "manifest.json",
        "description": "Файл манифеста для браузеров",
        "security": [],
        "parameters": [
          {
            "name": "Referer",
            "description": "Имя сервера, с которого производится запрос. Домен должен быть прописан в настройках личного кабинета.\n",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "manifest.json",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Домен личного кабинета не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/lessons": {
      "get": {
        "tags": [
          "userLessons"
        ],
        "summary": "Занятия",
        "description": "Возвращает список занятий",
        "security": [
          {
            "userSession": [],
            "xCookieToken": [],
            "xCsrfToken": []
          },
          {
            "userOAuth": []
          }
        ],
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "Дата проведения занятий. Если указана одна дата, то происходит поиск только по одной дате. Если указаны 2 даты, то производится поиск по диапазону",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "maxLength": 2,
              "items": {
                "type": "string",
                "format": "date"
              }
            },
            "example": "2019-01-01"
          },
          {
            "$ref": "#/components/parameters/roomId"
          },
          {
            "$ref": "#/components/parameters/filialId"
          },
          {
            "$ref": "#/components/parameters/classId"
          },
          {
            "$ref": "#/components/parameters/teacherId"
          },
          {
            "$ref": "#/components/parameters/lessonStatusId"
          },
          {
            "$ref": "#/components/parameters/lessonUserId"
          },
          {
            "$ref": "#/components/parameters/scopeUserId"
          },
          {
            "$ref": "#/components/parameters/lessonVisitStatus"
          },
          {
            "$ref": "#/components/parameters/debt"
          },
          {
            "$ref": "#/components/parameters/includeRecords"
          },
          {
            "$ref": "#/components/parameters/includeComments"
          },
          {
            "$ref": "#/components/parameters/includeMarks"
          },
          {
            "$ref": "#/components/parameters/includeTasks"
          },
          {
            "$ref": "#/components/parameters/includeTasksLimited"
          },
          {
            "$ref": "#/components/parameters/includeTaskAnswers"
          },
          {
            "$ref": "#/components/parameters/includeParams"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/lessonId"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Поле сортировки",
            "schema": {
              "type": "string",
              "default": "id",
              "enum": [
                "id",
                "date"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Список занятий",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLessons"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/lessons/individuals": {
      "get": {
        "tags": [
          "userLessons"
        ],
        "summary": "Индивидуальные занятия",
        "description": "Возвращает список идивидуальных занятий для записи",
        "security": [
          {
            "userSession": [],
            "xCookieToken": [],
            "xCsrfToken": []
          },
          {
            "userOAuth": []
          }
        ],
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "Дата проведения занятий. Если указана одна дата, то происходит поиск только по одной дате. Если указаны 2 даты, то производится поиск по диапазону",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "maxLength": 2,
              "items": {
                "type": "string",
                "format": "date"
              }
            },
            "example": "2019-01-01"
          },
          {
            "name": "filialId",
            "in": "query",
            "description": "ID филиала",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "example": 1
          },
          {
            "$ref": "#/components/parameters/roomId"
          },
          {
            "$ref": "#/components/parameters/classId"
          },
          {
            "$ref": "#/components/parameters/teacherId"
          },
          {
            "$ref": "#/components/parameters/scopeUserId"
          }
        ],
        "responses": {
          "200": {
            "description": "Список занятий",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserIndividualLessons"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/lessons/{lessonId}": {
      "get": {
        "tags": [
          "userLessons"
        ],
        "summary": "Информация о занятии",
        "parameters": [
          {
            "name": "lessonId",
            "in": "path",
            "description": "ID занятия",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "$ref": "#/components/parameters/includeRecords"
          },
          {
            "$ref": "#/components/parameters/includeComments"
          },
          {
            "$ref": "#/components/parameters/includeMarks"
          },
          {
            "$ref": "#/components/parameters/includeTasks"
          },
          {
            "$ref": "#/components/parameters/includeTasksLimited"
          },
          {
            "$ref": "#/components/parameters/includeTaskAnswers"
          },
          {
            "$ref": "#/components/parameters/includeParams"
          }
        ],
        "description": "Возвращает информацию о занятии",
        "security": [
          {
            "userSession": [],
            "xCookieToken": [],
            "xCsrfToken": []
          },
          {
            "userOAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Данные занятия",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLesson"
                }
              }
            }
          },
          "404": {
            "description": "Занятие не найдено",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/lessons/{lessonId}/answer": {
      "post": {
        "tags": [
          "userLessons"
        ],
        "summary": "Создание ответа на задание",
        "description": "Создает ответ на задание",
        "security": [
          {
            "userSession": [],
            "xCookieToken": [],
            "xCsrfToken": []
          },
          {
            "userOAuth": []
          }
        ],
        "parameters": [
          {
            "name": "lessonId",
            "in": "path",
            "description": "ID занятия",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Данные ответа",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskAnswerCreateUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ответ добавлен",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "description": "ID нового ответа",
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Занятие не найдено",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/lessons/{lessonId}/answer/{answerId}": {
      "get": {
        "tags": [
          "userLessons"
        ],
        "summary": "Получение ответа на задание",
        "description": "Возвращает ответ на задание",
        "security": [
          {
            "userSession": [],
            "xCookieToken": [],
            "xCsrfToken": []
          },
          {
            "userOAuth": []
          }
        ],
        "parameters": [
          {
            "name": "lessonId",
            "in": "path",
            "description": "ID занятия",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "answerId",
            "in": "path",
            "description": "ID ответа",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "$ref": "#/components/parameters/scopeUserId"
          }
        ],
        "responses": {
          "200": {
            "description": "Ответ на задание",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskAnswer"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Занятие или ответ не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "userLessons"
        ],
        "summary": "Редактирование ответа на задание",
        "description": "Редактирует ответ на задание",
        "security": [
          {
            "userSession": [],
            "xCookieToken": [],
            "xCsrfToken": []
          },
          {
            "userOAuth": []
          }
        ],
        "parameters": [
          {
            "name": "lessonId",
            "in": "path",
            "description": "ID занятия",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "answerId",
            "in": "path",
            "description": "ID ответа",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Редактируемые данные ответа",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskAnswerEditUser"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Ответ добавлен"
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Занятие или ответ не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "lessons"
        ],
        "summary": "Удаление ответа на задание",
        "description": "Удаляет ответ на задание",
        "security": [
          {
            "userSession": [],
            "xCookieToken": [],
            "xCsrfToken": []
          },
          {
            "userOAuth": []
          }
        ],
        "parameters": [
          {
            "name": "lessonId",
            "in": "path",
            "description": "ID занятия",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "answerId",
            "in": "path",
            "description": "ID ответа",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ответ удален"
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Занятие или ответ не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/lessons/{lessonId}/answer/{answerId}/send": {
      "post": {
        "tags": [
          "userLessons"
        ],
        "summary": "Отправка ответа на проверку",
        "description": "Отправляет ответ на проверку",
        "security": [
          {
            "userSession": [],
            "xCookieToken": [],
            "xCsrfToken": []
          },
          {
            "userOAuth": []
          }
        ],
        "parameters": [
          {
            "name": "lessonId",
            "in": "path",
            "description": "ID занятия",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "answerId",
            "in": "path",
            "description": "ID ответа",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Доп информация",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "userId": {
                    "type": "integer",
                    "description": "ID пользователя"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Ответ отправлен"
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Занятие не найдено",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/lessons/{lessonId}/answer/{answerId}/comment": {
      "post": {
        "tags": [
          "userLessons"
        ],
        "summary": "Создание комментария к ответу на задание",
        "description": "Создает комментарий к ответу на задание",
        "security": [
          {
            "userSession": [],
            "xCookieToken": [],
            "xCsrfToken": []
          },
          {
            "userOAuth": []
          }
        ],
        "parameters": [
          {
            "name": "lessonId",
            "in": "path",
            "description": "ID занятия",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "answerId",
            "in": "path",
            "description": "ID ответа",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Данные ответа",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskAnswerCommentCreateUser"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Комментарий добавлен"
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Занятие или ответ не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/lessons/{lessonId}/answer/{answerId}/files": {
      "post": {
        "tags": [
          "userLessons"
        ],
        "summary": "Прикрепление файла к ответу на задание",
        "description": "Прикрепляет файл к ответу на задание",
        "security": [
          {
            "userSession": [],
            "xCookieToken": [],
            "xCsrfToken": []
          },
          {
            "userOAuth": []
          }
        ],
        "parameters": [
          {
            "name": "lessonId",
            "in": "path",
            "description": "ID занятия",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "answerId",
            "in": "path",
            "description": "ID ответа",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Данные файла",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskAnswerFileCreateUser"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Комментарий добавлен"
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Занятие или ответ не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/lessons/{lessonId}/answer/{answerId}/files/{fileId}": {
      "delete": {
        "tags": [
          "userLessons"
        ],
        "summary": "Удаление файла к ответу на задание",
        "description": "Удаляет файл к ответу на задание",
        "security": [
          {
            "userSession": [],
            "xCookieToken": [],
            "xCsrfToken": []
          },
          {
            "userOAuth": []
          }
        ],
        "parameters": [
          {
            "name": "lessonId",
            "in": "path",
            "description": "ID занятия",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "answerId",
            "in": "path",
            "description": "ID ответа",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "ID файла",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Файл удален"
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Занятие или ответ не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/lessons/{lessonId}/answer/{answerId}/comment/{commentId}": {
      "delete": {
        "tags": [
          "userLessons"
        ],
        "summary": "Удаление комментария к ответу на задание",
        "description": "Удаляет комментарий к ответу на задание",
        "security": [
          {
            "userSession": [],
            "xCookieToken": [],
            "xCsrfToken": []
          },
          {
            "userOAuth": []
          }
        ],
        "parameters": [
          {
            "name": "lessonId",
            "in": "path",
            "description": "ID занятия",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "answerId",
            "in": "path",
            "description": "ID ответа",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "ID комментария",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Комментарий удален"
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Занятие или ответ не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/lessonRecords": {
      "get": {
        "tags": [
          "userLessons"
        ],
        "summary": "Записи на занятия",
        "description": "Возвращает записи на занятия",
        "security": [
          {
            "userSession": [],
            "xCookieToken": [],
            "xCsrfToken": []
          },
          {
            "userOAuth": []
          }
        ],
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "Дата проведения занятий. Если указана одна дата, то происходит поиск только по одной дате. Если указаны 2 даты, то производится поиск по диапазону",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "maxLength": 2,
              "items": {
                "type": "string",
                "format": "date"
              }
            },
            "example": "2020-01-01"
          },
          {
            "name": "paid",
            "in": "query",
            "description": "Возвращать только платные записи",
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "name": "userId",
            "description": "ID записанного ученика",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123
          },
          {
            "$ref": "#/components/parameters/includeLessons"
          },
          {
            "$ref": "#/components/parameters/includeBills"
          },
          {
            "$ref": "#/components/parameters/includeUserSubscriptions"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Поле сортировки",
            "schema": {
              "type": "string",
              "default": "id",
              "enum": [
                "id",
                "date"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Список записей",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLessonRecords"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "userLessons"
        ],
        "summary": "Содание записи на занятие",
        "description": "Создает новую запись на занятие",
        "security": [
          {
            "userSession": [],
            "xCookieToken": [],
            "xCsrfToken": []
          },
          {
            "userOAuth": []
          }
        ],
        "requestBody": {
          "description": "Информация о записи",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLessonRecord"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Данные созданной записи",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLessonRecord"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/joins": {
      "post": {
        "tags": [
          "userLessons"
        ],
        "summary": "Создание заявки",
        "description": "Создает новую заявку (запись) в группу",
        "security": [
          {
            "userSession": [],
            "xCookieToken": [],
            "xCsrfToken": []
          },
          {
            "userOAuth": []
          }
        ],
        "requestBody": {
          "description": "Информация о заявке",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserJoin"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Результат создания заявки",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateJoinResult"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/lessonRecords/individual": {
      "post": {
        "tags": [
          "userLessons"
        ],
        "summary": "Содание записи на индивидуальное занятие",
        "description": "Создает новую запись на индивидуальное занятие",
        "security": [
          {
            "userSession": [],
            "xCookieToken": [],
            "xCsrfToken": []
          },
          {
            "userOAuth": []
          }
        ],
        "requestBody": {
          "description": "Информация о записи",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLessonRecordIndividual"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Данные созданной записи",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLessonRecord"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/lessonRecords/{recordId}": {
      "get": {
        "tags": [
          "userLessons"
        ],
        "summary": "Информация о записи",
        "parameters": [
          {
            "name": "recordId",
            "in": "path",
            "description": "ID записи",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "description": "Возвращает информацию о записи на занятие",
        "security": [
          {
            "userSession": [],
            "xCookieToken": [],
            "xCsrfToken": []
          },
          {
            "userOAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Данные записи",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLessonRecord"
                }
              }
            }
          },
          "404": {
            "description": "Запись не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "userLessons"
        ],
        "summary": "Удаление записи",
        "description": "Удаляет запись на занятие",
        "security": [
          {
            "userSession": [],
            "xCookieToken": [],
            "xCsrfToken": []
          },
          {
            "userOAuth": []
          }
        ],
        "parameters": [
          {
            "name": "recordId",
            "in": "path",
            "description": "ID записи",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Запись удалена"
          },
          "404": {
            "description": "Запись не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/payments": {
      "get": {
        "tags": [
          "userPayments"
        ],
        "summary": "Платежи ученика",
        "description": "Возвращает список платежей",
        "security": [
          {
            "userSession": [],
            "xCookieToken": [],
            "xCsrfToken": []
          },
          {
            "userOAuth": []
          }
        ],
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "Дата платежа. Если указана одна дата, то происходит поиск только по одной дате. Если указаны 2 даты, то производится поиск по диапазону",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "maxLength": 2,
              "items": {
                "type": "string",
                "format": "date"
              }
            },
            "example": "2019-01-01"
          },
          {
            "$ref": "#/components/parameters/includeUserSubscriptions"
          },
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "Список платежей",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPayments"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка в параметрах фильтра",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "userPayments"
        ],
        "summary": "Создание платежа",
        "description": "Создает платеж",
        "security": [
          {
            "userSession": [],
            "xCookieToken": [],
            "xCsrfToken": []
          },
          {
            "userOAuth": []
          }
        ],
        "requestBody": {
          "description": "Данные для создания платежа",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreateOnlinePayment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Данные для проведения платежа",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "type": "boolean",
                      "description": "Результат создания платежа",
                      "example": true
                    },
                    "error": {
                      "type": "object",
                      "description": "Информация об ошибке в случае неуспешного создания платежа",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Код ошибки",
                          "example": "IntegrationNotFound"
                        }
                      }
                    },
                    "directUrl": {
                      "type": "string",
                      "description": "URL для совершения платежа",
                      "example": "https://money.yandex.ru/payments/external/confirmation?orderId=22e12f66-000f-5000-8000-18db351245c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Ошибка в параметрах фильтра",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/invoices": {
      "get": {
        "tags": [
          "userPayments"
        ],
        "summary": "Счета ученика",
        "description": "Возвращает список счетов",
        "security": [
          {
            "userSession": [],
            "xCookieToken": [],
            "xCsrfToken": []
          },
          {
            "userOAuth": []
          }
        ],
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "Дата создания счета. Если указана одна дата, то происходит поиск только по одной дате. Если указаны 2 даты, то производится поиск по диапазону",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "maxLength": 2,
              "items": {
                "type": "string",
                "format": "date"
              }
            },
            "example": "2019-01-01,2019-06-01"
          },
          {
            "name": "remainSum",
            "in": "query",
            "description": "Сколько осталось заплатить по счету. Если указать 0, то будут найдены полностью оплаченные счета",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "maxLength": 2,
              "items": {
                "type": "number"
              }
            },
            "example": "1,999999"
          },
          {
            "name": "classId",
            "in": "query",
            "description": "ID группы",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "example": "1,123"
          },
          {
            "$ref": "#/components/parameters/includeUserSubscriptions"
          },
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "Список счетов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInvoices"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка в параметрах фильтра",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/bills": {
      "get": {
        "tags": [
          "userPayments"
        ],
        "summary": "Списания ученика",
        "description": "Возвращает списания за занятия, за истекшие абонементы.",
        "security": [
          {
            "userSession": [],
            "xCookieToken": [],
            "xCsrfToken": []
          },
          {
            "userOAuth": []
          }
        ],
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "Дата списания. Если указана одна дата, то происходит поиск только по одной дате. Если указаны 2 даты, то производится поиск по диапазону",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "maxLength": 2,
              "items": {
                "type": "string",
                "format": "date"
              }
            },
            "example": "2019-01-01"
          },
          {
            "name": "unassignedOnly",
            "in": "query",
            "description": "Возвращать только неиспользованные счета",
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "name": "group",
            "in": "query",
            "description": "Группировать неспользованные счета",
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "$ref": "#/components/parameters/includeRecords"
          },
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "Списания",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserBills"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/subscriptions": {
      "get": {
        "tags": [
          "userPayments"
        ],
        "summary": "Абонементы",
        "description": "Возвращает список абонементов",
        "security": [
          {
            "userSession": [],
            "xCookieToken": [],
            "xCsrfToken": []
          },
          {
            "userOAuth": []
          }
        ],
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "Дата продажи. Если указана одна дата, то происходит поиск только по одной дате. Если указаны 2 даты, то производится поиск по диапазону",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "maxLength": 2,
              "items": {
                "type": "string",
                "format": "date"
              }
            },
            "example": "2019-01-01"
          },
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/userSubscriptionStatus"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "Список абонементов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserUserSubscriptions"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/users/{userId}/avatar": {
      "post": {
        "tags": [
          "userCommon"
        ],
        "summary": "Изменение фото ученика",
        "description": "Изменяет фотографию ученика",
        "security": [
          {
            "userSession": [],
            "xCookieToken": [],
            "xCsrfToken": []
          },
          {
            "userOAuth": []
          }
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID ученика",
            "example": 123456,
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Данные фотографии",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Avatar"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Аватар успешно изменен"
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Ученик не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "userCommon"
        ],
        "summary": "Удаление фото ученика",
        "description": "Удаляет фотографию ученика",
        "security": [
          {
            "userSession": [],
            "xCookieToken": [],
            "xCsrfToken": []
          },
          {
            "userOAuth": []
          }
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID ученика",
            "example": 123456,
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Аватар успешно удален"
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Ученик не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/users/{userId}": {
      "post": {
        "tags": [
          "userCommon"
        ],
        "summary": "Изменение ученика",
        "description": "Изменяет основную информацию об ученике",
        "security": [
          {
            "userSession": [],
            "xCookieToken": [],
            "xCsrfToken": []
          },
          {
            "userOAuth": []
          }
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID ученика",
            "example": 123456,
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Обновленная информация об ученике",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRestricted"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Обновленные данные ученика",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRestricted"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Ученик не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/users/{userId}/status": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Изменение статуса ученика",
        "description": "Изменяет статус ученика",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID ученика",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Новый статус и причина изменения",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "statusId": {
                    "description": "Статус ученика",
                    "type": "integer",
                    "format": "int64",
                    "example": 2
                  },
                  "statusChangeReasonId": {
                    "description": "ID причины смены статуса",
                    "type": "integer",
                    "format": "int32",
                    "example": 1
                  }
                },
                "required": [
                  "statusId"
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Статус изменен"
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Ученик не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/lkStyle": {
      "get": {
        "tags": [
          "userCommon"
        ],
        "summary": "Стиль личного кабинета",
        "description": "Возвращает цвета оформления личного кабинета",
        "security": [],
        "parameters": [
          {
            "name": "Referer",
            "description": "Имя сервера, с которого производится запрос. Домен должен быть прописан в настройках личного кабинета.\n",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Стиль",
            "content": {
              "text/css": {}
            }
          },
          "404": {
            "description": "Домен личного кабинета не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/account": {
      "post": {
        "tags": [
          "userCommon"
        ],
        "summary": "Изменение настроек",
        "security": [
          {
            "userSession": [],
            "xCookieToken": [],
            "xCsrfToken": []
          },
          {
            "userOAuth": []
          }
        ],
        "description": "Применяет настройки аккаунта\n",
        "requestBody": {
          "description": "Настройки аккаунта",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountSettings"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Настройки изменены"
          }
        }
      }
    },
    "/v1/user/account/password": {
      "post": {
        "tags": [
          "userCommon"
        ],
        "summary": "Изменение пароля",
        "security": [
          {
            "userSession": [],
            "xCookieToken": [],
            "xCsrfToken": []
          },
          {
            "userOAuth": []
          }
        ],
        "description": "Изменяет пароль аккаунта\n",
        "requestBody": {
          "description": "Новый пароль",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPassword"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Пароль изменен"
          }
        }
      }
    },
    "/v1/user/files": {
      "get": {
        "tags": [
          "userFiles"
        ],
        "summary": "Получение списка файлов",
        "description": "Получение списка файлов",
        "security": [
          {
            "userSession": [],
            "xCookieToken": [],
            "xCsrfToken": []
          },
          {
            "userOAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/scopeUserId"
          },
          {
            "$ref": "#/components/parameters/includeManagers"
          }
        ],
        "responses": {
          "200": {
            "description": "Список файлов",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/File"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "userFiles"
        ],
        "summary": "Загрузка свободного файла",
        "description": "Загрузка свободного файла",
        "security": [
          {
            "userSession": [],
            "xCookieToken": [],
            "xCsrfToken": []
          },
          {
            "userOAuth": []
          }
        ],
        "requestBody": {
          "description": "Данные файла",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileCreateUser"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Файл добавлен"
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/files/{fileId}": {
      "get": {
        "tags": [
          "userFiles"
        ],
        "summary": "Скачивание файла",
        "description": "Скачивание файла",
        "security": [
          {
            "userSession": [],
            "xCookieToken": [],
            "xCsrfToken": []
          },
          {
            "userOAuth": []
          }
        ],
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "ID файла",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Данные файла",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DownloadFile"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "userFiles"
        ],
        "summary": "Удаление файла",
        "description": "Удаление файла",
        "security": [
          {
            "userSession": [],
            "xCookieToken": [],
            "xCsrfToken": []
          },
          {
            "userOAuth": []
          }
        ],
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "ID файла",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Файл удален"
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "userFiles"
        ],
        "summary": "Редактирование файла",
        "description": "Редактирование файла",
        "security": [
          {
            "userSession": [],
            "xCookieToken": [],
            "xCsrfToken": []
          },
          {
            "userOAuth": []
          }
        ],
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "ID файла",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Данные файла",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "userId": {
                    "description": "Id ученика",
                    "type": "integer",
                    "format": "int64",
                    "example": 1
                  },
                  "comment": {
                    "description": "Комментарий ученика",
                    "type": "string",
                    "example": "Текст комментария"
                  }
                },
                "required": [
                  "userId",
                  "comment"
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Файл изменен"
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен"
          },
          "404": {
            "description": "Файл не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/internal/integrations": {
      "get": {
        "tags": [
          "internal"
        ],
        "summary": "Интеграции",
        "description": "Возвращает список всех интеграций",
        "parameters": [
          {
            "name": "serviceType",
            "in": "query",
            "description": "Тип сервиса",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "enabled",
            "in": "query",
            "description": "Включена ли интеграция",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Список интеграций",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Integration"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/internal/integrations/{integrationId}": {
      "post": {
        "tags": [
          "internal"
        ],
        "description": "Обновляет интеграцию",
        "parameters": [
          {
            "name": "integrationId",
            "in": "path",
            "description": "ID интеграции",
            "example": 55,
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Данные интеграции",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "enabled": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Обновленная интеграция",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integration"
                }
              }
            }
          }
        }
      }
    },
    "/v1/public/acquiring/success/{uniqueKey}/{orderId}": {
      "get": {
        "tags": [
          "public"
        ],
        "summary": "Переход на страницу успешного платежа",
        "description": "Перенаправляет ученика на страницу успешного платежа",
        "parameters": [
          {
            "name": "uniqueKey",
            "in": "path",
            "description": "Уникальный ключ интеграции",
            "example": "000123-11bf5b37-e0b8-42e0-8dcf-dc8c4aefc000",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderId",
            "in": "path",
            "description": "ID заказа",
            "example": "11bf5b37-e0b8-42e0-8dcf-dc8c4aefc000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "Редирект пользователя на страницу успешной оплаты"
          }
        }
      },
      "post": {
        "tags": [
          "public"
        ],
        "description": "Ловит хук об изменении статуса платежа",
        "parameters": [
          {
            "name": "uniqueKey",
            "in": "path",
            "description": "Уникальный ключ интеграции",
            "example": "000123-11bf5b37-e0b8-42e0-8dcf-dc8c4aefc000",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderId",
            "in": "path",
            "description": "ID заказа",
            "example": "11bf5b37-e0b8-42e0-8dcf-dc8c4aefc000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/v1/public/calendarSync/{managerId}/{key}/{calendarName}": {
      "get": {
        "tags": [
          "public"
        ],
        "summary": "Переход на страницу успешного платежа",
        "description": "Перенаправляет ученика на страницу успешного платежа",
        "parameters": [
          {
            "name": "managerId",
            "in": "path",
            "description": "ID сотрудника",
            "example": 123,
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "Ключ интеграции",
            "example": "11bf5b37",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "calendarName",
            "in": "path",
            "description": "Название календаря",
            "example": "ownLessons.ical",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ownLessons.ical",
                "allLessons.ical",
                "ownTasks.ical",
                "allTasks.ical",
                "assignedTasks.ical"
              ]
            }
          },
          {
            "name": "filialId",
            "in": "query",
            "description": "ID филиала",
            "required": false,
            "explode": true,
            "style": "form",
            "schema": {
              "type": "array",
              "minLength": 1,
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Файл календаря"
          }
        }
      }
    },
    "/v1/public/verify/{integrationId}": {
      "get": {
        "tags": [
          "public"
        ],
        "summary": "Верификация интеграции через мета-тег",
        "description": "Возвращает страницу с пользовательским мета-тегом",
        "parameters": [
          {
            "name": "integrationId",
            "in": "path",
            "description": "ID интеграции",
            "example": 414,
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Неверный ID интеграции",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/public/robokassa/{integrationId}": {
      "get": {
        "tags": [
          "public"
        ],
        "summary": "Автоматическая верификация платежа через robokassa",
        "description": "Возвращает результат проверки параметров платежа",
        "parameters": [
          {
            "name": "integrationId",
            "in": "path",
            "description": "ID интеграции",
            "example": 414,
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "Редирект пользователя на страницу проверки оплаты"
          }
        }
      }
    },
    "/v1/payments/uiStyle": {
      "get": {
        "summary": "Стиль для страницы создания оплаты",
        "description": "Возвращает цвета для страницы создания оплаты",
        "security": [],
        "responses": {
          "200": {
            "description": "Стиль",
            "content": {
              "text/css": {}
            }
          }
        }
      }
    },
    "/v1/payments/userData": {
      "get": {
        "summary": "Данные ученика для оплаты",
        "description": "Возвращает данные ученика для создания платежа",
        "security": [],
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Ключ ученика",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Стиль",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/payments/pay": {
      "post": {
        "summary": "Создание платежа",
        "description": "Создает платеж",
        "security": [],
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Ключ ученика",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Данные для создания платежа",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreateOnlinePayment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Данные для проведения платежа",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "type": "boolean",
                      "description": "Результат создания платежа",
                      "example": true
                    },
                    "error": {
                      "type": "object",
                      "description": "Информация об ошибке в случае неуспешного создания платежа",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Код ошибки",
                          "example": "IntegrationNotFound"
                        }
                      }
                    },
                    "directUrl": {
                      "type": "string",
                      "description": "URL для совершения платежа",
                      "example": "https://money.yandex.ru/payments/external/confirmation?orderId=22e12f66-000f-5000-8000-18db351245c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Ошибка в параметрах фильтра",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/hooks/vkEvents/{integrationId}": {
      "post": {
        "tags": [
          "hooks"
        ],
        "summary": "Реакция на события от VK интеграций",
        "description": "Принимает запрос от VK API",
        "parameters": [
          {
            "name": "integrationId",
            "in": "path",
            "description": "ID интеграции",
            "example": 55,
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Информация о событии в группе",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VkEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "OK"
                }
              }
            }
          },
          "403": {
            "description": "Неверный секретный ключ callback сервера или id группы",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/hooks/vkLeadEvents/{integrationId}": {
      "post": {
        "tags": [
          "hooks"
        ],
        "summary": "Реакция на события от VK Lead интеграций",
        "description": "Принимает запрос от VK API",
        "parameters": [
          {
            "name": "integrationId",
            "in": "path",
            "description": "ID интеграции",
            "example": 55,
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Информация о событии в группе",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VkEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "OK"
                }
              }
            }
          },
          "403": {
            "description": "Неверный секретный ключ callback сервера или id группы",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/hooks/vkAdsEvents/{integrationId}": {
      "post": {
        "tags": [
          "hooks"
        ],
        "summary": "Реакция на события от VK интеграций",
        "description": "Принимает запрос от VK API",
        "parameters": [
          {
            "name": "integrationId",
            "in": "path",
            "description": "ID интеграции",
            "example": 55,
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Информация о событии в группе",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VkAdsEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "OK"
                }
              }
            }
          }
        }
      }
    },
    "/v1/hooks/fbEvents": {
      "post": {
        "tags": [
          "hooks"
        ],
        "summary": "Реакция на события от FB интеграций",
        "description": "Принимает запрос от FB API",
        "requestBody": {
          "description": "Информация о событиях генераций лидов",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FbEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Ошибка сервера",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "hooks"
        ],
        "summary": "Подтверждение подписки на события FB",
        "responses": {
          "200": {
            "description": "Ответ для подтверждения",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "OK"
                }
              }
            }
          }
        }
      }
    },
    "/v1/hooks/tilda/{uniqueKey}": {
      "post": {
        "tags": [
          "hooks"
        ],
        "summary": "Реакция на события от Tilda интеграций",
        "description": "Принимает запрос от Tilda",
        "parameters": [
          {
            "name": "uniqueKey",
            "in": "path",
            "description": "Уникальный ключ интеграции",
            "example": "000123-11bf5b37-e0b8-42e0-8dcf-dc8c4aefc000",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Информация о событии",
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TildaEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Неверный ключ интеграции",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/hooks/amoEvents/{uniqueKey}": {
      "post": {
        "tags": [
          "hooks"
        ],
        "summary": "Реакция на события от amoCRM интеграций",
        "description": "Принимает запрос от amoCRM",
        "parameters": [
          {
            "name": "uniqueKey",
            "in": "path",
            "description": "Уникальный ключ интеграции",
            "example": "000123-11bf5b37-e0b8-42e0-8dcf-dc8c4aefc000",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Информация о событии",
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/AmoEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Неверный ключ интеграции",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/hooks/igEvents/{integrationId}": {
      "post": {
        "tags": [
          "hooks"
        ],
        "summary": "Реакция на события от Instagram интеграций",
        "description": "Принимает запрос от сервиса Instagram",
        "parameters": [
          {
            "name": "integrationId",
            "in": "path",
            "description": "ID интеграции",
            "example": 55,
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Информация о событии",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IgEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "OK"
                }
              }
            }
          },
          "403": {
            "description": "Неверный внутренний секретный ключ",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/hooks/bitrixEvents/{uniqueKey}": {
      "post": {
        "tags": [
          "hooks"
        ],
        "summary": "Реакция на события от Bitrix24 интеграций",
        "description": "Принимает запрос от Bitrix24",
        "parameters": [
          {
            "name": "uniqueKey",
            "in": "path",
            "description": "Уникальный ключ интеграции",
            "example": "000123-11bf5b37-e0b8-42e0-8dcf-dc8c4aefc000",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Информация о событии",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BitrixEvent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/BitrixEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Неверный ключ интеграции",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/hooks/jivoSiteEvents/{uniqueKey}": {
      "post": {
        "tags": [
          "hooks"
        ],
        "summary": "Реакция на события от JivoSite интеграций",
        "description": "Принимает запрос от JivoSite",
        "parameters": [
          {
            "name": "uniqueKey",
            "in": "path",
            "description": "Уникальный ключ интеграции",
            "example": "000123-11bf5b37-e0b8-42e0-8dcf-dc8c4aefc000",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Информация о событии",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JivoSiteEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Неверный ключ интеграции",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/hooks/paymentEvents/tochkaEvents": {
      "post": {
        "tags": [
          "hooks"
        ],
        "summary": "Реакция на события от ТочкаБанка",
        "description": "Принимает POST запрос от платежной системы",
        "requestBody": {
          "description": "Информация о событии",
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/PaymentSystemEvent",
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Неверное тело запроса",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/hooks/paymentEvents/{uniqueKey}": {
      "get": {
        "tags": [
          "hooks"
        ],
        "summary": "Реакция на события от платежных систем",
        "description": "Принимает GET запрос от платежной системы",
        "parameters": [
          {
            "name": "uniqueKey",
            "in": "path",
            "description": "Уникальный ключ интеграции",
            "example": "000123-11bf5b37-e0b8-42e0-8dcf-dc8c4aefc000",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Неверный ключ интеграции",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "hooks"
        ],
        "summary": "Реакция на события от платежных систем",
        "description": "Принимает POST запрос от платежной системы",
        "parameters": [
          {
            "name": "uniqueKey",
            "in": "path",
            "description": "Уникальный ключ интеграции",
            "example": "000123-11bf5b37-e0b8-42e0-8dcf-dc8c4aefc000",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Информация о событии",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentSystemEvent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PaymentSystemEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Неверный ключ интеграции",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/hooks/kassaEvents/report/{key}": {
      "post": {
        "tags": [
          "hooks"
        ],
        "summary": "Отчет после фискализации чека",
        "description": "Принимает хук с данными о статусе фискализации после ее завершения",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Ключ",
            "example": "WzQwNSwiOTMwNSJd",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "..."
          }
        }
      }
    },
    "/v1/hooks/smsVizitkaEvents": {
      "post": {
        "tags": [
          "hooks"
        ],
        "summary": "Принимает пришедшие сообщения и отчеты об отправленных сообщениях",
        "description": "Принимает хук от СМС-визитки",
        "parameters": [
          {
            "name": "servicekey",
            "description": "Уникальный ключ интеграции",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "managerId",
            "description": "ID сотрудника",
            "required": false,
            "in": "header",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Информация о событии",
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SmsVizitkaEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Неверный ключ интеграции",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Интеграция не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Ошибка сервера",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/hooks/telegramEvents/{uniqueKey}": {
      "post": {
        "tags": [
          "hooks"
        ],
        "summary": "Принимает события",
        "description": "Принимает хук от телеграма",
        "parameters": [
          {
            "name": "uniqueKey",
            "in": "path",
            "description": "Уникальный ключ интеграции",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Данные о событии",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Неверный ключ интеграции",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Интеграция не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Ошибка сервера",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/hooks/wazzupEvents/{uniqueKey}": {
      "post": {
        "tags": [
          "hooks"
        ],
        "summary": "Принимает пришедшие сообщения и отчеты об отправленных сообщениях",
        "description": "Принимает хук от Wazzup24",
        "parameters": [
          {
            "name": "uniqueKey",
            "in": "path",
            "description": "Уникальный ключ интеграции",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Данные о событии",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Неверный ключ интеграции",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Интеграция не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Ошибка сервера",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/hooks/roistatEvents/{uniqueKey}": {
      "get": {
        "summary": "Осуществляет выгрузку данных из CRM и обрабатывает новые заявки",
        "description": "Принимает хуки от Roistat",
        "parameters": [
          {
            "name": "uniqueKey",
            "in": "path",
            "required": true,
            "description": "Уникальный ключ интеграции",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "action",
            "in": "query",
            "description": "Код действия",
            "schema": {
              "enum": [
                "lead",
                "export",
                "export_clients",
                "export_products",
                "import_scheme",
                "task",
                "message"
              ],
              "type": "string"
            }
          },
          {
            "name": "manager_id",
            "in": "query",
            "description": "Ответственный сотрудник",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "title",
            "in": "query",
            "description": "Заголовок сообщения/новой заявки",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "email клиента",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "phone",
            "in": "query",
            "description": "Номер телефона клиента",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Имя клиента",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "Дата, после которой были изменения в клиентах\\сделках (записях) (UNIX)",
            "schema": {
              "type": "string",
              "pattern": "^\\d{10}$"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Кол-во выгружаемых клиентов\\сделок (записей)",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Кол-во клиентов\\сделок (записей) от начала выборки, которые нужно пропустить",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "leadId",
            "in": "query",
            "description": "ID сделки (записи)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "message",
            "in": "query",
            "description": "Текст сообщения",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "element_id",
            "in": "query",
            "description": "ID сделки (записи)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deadline",
            "in": "query",
            "description": "Крайний срок задачи (UTC+0)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "text",
            "in": "query",
            "description": "Текст задачи/Комментарий, содержащий доп. информацию",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Неверный ключ интеграции",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Интеграция не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Ошибка сервера",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/users/{userId}/attribute/{attrId}": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Изменение атрибута ученика",
        "description": "Изменяет информацию в атрибутах ученика",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID ученика",
            "example": 1,
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "attrId",
            "in": "path",
            "description": "ID атрибута или его alias",
            "example": "1 или birthday",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Новое значение атрибута",
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "type": "object",
                    "title": "Атрибут прочих типов",
                    "required": [
                      "value"
                    ],
                    "properties": {
                      "value": {
                        "description": "Значение атрибута. При передаче null атрибут удаляется.",
                        "anyOf": [
                          {
                            "type": "integer",
                            "format": "int64",
                            "nullable": true
                          },
                          {
                            "type": "boolean",
                            "nullable": true
                          },
                          {
                            "type": "string",
                            "nullable": true
                          }
                        ],
                        "example": "2001-01-01 или null"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "title": "Атрибут типа select",
                    "required": [
                      "valueId"
                    ],
                    "properties": {
                      "valueId": {
                        "description": "ID значения атрибута (если тип атрибута - select). При передаче null атрибут удаляется.",
                        "type": "integer",
                        "format": "int64",
                        "nullable": true,
                        "example": 300
                      }
                    }
                  },
                  {
                    "type": "object",
                    "title": "Атрибут типа multiselect",
                    "required": [
                      "valueIds"
                    ],
                    "properties": {
                      "valueIds": {
                        "type": "array",
                        "description": "Массив ID значений атрибута (если тип атрибута - multiselect). При передаче null атрибут удаляется.",
                        "items": {
                          "type": "integer",
                          "format": "int64",
                          "nullable": true,
                          "example": 300
                        },
                        "nullable": true
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Обновленные данные ученика",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "402": {
            "description": "Ограничения лицензии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestricts"
                }
              }
            }
          },
          "404": {
            "description": "Ученик не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/subscriptionGroupings": {
      "get": {
        "tags": [
          "subscriptions"
        ],
        "summary": "Группировки видов абонементов",
        "parameters": [
          {
            "$ref": "#/components/parameters/includeSubscriptions"
          }
        ],
        "description": "Возвращает список группировок видов абонементов",
        "responses": {
          "200": {
            "description": "Список группировок",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SubscriptionsGrouping"
                      },
                      {
                        "properties": {
                          "subscriptions": {
                            "description": "Виды абонементов (при includeSubscriptions=true)",
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/Subscription"
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/managers/individualLessons": {
      "get": {
        "tags": [
          "userLessons"
        ],
        "summary": "Список преподавателей для индивидуальных занятий",
        "description": "Возвращает список преподавателей для записи на индивидуальные занятия со свободным временем",
        "security": [
          {
            "userSession": [],
            "xCookieToken": [],
            "xCsrfToken": []
          },
          {
            "userOAuth": []
          }
        ],
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "Дата для записи. При указании одной даты свободное время расчитывается для одной даты. При двух - для диапазона. Если же дата не указана - берутся данные за сегодня",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "maxLength": 2,
              "items": {
                "type": "string",
                "format": "date"
              }
            },
            "example": "2020-01-01"
          },
          {
            "name": "filialId",
            "in": "query",
            "description": "ID филиала",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 1
          },
          {
            "name": "managerId",
            "description": "ID сотрудника",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            },
            "example": 2
          },
          {
            "name": "intervalDuration",
            "description": "Длительность занятия",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/classId"
          }
        ],
        "responses": {
          "200": {
            "description": "Список преподавателей",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserManagersIndividual"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/cashboxes": {
      "get": {
        "tags": [
          "cashboxes"
        ],
        "summary": "Список касс",
        "description": "Возвращает список касс",
        "responses": {
          "200": {
            "description": "Список касс",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cashboxes"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "cashboxes"
        ],
        "summary": "Создание кассы",
        "description": "Создает кассу",
        "requestBody": {
          "description": "Данные для новой кассы",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CashboxCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Касса создана",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cashbox"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "404": {
            "description": "Касса не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/cashboxes/{cashboxId}": {
      "get": {
        "tags": [
          "cashboxes"
        ],
        "summary": "Информация о кассе",
        "description": "Возвращает информацию о кассе",
        "parameters": [
          {
            "name": "cashboxId",
            "in": "path",
            "description": "ID кассы",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Данные о кассе",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cashbox"
                }
              }
            }
          },
          "404": {
            "description": "Касса не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "cashboxes"
        ],
        "summary": "Изменение кассы",
        "description": "Изменяет кассу",
        "parameters": [
          {
            "name": "cashboxId",
            "in": "path",
            "description": "ID кассы",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Новые данные кассы",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CashboxEdit"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Обновленные данные кассы",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cashbox"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "404": {
            "description": "Касса не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "cashboxes"
        ],
        "summary": "Удаление кассы",
        "description": "Удаляет кассу",
        "parameters": [
          {
            "name": "cashboxId",
            "in": "path",
            "description": "ID кассы",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Касса удалена"
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          },
          "404": {
            "description": "Касса не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorHandling"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "companyApiKey": {
        "type": "apiKey",
        "name": "x-access-token",
        "in": "header",
        "description": "Токен уровня компании дает возможность поизводить действия с данными напрямую, без проверки прав доступа отдельного сотрудника.\nПеред началом работы нужно получить токен методом [/v1/company/auth/getToken](#tag/auth/paths/~1v1~1company~1auth~1getToken/post) и далее отправлять его в заголовке при каждом запросе.\n\nСрок жизни токена - 7 дней, однако рекомендуется получать токен каждый раз при работе с API, и по окончании удалять его методом [/v1/company/auth/revokeToken](#tag/auth/paths/~1v1~1company~1auth~1revokeToken/post)\n"
      },
      "userSession": {
        "type": "apiKey",
        "in": "cookie",
        "name": "SESSIONID",
        "description": "Работа с API уровня ученика предполагает использование его в браузерах, поэтому при авторизации используются COOKIES.\n\nПри любом запросе к API в COOKIES должны быть переданы параметры SESSIONID и TOKEN. При работе в браузере эти параметры устанавливаются сервером во время успешной авторизации, поэтому обычно разработчику ничего дополнительно делать не нужно.\n"
      },
      "xCookieToken": {
        "type": "apiKey",
        "in": "cookie",
        "name": "TOKEN",
        "description": "Для защиты от CSRF-атак используется токен. Его нужно передавать при каждом запросе к серверу вместе с SESSIONID. При работе в браузере эти параметры устанавливаются сервером во время успешной авторизации, поэтому обычно разработчику ничего дополнительно делать не нужно.\n"
      },
      "xCsrfToken": {
        "type": "apiKey",
        "in": "header",
        "name": "x-csrf-token",
        "description": "Для дополнительной защиты от CSRF-атак при каждом запросе к API в заголовке запроса должен быть отправлен токен. Сервер возвращает csrfToken при успешной авторизации.\n"
      },
      "userOAuth": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://oauth.moyklass.com/user",
            "tokenUrl": "https://oauth.moyklass.com/auth/user/access_token",
            "refreshUrl": "https://oauth.moyklass.com/auth/user/access_token",
            "scopes": {
              "full": "Полный доступ к API ученика"
            }
          }
        },
        "description": "К API уровня ученика можно получить доступ с помощью OAuth-авторизации\n"
      }
    },
    "schemas": {
      "User": {
        "title": "Ученик",
        "type": "object",
        "properties": {
          "id": {
            "description": "ID ученика в системе",
            "type": "integer",
            "format": "int64",
            "example": 123456,
            "readOnly": true
          },
          "name": {
            "description": "Полное имя ученика",
            "type": "string",
            "maxLength": 100,
            "example": "Иванов Петр Александрович"
          },
          "email": {
            "description": "Email ученика",
            "type": "string",
            "format": "email",
            "maxLength": 100,
            "nullable": true,
            "example": "ivanov@site.com"
          },
          "phone": {
            "description": "Номер телефона ученика",
            "type": "string",
            "maxLength": 15,
            "nullable": true,
            "pattern": "^[0-9]{10,15}$",
            "example": 79001234567
          },
          "updatedAt": {
            "$ref": "#/components/schemas/Join/properties/updatedAt"
          },
          "createdAt": {
            "$ref": "#/components/schemas/Join/properties/createdAt"
          },
          "balans": {
            "description": "Баланс ученика с вычетом долгов (availableBalance минус долги по счетам, может быть отрицательным)",
            "type": "number",
            "format": "double",
            "readOnly": true,
            "example": 100
          },
          "availableBalance": {
            "description": "Доступный баланс ученика (сумма приходов и расходов)",
            "type": "number",
            "format": "double",
            "readOnly": true,
            "example": 100
          },
          "responsibleId": {
            "description": "ID ответственного менеджера",
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "deprecated": true,
            "example": 12322
          },
          "advSourceId": {
            "description": "ID информационного источника (откуда ученик узнал о компании)",
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 23456
          },
          "createSourceId": {
            "$ref": "#/components/schemas/Join/properties/createSourceId"
          },
          "stateChangedAt": {
            "$ref": "#/components/schemas/Join/properties/stateChangedAt"
          },
          "statusChangeReasonId": {
            "description": "ID причины смены статуса",
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "clientStateId": {
            "description": "ID статуса клиента",
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 10
          },
          "filials": {
            "description": "ID филиалов ученика",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "responsibles": {
            "description": "ID ответственных сотрудников ученика",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "attributes": {
            "description": "Дополнительные атрибуты ученика",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "object",
                  "title": "Атрибут типа select, по ID атрибута",
                  "required": [
                    "attributeId",
                    "valueId"
                  ],
                  "properties": {
                    "attributeId": {
                      "description": "ID атрибута",
                      "type": "integer",
                      "format": "int64",
                      "example": 2
                    },
                    "attributeAlias": {
                      "description": "Алиас атрибута",
                      "type": "string",
                      "example": "skills_level",
                      "readOnly": true
                    },
                    "attributeName": {
                      "description": "Название атрибута",
                      "type": "string",
                      "example": "Уровень подготовки",
                      "readOnly": true
                    },
                    "attributeType": {
                      "description": "Тип атрибута",
                      "type": "string",
                      "enum": [
                        "select"
                      ],
                      "example": "select",
                      "readOnly": true
                    },
                    "value": {
                      "description": "Значение атрибута",
                      "type": "string",
                      "example": "Опытный",
                      "readOnly": true
                    },
                    "valueId": {
                      "description": "ID значения атрибута (если тип атрибута - select)",
                      "type": "integer",
                      "format": "int64",
                      "example": 300
                    }
                  }
                },
                {
                  "type": "object",
                  "title": "Атрибут типа select, по алиасу атрибута",
                  "required": [
                    "attributeAlias",
                    "valueId"
                  ],
                  "properties": {
                    "attributeId": {
                      "description": "ID атрибута",
                      "type": "integer",
                      "format": "int64",
                      "example": 2,
                      "readOnly": true
                    },
                    "attributeAlias": {
                      "description": "Алиас атрибута",
                      "type": "string",
                      "example": "skills_level"
                    },
                    "attributeName": {
                      "description": "Название атрибута",
                      "type": "string",
                      "example": "Уровень подготовки",
                      "readOnly": true
                    },
                    "attributeType": {
                      "description": "Тип атрибута",
                      "type": "string",
                      "enum": [
                        "select"
                      ],
                      "example": "select",
                      "readOnly": true
                    },
                    "value": {
                      "description": "Значение атрибута",
                      "type": "string",
                      "example": "Опытный",
                      "readOnly": true
                    },
                    "valueId": {
                      "description": "ID значения атрибута (если тип атрибута - select)",
                      "type": "integer",
                      "format": "int64",
                      "example": 300
                    }
                  }
                },
                {
                  "type": "object",
                  "title": "Атрибут типа phone, по ID атрибута",
                  "required": [
                    "attributeId",
                    "value"
                  ],
                  "properties": {
                    "attributeId": {
                      "description": "ID атрибута",
                      "type": "integer",
                      "format": "int64",
                      "example": 2
                    },
                    "attributeAlias": {
                      "description": "Алиас атрибута",
                      "type": "string",
                      "example": "mom_phone",
                      "readOnly": true
                    },
                    "attributeName": {
                      "description": "Название атрибута",
                      "type": "string",
                      "example": "Номер телефона матери",
                      "readOnly": true
                    },
                    "attributeType": {
                      "description": "Тип атрибута",
                      "type": "string",
                      "enum": [
                        "phone"
                      ],
                      "example": "phone",
                      "readOnly": true
                    },
                    "value": {
                      "description": "Значение атрибута",
                      "type": "string",
                      "maxLength": 15,
                      "pattern": "^[0-9]{10,15}$",
                      "example": 79001234567
                    }
                  }
                },
                {
                  "type": "object",
                  "title": "Атрибут типа phone, по алиасу атрибута",
                  "required": [
                    "attributeAlias",
                    "value"
                  ],
                  "properties": {
                    "attributeId": {
                      "description": "ID атрибута",
                      "type": "integer",
                      "format": "int64",
                      "example": 2,
                      "readOnly": true
                    },
                    "attributeAlias": {
                      "description": "Алиас атрибута",
                      "type": "string",
                      "example": "mom_phone"
                    },
                    "attributeName": {
                      "description": "Название атрибута",
                      "type": "string",
                      "example": "Номер телефона матери",
                      "readOnly": true
                    },
                    "attributeType": {
                      "description": "Тип атрибута",
                      "type": "string",
                      "enum": [
                        "phone"
                      ],
                      "example": "phone",
                      "readOnly": true
                    },
                    "value": {
                      "description": "Значение атрибута",
                      "type": "string",
                      "maxLength": 15,
                      "pattern": "^[0-9]{10,15}$",
                      "example": 79001234567
                    }
                  }
                },
                {
                  "type": "object",
                  "title": "Атрибут типа email, по ID атрибута",
                  "required": [
                    "attributeId",
                    "value"
                  ],
                  "properties": {
                    "attributeId": {
                      "description": "ID атрибута",
                      "type": "integer",
                      "format": "int64",
                      "example": 2
                    },
                    "attributeAlias": {
                      "description": "Алиас атрибута",
                      "type": "string",
                      "example": "mom_email",
                      "readOnly": true
                    },
                    "attributeName": {
                      "description": "Название атрибута",
                      "type": "string",
                      "example": "Email матери",
                      "readOnly": true
                    },
                    "attributeType": {
                      "description": "Тип атрибута",
                      "type": "string",
                      "enum": [
                        "email"
                      ],
                      "example": "email",
                      "readOnly": true
                    },
                    "value": {
                      "description": "Значение атрибута",
                      "type": "string",
                      "format": "email",
                      "maxLength": 100,
                      "example": "ivanova@site.com"
                    }
                  }
                },
                {
                  "type": "object",
                  "title": "Атрибут типа email, по алиасу атрибута",
                  "required": [
                    "attributeAlias",
                    "value"
                  ],
                  "properties": {
                    "attributeId": {
                      "description": "ID атрибута",
                      "type": "integer",
                      "format": "int64",
                      "example": 2,
                      "readOnly": true
                    },
                    "attributeAlias": {
                      "description": "Алиас атрибута",
                      "type": "string",
                      "example": "mom_phone"
                    },
                    "attributeName": {
                      "description": "Название атрибута",
                      "type": "string",
                      "example": "Номер телефона матери",
                      "readOnly": true
                    },
                    "attributeType": {
                      "description": "Тип атрибута",
                      "type": "string",
                      "enum": [
                        "email"
                      ],
                      "example": "email",
                      "readOnly": true
                    },
                    "value": {
                      "description": "Значение атрибута",
                      "type": "string",
                      "format": "email",
                      "maxLength": 100,
                      "example": "ivanova@site.com"
                    }
                  }
                },
                {
                  "type": "object",
                  "title": "Атрибут прочих типов, по ID атрибута",
                  "required": [
                    "attributeId",
                    "value"
                  ],
                  "properties": {
                    "attributeId": {
                      "description": "ID атрибута",
                      "type": "integer",
                      "format": "int64",
                      "example": 2
                    },
                    "attributeAlias": {
                      "description": "Алиас атрибута",
                      "type": "string",
                      "example": "skills_level",
                      "readOnly": true
                    },
                    "attributeName": {
                      "description": "Название атрибута",
                      "type": "string",
                      "example": "Опытный",
                      "readOnly": true
                    },
                    "attributeType": {
                      "description": "Тип атрибута",
                      "type": "string",
                      "enum": [
                        "string",
                        "date",
                        "checkbox",
                        "number"
                      ],
                      "example": "string",
                      "readOnly": true
                    },
                    "value": {
                      "description": "Значение атрибута",
                      "type": "string",
                      "example": "Опытный"
                    }
                  }
                },
                {
                  "type": "object",
                  "title": "Атрибут boolean, по ID атрибута",
                  "required": [
                    "attributeId",
                    "value"
                  ],
                  "properties": {
                    "attributeId": {
                      "description": "ID атрибута",
                      "type": "integer",
                      "format": "int64",
                      "example": 2
                    },
                    "attributeAlias": {
                      "description": "Алиас атрибута",
                      "type": "string",
                      "example": "subscribe_mailing",
                      "readOnly": true
                    },
                    "attributeName": {
                      "description": "Название атрибута",
                      "type": "string",
                      "example": "Подписан на рассылку",
                      "readOnly": true
                    },
                    "attributeType": {
                      "description": "Тип атрибута",
                      "type": "boolean",
                      "enum": [
                        "boolean"
                      ],
                      "example": "boolean",
                      "readOnly": true
                    },
                    "value": {
                      "description": "Значение атрибута",
                      "type": "boolean",
                      "example": true
                    }
                  }
                },
                {
                  "type": "object",
                  "title": "Атрибут boolean, по алиасу атрибута",
                  "required": [
                    "attributeAlias",
                    "value"
                  ],
                  "properties": {
                    "attributeId": {
                      "description": "ID атрибута",
                      "type": "integer",
                      "format": "int64",
                      "example": 2,
                      "readOnly": true
                    },
                    "attributeAlias": {
                      "description": "Алиас атрибута",
                      "type": "string",
                      "example": "subscribe_mailing"
                    },
                    "attributeName": {
                      "description": "Название атрибута",
                      "type": "string",
                      "example": "Подписан на рассылку",
                      "readOnly": true
                    },
                    "attributeType": {
                      "description": "Тип атрибута",
                      "type": "string",
                      "enum": [
                        "boolean"
                      ],
                      "example": "boolean",
                      "readOnly": true
                    },
                    "value": {
                      "description": "Значение атрибута",
                      "type": "boolean",
                      "example": true
                    }
                  }
                },
                {
                  "type": "object",
                  "title": "Атрибут прочих типов, по алиасу атрибута",
                  "required": [
                    "attributeAlias",
                    "value"
                  ],
                  "properties": {
                    "attributeId": {
                      "description": "ID атрибута",
                      "type": "integer",
                      "format": "int64",
                      "example": 2,
                      "readOnly": true
                    },
                    "attributeAlias": {
                      "description": "Алиас атрибута",
                      "type": "string",
                      "example": "skills_level"
                    },
                    "attributeName": {
                      "description": "Название атрибута",
                      "type": "string",
                      "example": "Опытный",
                      "readOnly": true
                    },
                    "attributeType": {
                      "description": "Тип атрибута",
                      "type": "string",
                      "enum": [
                        "string",
                        "date",
                        "checkbox",
                        "number"
                      ],
                      "example": "string",
                      "readOnly": true
                    },
                    "value": {
                      "description": "Значение атрибута",
                      "type": "string",
                      "example": "Опытный"
                    }
                  }
                },
                {
                  "type": "object",
                  "title": "Атрибут типа multiselect, по ID атрибута",
                  "required": [
                    "attributeId",
                    "valueIds"
                  ],
                  "properties": {
                    "attributeId": {
                      "description": "ID атрибута",
                      "type": "integer",
                      "format": "int64",
                      "example": 2
                    },
                    "attributeAlias": {
                      "description": "Алиас атрибута",
                      "type": "string",
                      "example": "skills_level",
                      "readOnly": true
                    },
                    "attributeType": {
                      "description": "Тип атрибута",
                      "type": "string",
                      "enum": [
                        "multiselect"
                      ],
                      "example": "multiselect",
                      "readOnly": true
                    },
                    "valueIds": {
                      "description": "Id значений атрибута",
                      "type": "array",
                      "items": {
                        "type": "number"
                      },
                      "example": "4,5"
                    },
                    "values": {
                      "description": "Значения",
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "readOnly": true
                    }
                  }
                },
                {
                  "type": "object",
                  "title": "Атрибут типа multiselect, по алиасу атрибута",
                  "required": [
                    "attributeAlias",
                    "valueIds"
                  ],
                  "properties": {
                    "attributeId": {
                      "description": "ID атрибута",
                      "type": "integer",
                      "format": "int64",
                      "example": 2,
                      "readOnly": true
                    },
                    "attributeAlias": {
                      "description": "Алиас атрибута",
                      "type": "string",
                      "example": "skills_level"
                    },
                    "attributeType": {
                      "description": "Тип атрибута",
                      "type": "string",
                      "enum": [
                        "multiselect"
                      ],
                      "example": "multiselect",
                      "readOnly": true
                    },
                    "valueIds": {
                      "description": "Id значений атрибута",
                      "type": "array",
                      "items": {
                        "type": "number"
                      },
                      "example": "4,5"
                    },
                    "values": {
                      "description": "Значения",
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "readOnly": true
                    }
                  }
                }
              ]
            }
          },
          "links": {
            "description": "ID учеников во внешних CRM",
            "type": "object",
            "readOnly": true,
            "properties": {
              "amoCRMContactId": {
                "description": "Id контакта amoCRM",
                "type": "integer",
                "format": "int64",
                "example": 123,
                "readOnly": true
              },
              "bitrixContactId": {
                "description": "Id контакта Битрикс24",
                "type": "integer",
                "format": "int64",
                "example": 124,
                "readOnly": true
              }
            }
          }
        },
        "required": [
          "name"
        ]
      },
      "UserRestricted": {
        "title": "Ученик",
        "type": "object",
        "properties": {
          "id": {
            "description": "ID ученика в системе",
            "type": "integer",
            "format": "int64",
            "example": 123456,
            "readOnly": true
          },
          "name": {
            "description": "Полное имя ученика",
            "type": "string",
            "maxLength": 100,
            "example": "Иванов Петр Александрович",
            "readOnly": true
          },
          "email": {
            "description": "Email ученика",
            "type": "string",
            "format": "email",
            "maxLength": 100,
            "nullable": true,
            "example": "ivanov@site.com",
            "readOnly": true
          },
          "phone": {
            "description": "Номер телефона ученика",
            "type": "string",
            "maxLength": 15,
            "nullable": true,
            "pattern": "^[0-9]{1,15}$",
            "example": 79001234567,
            "readOnly": true
          },
          "balans": {
            "description": "Баланс ученика с вычетом долгов (availableBalance минус долги по счетам, может быть отрицательным)",
            "type": "number",
            "format": "double",
            "readOnly": true,
            "example": 100
          },
          "availableBalance": {
            "description": "Доступный баланс ученика (сумма приходов и расходов)",
            "type": "number",
            "format": "double",
            "readOnly": true,
            "example": 400
          },
          "filials": {
            "description": "ID филиалов ученика",
            "type": "array",
            "minLength": 1,
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "responsibles": {
            "description": "ID ответственных сотрудников ученика",
            "type": "array",
            "minLength": 1,
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "joins": {
            "description": "Записи ученика",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserJoin"
            },
            "readOnly": true
          },
          "attributes": {
            "description": "Дополнительные атрибуты ученика",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "object",
                  "title": "Атрибут типа boolean",
                  "properties": {
                    "attributeId": {
                      "description": "ID атрибута",
                      "type": "integer",
                      "format": "int64",
                      "example": 2
                    },
                    "attributeName": {
                      "description": "Название атрибута",
                      "type": "string",
                      "example": "Подписан на рассылку",
                      "readOnly": true
                    },
                    "attributeType": {
                      "description": "Тип атрибута",
                      "type": "string",
                      "enum": [
                        "boolean"
                      ],
                      "example": "boolean",
                      "readOnly": true
                    },
                    "value": {
                      "description": "Значение атрибута",
                      "type": "boolean",
                      "nullable": true,
                      "example": true
                    }
                  }
                },
                {
                  "type": "object",
                  "title": "Атрибут типа select",
                  "properties": {
                    "attributeId": {
                      "description": "ID атрибута",
                      "type": "integer",
                      "format": "int64",
                      "example": 2
                    },
                    "attributeName": {
                      "description": "Название атрибута",
                      "type": "string",
                      "example": "Уровень подготовки",
                      "readOnly": true
                    },
                    "attributeType": {
                      "description": "Тип атрибута",
                      "type": "string",
                      "enum": [
                        "select"
                      ],
                      "example": "select",
                      "readOnly": true
                    },
                    "value": {
                      "description": "Значение атрибута",
                      "type": "string",
                      "example": "Опытный",
                      "readOnly": true
                    },
                    "valueId": {
                      "description": "ID значения атрибута (если тип атрибута - select)",
                      "type": "integer",
                      "format": "int64",
                      "example": 300
                    }
                  }
                },
                {
                  "type": "object",
                  "title": "Атрибут прочих типов",
                  "properties": {
                    "attributeId": {
                      "description": "ID атрибута",
                      "type": "integer",
                      "format": "int64",
                      "example": 2
                    },
                    "attributeName": {
                      "description": "Название атрибута",
                      "type": "string",
                      "example": "Опытный",
                      "readOnly": true
                    },
                    "attributeType": {
                      "description": "Тип атрибута",
                      "type": "string",
                      "enum": [
                        "string",
                        "date",
                        "checkbox",
                        "number",
                        "phone",
                        "email"
                      ],
                      "example": "string",
                      "readOnly": true
                    },
                    "value": {
                      "description": "Значение атрибута",
                      "type": "string",
                      "nullable": true,
                      "example": "Опытный"
                    }
                  }
                }
              ]
            }
          },
          "lessonsStat": {
            "description": "Статистика по занятиям",
            "type": "object",
            "readOnly": true,
            "properties": {
              "totalRecords": {
                "description": "Всего записей на занятие",
                "type": "integer"
              },
              "visits": {
                "description": "Посещений",
                "type": "integer"
              },
              "misses": {
                "description": "Пропусков",
                "type": "integer"
              },
              "missGoodReason": {
                "description": "Пропусков по уважительной причине",
                "type": "integer"
              }
            }
          }
        }
      },
      "Users": {
        "title": "Список учеников",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/User"
                },
                {
                  "properties": {
                    "payLinkKey": {
                      "description": "Ключ оплаты (при includePayLink=true)",
                      "type": "string",
                      "example": "0047245cc1bc74076d704e20000be5aaa798e432"
                    }
                  }
                }
              ]
            }
          },
          "stats": {
            "$ref": "#/components/schemas/Paging"
          }
        }
      },
      "Paging": {
        "required": [
          "totalItems"
        ],
        "properties": {
          "totalItems": {
            "description": "Общее количество строк в результате, без учета limit и offset",
            "type": "integer",
            "example": 5
          }
        }
      },
      "ErrorHandling": {
        "properties": {
          "code": {
            "description": "Код ошибки",
            "example": "RequestValidationError",
            "type": "string"
          },
          "message": {
            "description": "Описание ошибки",
            "type": "string"
          },
          "meta": {
            "description": "Дополнительная информация об ошибке",
            "type": "object"
          }
        },
        "required": [
          "code",
          "message"
        ]
      },
      "LicenseRestricts": {
        "properties": {
          "code": {
            "description": "Код ошибки",
            "example": "licenseRestrict",
            "type": "string"
          },
          "message": {
            "description": "Описание ошибки",
            "type": "string"
          },
          "meta": {
            "description": "Дополнительная информация об ошибке",
            "type": "object"
          }
        },
        "required": [
          "code",
          "message"
        ]
      },
      "JoinStatus": {
        "description": "Статус заявки",
        "properties": {
          "id": {
            "description": "ID",
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "example": 2
          },
          "name": {
            "description": "Название статуса",
            "type": "string",
            "maxLength": 100,
            "example": "Учится"
          },
          "stateOrder": {
            "description": "Порядок сортировки",
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "example": 10
          },
          "createdAt": {
            "$ref": "#/components/schemas/Join/properties/createdAt"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "ClientStatus": {
        "description": "Статус клиента",
        "properties": {
          "id": {
            "description": "ID",
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "example": 2
          },
          "name": {
            "description": "Название статуса",
            "type": "string",
            "maxLength": 100,
            "example": "Учится"
          },
          "stateOrder": {
            "description": "Порядок сортировки",
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "example": 10
          },
          "createdAt": {
            "$ref": "#/components/schemas/Join/properties/createdAt"
          },
          "systemCode": {
            "description": "Код системного статуса",
            "example": "reject",
            "nullable": true,
            "type": "string",
            "enum": [
              "reject",
              "inactive_client",
              "new",
              "bad_lead",
              "client",
              null
            ]
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "JoinTag": {
        "description": "Тег заявки",
        "properties": {
          "id": {
            "description": "ID",
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "example": 2
          },
          "name": {
            "description": "Название",
            "type": "string",
            "maxLength": 100,
            "example": "Учится"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "PaymentType": {
        "description": "Тип платежа",
        "properties": {
          "id": {
            "description": "ID",
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "example": 2
          },
          "name": {
            "description": "Название",
            "type": "string",
            "maxLength": 100,
            "example": "Безнал"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "AdvSource": {
        "description": "Информационный источник",
        "properties": {
          "id": {
            "description": "ID",
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "example": 1
          },
          "name": {
            "description": "Название источника",
            "type": "string",
            "maxLength": 100,
            "example": "Соцсети"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "CreateSource": {
        "description": "Способ заведения заявки",
        "properties": {
          "id": {
            "description": "ID",
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "example": 1
          },
          "name": {
            "description": "Название способа",
            "type": "string",
            "maxLength": 100,
            "example": "ВКонтакте",
            "readOnly": true
          },
          "viewName": {
            "description": "Детализация способа",
            "type": "string",
            "maxLength": 100,
            "example": "Виджет: ВКонтакте",
            "readOnly": true
          }
        },
        "required": [
          "id",
          "name",
          "viewName"
        ]
      },
      "Rate": {
        "description": "Ставка сдельной оплаты сотрудника",
        "properties": {
          "id": {
            "description": "ID",
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 1
          },
          "name": {
            "description": "Название",
            "type": "string",
            "example": "Ставка ЗП"
          },
          "createdAt": {
            "$ref": "#/components/schemas/Join/properties/createdAt"
          }
        },
        "required": [
          "id",
          "name",
          "createdAt"
        ]
      },
      "Role": {
        "description": "Роль сотрудника",
        "properties": {
          "id": {
            "description": "ID",
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 1
          },
          "name": {
            "description": "Название",
            "type": "string",
            "example": "Администратор"
          },
          "permissions": {
            "description": "Права доступа",
            "type": "array",
            "example": [
              "views.joins",
              "views.leads"
            ],
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "$ref": "#/components/schemas/Join/properties/createdAt"
          }
        },
        "required": [
          "id",
          "name",
          "createdAt"
        ]
      },
      "ManagerEdit": {
        "title": "Сотрудник компании",
        "properties": {
          "salaryFilialId": {
            "description": "ID филиала для занесения ЗП. Обязательное поле, если у сотрудника больше одного филиала.",
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "name": {
            "description": "Полное имя",
            "type": "string",
            "maxLength": 100,
            "example": "Смолин Петр Михайлович"
          },
          "phone": {
            "description": "Номер телефона",
            "type": "string",
            "maxLength": 15,
            "example": 79001234567,
            "pattern": "^[0-9]{10,15}$"
          },
          "email": {
            "description": "Email. Обязательное поле, если сотруднику разрешен вход в CRM.",
            "type": "string",
            "format": "email",
            "maxLength": 100,
            "nullable": true,
            "example": "ivanov@site.com"
          },
          "replaceToManagerId": {
            "description": "ID сотрудника, на которого будут назначены все невыполненные задачи, предстоящие занятия, если они есть, и клиенты удаляемого сотрудника. Параметр используется и обязателен при смене isWork на false.",
            "type": "integer",
            "format": "int64",
            "example": 2
          },
          "filials": {
            "description": "ID филиалов сотрудника",
            "type": "array",
            "minLength": 1,
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "roles": {
            "description": "ID ролей сотрудника",
            "type": "array",
            "minLength": 1,
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "enabled": {
            "description": "Разрешен вход в CRM",
            "type": "boolean",
            "example": true
          },
          "password": {
            "description": "Пароль для входа в CRM. Если не передать пароль, он не будет обновлен.",
            "type": "string",
            "example": "qdbqkwjbd12",
            "minLength": 6,
            "writeOnly": true
          },
          "additionalContacts": {
            "description": "Дополнительные контакты",
            "type": "string",
            "nullable": true
          },
          "isStaff": {
            "description": "Штатный сотрудник",
            "type": "boolean",
            "example": true,
            "default": true
          },
          "isWork": {
            "description": "Работает",
            "type": "boolean",
            "example": true,
            "default": true
          },
          "sendNotifies": {
            "description": "Отправлять уведомления",
            "type": "boolean",
            "example": true,
            "default": true
          },
          "startDate": {
            "description": "Дата начала работы",
            "type": "string",
            "format": "date",
            "nullable": true,
            "example": "2019-06-12T00:00:00.000Z"
          },
          "endDate": {
            "description": "Дата окончания работы",
            "type": "string",
            "format": "date",
            "nullable": true,
            "example": "2019-06-12T00:00:00.000Z"
          },
          "contractNumber": {
            "description": "Номер договора",
            "type": "string",
            "nullable": true,
            "example": "№12445 от 2019г"
          },
          "contractDate": {
            "description": "Дата договора",
            "type": "string",
            "format": "date",
            "nullable": true,
            "example": "2019-06-12T00:00:00.000Z"
          },
          "birthDate": {
            "description": "Дата рождения",
            "type": "string",
            "format": "date",
            "nullable": true,
            "example": "2019-06-12T00:00:00.000Z"
          },
          "passportData": {
            "description": "Паспортные данные",
            "type": "string",
            "nullable": true,
            "example": 4512821218
          },
          "comment": {
            "description": "Комментарий к сотруднику",
            "type": "string",
            "nullable": true
          },
          "color": {
            "description": "Цвет сотрудника при отображении в интерфейсе",
            "type": "string",
            "pattern": "^#[A-Fa-f0-9]{6}$",
            "example": "#222fff"
          },
          "rateId": {
            "description": "ID ставки сдельной оплаты",
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "isOwner": {
            "description": "Является ли владельцем компании. Такой сотрудник может быть только один.",
            "type": "boolean",
            "example": true,
            "default": false
          },
          "allowFunds": {
            "description": "Может ли сотрудник использовать подотчетные средства",
            "type": "boolean",
            "example": true,
            "default": false
          }
        },
        "required": [
          "name",
          "phone",
          "enabled",
          "filials",
          "roles",
          "color"
        ]
      },
      "SubscriptionInput": {
        "title": "Абонемент",
        "anyOf": [
          {
            "title": "Безлимитный",
            "required": [
              "name",
              "price",
              "yield"
            ],
            "properties": {
              "name": {
                "description": "Название",
                "type": "string",
                "maxLength": 100,
                "example": "Общий"
              },
              "price": {
                "description": "Стоимость",
                "type": "number",
                "format": "double",
                "example": 1000,
                "minimum": 1
              },
              "filialId": {
                "description": "ID филиала. null - все филиалы",
                "nullable": true,
                "type": "integer",
                "deprecated": true,
                "example": 2
              },
              "filialIds": {
                "description": "ID филиалов. [0] - все филиалы",
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                },
                "example": [
                  2
                ]
              },
              "subscriptionGroupingId": {
                "description": "ID группировки абонементов.",
                "type": "integer",
                "format": "int64",
                "example": 2
              },
              "period": {
                "description": "Срок действия",
                "type": "string",
                "nullable": true,
                "pattern": "^[0-9]+ (day|month|year)$",
                "example": "2 day"
              },
              "yield": {
                "description": "Цена за занятие",
                "type": "number",
                "format": "double",
                "example": 100
              },
              "useDiscount": {
                "description": "Применять скидку клиента",
                "type": "boolean",
                "example": false
              },
              "courses": {
                "description": "ID курсов",
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "classes": {
                "description": "ID групп",
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "params": {
                "$ref": "#/components/schemas/SubscriptionParams"
              },
              "createdAt": {
                "$ref": "#/components/schemas/Join/properties/createdAt"
              },
              "updatedAt": {
                "$ref": "#/components/schemas/Join/properties/updatedAt"
              }
            }
          },
          {
            "title": "С фиксированным количеством посещений",
            "required": [
              "name",
              "price",
              "visitCount"
            ],
            "properties": {
              "name": {
                "description": "Название",
                "type": "string",
                "maxLength": 100,
                "example": "Общий"
              },
              "visitCount": {
                "description": "Количество занятий, 0, если абонемент безлимитный",
                "type": "integer",
                "format": "int64",
                "example": 10,
                "minimum": 1
              },
              "price": {
                "description": "Стоимость",
                "type": "number",
                "format": "double",
                "example": 1000,
                "minimum": 1
              },
              "filialId": {
                "description": "ID филиала. null - все филиалы",
                "type": "integer",
                "deprecated": true,
                "nullable": true,
                "example": [
                  2
                ]
              },
              "filialIds": {
                "description": "ID филиалов. [0] - все филиалы",
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                },
                "example": [
                  2
                ]
              },
              "period": {
                "description": "Срок действия",
                "type": "string",
                "nullable": true,
                "pattern": "^[0-9]+ (day|month|year)$",
                "example": "2 day"
              },
              "courses": {
                "description": "ID курсов",
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "classes": {
                "description": "ID групп",
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "params": {
                "$ref": "#/components/schemas/SubscriptionParams"
              },
              "createdAt": {
                "$ref": "#/components/schemas/Join/properties/createdAt"
              },
              "updatedAt": {
                "$ref": "#/components/schemas/Join/properties/updatedAt"
              }
            }
          },
          {
            "title": "С плавающим количеством посещений",
            "required": [
              "name",
              "price",
              "type",
              "params"
            ],
            "properties": {
              "name": {
                "description": "Название",
                "type": "string",
                "maxLength": 100,
                "example": "Общий"
              },
              "price": {
                "description": "Стоимость",
                "type": "number",
                "format": "double",
                "example": 1000,
                "minimum": 1
              },
              "type": {
                "description": "Тип абонемента",
                "type": "string",
                "enum": [
                  "dynamic"
                ],
                "example": "dynamic"
              },
              "visitCount": {
                "description": "Количество занятий (0 если абонемент с динамическим подсчетом занятий)",
                "type": "integer",
                "enum": [
                  0
                ],
                "example": 0,
                "default": 0
              },
              "filialId": {
                "description": "ID филиала. null - все филиалы",
                "type": "integer",
                "deprecated": true,
                "nullable": true,
                "example": [
                  2
                ]
              },
              "filialIds": {
                "description": "ID филиалов. [0] - все филиалы",
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                },
                "example": [
                  2
                ]
              },
              "period": {
                "description": "Срок действия",
                "type": "string",
                "nullable": true,
                "pattern": "^[0-9]+ (day|month|year)$",
                "example": "1 month"
              },
              "courses": {
                "description": "ID курсов",
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "classes": {
                "description": "ID групп",
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "params": {
                "required": [
                  "dynamicParams"
                ],
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SubscriptionParams"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "dynamicParams": {
                        "type": "object",
                        "required": [
                          "lessonsDays"
                        ],
                        "properties": {
                          "lessonsDays": {
                            "description": "Массив с днями занятий",
                            "type": "array",
                            "items": {
                              "type": "string",
                              "enum": [
                                "mon",
                                "tue",
                                "wed",
                                "thu",
                                "fri",
                                "sat",
                                "sun"
                              ]
                            },
                            "example": [
                              "mon",
                              "wed",
                              "fri"
                            ],
                            "minItems": 1
                          },
                          "ignoreHolidays": {
                            "description": "Игнорировать выходные при подсчете количества занятий",
                            "type": "boolean",
                            "example": true,
                            "default": false
                          }
                        }
                      }
                    }
                  }
                ]
              },
              "createdAt": {
                "$ref": "#/components/schemas/Join/properties/createdAt"
              },
              "updatedAt": {
                "$ref": "#/components/schemas/Join/properties/updatedAt"
              }
            }
          }
        ]
      },
      "SubscriptionParams": {
        "title": "Дополнительные параметры вида абонемента",
        "properties": {
          "courseIds": {
            "title": "Программы, для которых доступен абонемент",
            "nullable": true,
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "classIds": {
            "title": "Группы, для которых доступен абонемент",
            "nullable": true,
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        }
      },
      "Subscription": {
        "title": "Абонемент",
        "properties": {
          "id": {
            "description": "ID",
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 123
          },
          "name": {
            "description": "Название",
            "type": "string",
            "maxLength": 100,
            "example": "Общий"
          },
          "visitCount": {
            "description": "Количество занятий, 0, если абонемент безлимитный",
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "price": {
            "description": "Стоимость",
            "type": "number",
            "format": "double",
            "example": 1000
          },
          "filialId": {
            "description": "ID филиала. null - все филиалы",
            "type": "integer",
            "deprecated": true,
            "nullable": true,
            "example": 2
          },
          "filialIds": {
            "description": "ID филиалов. [0] - все филиалы",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "example": [
              2
            ]
          },
          "subscriptionGroupingId": {
            "description": "ID группировки абонементов.",
            "type": "integer",
            "format": "int64",
            "example": 2
          },
          "yield": {
            "description": "Цена за занятие",
            "type": "number",
            "format": "double",
            "example": 100
          },
          "useDiscount": {
            "description": "Применять скидку клиента",
            "type": "boolean",
            "example": false
          },
          "period": {
            "description": "Срок действия",
            "type": "string",
            "nullable": true,
            "pattern": "^[0-9]+ (day|month|year)$",
            "example": "2 day"
          },
          "courses": {
            "description": "ID курсов",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "classes": {
            "description": "ID групп",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "params": {
            "nullable": true,
            "$ref": "#/components/schemas/SubscriptionParams"
          },
          "createdAt": {
            "$ref": "#/components/schemas/Join/properties/createdAt"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/Join/properties/updatedAt"
          }
        }
      },
      "Subscriptions": {
        "title": "Список абонементов",
        "properties": {
          "subscriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subscription"
            }
          },
          "stats": {
            "$ref": "#/components/schemas/Paging"
          }
        }
      },
      "Manager": {
        "title": "Сотрудник компании",
        "properties": {
          "id": {
            "description": "ID",
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 123
          },
          "name": {
            "description": "Полное имя",
            "type": "string",
            "maxLength": 100,
            "example": "Смолин Петр Михайлович"
          },
          "phone": {
            "description": "Номер телефона",
            "type": "string",
            "maxLength": 15,
            "example": 79001234567,
            "pattern": "^[0-9]{10,15}$"
          },
          "email": {
            "description": "Email. Обязательное поле, если сотруднику разрешен вход в CRM.",
            "type": "string",
            "format": "email",
            "maxLength": 100,
            "nullable": true,
            "example": "ivanov@site.com"
          },
          "filials": {
            "description": "ID филиалов сотрудника",
            "type": "array",
            "minLength": 1,
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "salaryFilialId": {
            "description": "ID филиала для занесения ЗП. Обязательное поле, если у сотрудника больше одного филиала.",
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "roles": {
            "description": "ID ролей сотрудника",
            "type": "array",
            "minLength": 1,
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "enabled": {
            "description": "Разрешен вход в CRM",
            "type": "boolean",
            "example": null,
            "default": false
          },
          "password": {
            "description": "Пароль для входа в CRM. Обязательное поле, если сотруднику разрешен вход в CRM.",
            "type": "string",
            "example": "qdbqkwjbd12",
            "minLength": 6,
            "writeOnly": true
          },
          "additionalContacts": {
            "description": "Дополнительные контакты",
            "type": "string",
            "nullable": true
          },
          "isStaff": {
            "description": "Штатный сотрудник",
            "type": "boolean",
            "example": true,
            "default": true
          },
          "isWork": {
            "description": "Работает",
            "type": "boolean",
            "example": true,
            "default": true
          },
          "sendNotifies": {
            "description": "Отправлять уведомления",
            "type": "boolean",
            "example": true,
            "default": true
          },
          "startDate": {
            "description": "Дата начала работы",
            "type": "string",
            "format": "date",
            "nullable": true,
            "example": "2019-06-12T00:00:00.000Z"
          },
          "endDate": {
            "description": "Дата окончания работы",
            "type": "string",
            "format": "date",
            "nullable": true,
            "example": "2019-06-12T00:00:00.000Z"
          },
          "contractNumber": {
            "description": "Номер договора",
            "type": "string",
            "nullable": true,
            "example": "№12445 от 2019г"
          },
          "contractDate": {
            "description": "Дата договора",
            "type": "string",
            "format": "date",
            "nullable": true,
            "example": "2019-06-12T00:00:00.000Z"
          },
          "birthDate": {
            "description": "Дата рождения",
            "type": "string",
            "format": "date",
            "nullable": true,
            "example": "2019-06-12T00:00:00.000Z"
          },
          "passportData": {
            "description": "Паспортные данные",
            "type": "string",
            "nullable": true,
            "example": 4512821218
          },
          "comment": {
            "description": "Комментарий к сотруднику",
            "type": "string",
            "nullable": true
          },
          "color": {
            "description": "Цвет сотрудника. Если цвет не передан при создании, он будет выбран автоматически.",
            "type": "string",
            "pattern": "^#[A-Fa-f0-9]{6}$",
            "example": "#222fff"
          },
          "rateId": {
            "description": "ID ставки сдельной оплаты",
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "isOwner": {
            "description": "Является ли владельцем компании. Такой сотрудник может быть только один.",
            "type": "boolean",
            "example": true,
            "default": false
          },
          "allowFunds": {
            "description": "Может ли сотрудник использовать подотчетные средства",
            "type": "boolean",
            "example": true,
            "default": false
          },
          "lastActive": {
            "description": "Последняя активность сотрудника в системе",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true,
            "example": "2019-06-12T13:00:12.000Z"
          },
          "createdAt": {
            "$ref": "#/components/schemas/Join/properties/createdAt"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/Join/properties/updatedAt"
          }
        },
        "required": [
          "name",
          "phone",
          "filials",
          "roles"
        ]
      },
      "UserManager": {
        "title": "Сотрудник компании",
        "properties": {
          "id": {
            "description": "ID",
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 123
          },
          "name": {
            "description": "Полное имя",
            "type": "string",
            "maxLength": 100,
            "example": "Смолин Петр Михайлович"
          },
          "isWork": {
            "description": "Сотрудник доступен для выбора",
            "type": "boolean"
          },
          "teachFilialIds": {
            "description": "ID филиалов сотрудника, в которых он преподает",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "UserManagersIndividual": {
        "title": "Список сотрудников для записи на занятия в группы индивидуального обучения",
        "properties": {
          "individualManagers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserManagerIndividual"
            }
          }
        }
      },
      "UserManagerIndividual": {
        "title": "Сотрудник компании",
        "properties": {
          "id": {
            "description": "ID",
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 123
          },
          "name": {
            "description": "Полное имя",
            "type": "string",
            "maxLength": 100,
            "example": "Смолин Петр Михайлович"
          },
          "shortDescription": {
            "description": "Краткое описание",
            "type": "string"
          },
          "description": {
            "description": "Длинное описание преподавателя (поддерживается html)",
            "type": "string"
          },
          "freeTime": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FreeTime"
            }
          }
        }
      },
      "FreeTime": {
        "title": "Свободное время преподавателя",
        "properties": {
          "date": {
            "type": "string",
            "format": "date",
            "example": "2019-06-14"
          },
          "time": {
            "description": "Время начала",
            "type": "string",
            "pattern": "\\d\\d:\\d\\d",
            "example": "09:00"
          }
        }
      },
      "Filial": {
        "title": "Филиал компании",
        "properties": {
          "id": {
            "description": "ID",
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 1
          },
          "name": {
            "description": "Название",
            "type": "string",
            "maxLength": 200,
            "example": "Московский филиал на Коуровской"
          },
          "city": {
            "description": "Город",
            "type": "string",
            "maxLength": 250,
            "example": "Москва"
          },
          "address": {
            "description": "Адрес",
            "type": "string",
            "maxLength": 250,
            "example": "Ул. Коуровская, 5, оф 506, 5 этаж"
          },
          "shortName": {
            "description": "Короткое название",
            "type": "string",
            "maxLength": 6,
            "example": "МСК"
          },
          "createdAt": {
            "$ref": "#/components/schemas/Join/properties/createdAt"
          },
          "timezone": {
            "description": "Временная зона",
            "type": "string",
            "maxLength": 100,
            "example": "Europe/Moscow"
          },
          "status": {
            "description": "Текущее состояние филиала. **active** - активный, **archive** - в архиве",
            "type": "string",
            "enum": [
              "active",
              "archive"
            ],
            "example": "active"
          }
        },
        "required": [
          "id",
          "name",
          "createdAt",
          "city",
          "address",
          "shortName",
          "timezone"
        ]
      },
      "UserFilial": {
        "title": "Филиал компании",
        "properties": {
          "id": {
            "description": "ID",
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 1
          },
          "name": {
            "description": "Название",
            "type": "string",
            "maxLength": 200,
            "example": "Московский филиал на Коуровской"
          },
          "city": {
            "description": "Город",
            "type": "string",
            "maxLength": 250,
            "example": "Москва",
            "nullable": true
          },
          "address": {
            "description": "Адрес",
            "type": "string",
            "maxLength": 250,
            "nullable": true,
            "example": "Ул. Коуровская, 5, оф 506, 5 этаж"
          },
          "shortName": {
            "description": "Короткое название",
            "type": "string",
            "maxLength": 6,
            "example": "МСК"
          },
          "timezone": {
            "description": "Временная зона",
            "type": "string",
            "maxLength": 100,
            "example": "Europe/Moscow"
          },
          "status": {
            "description": "Текущее состояние филиала. **active** - активный, **archive** - в архиве",
            "type": "string",
            "enum": [
              "active",
              "archive"
            ],
            "example": "active"
          }
        },
        "required": [
          "id",
          "name",
          "shortName",
          "timezone"
        ]
      },
      "Room": {
        "title": "Аудитория",
        "properties": {
          "id": {
            "description": "ID",
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 1
          },
          "name": {
            "description": "Название",
            "type": "string",
            "maxLength": 200,
            "example": "Московский филиал на Коуровской"
          },
          "status": {
            "description": "Текущее состояние аудитории. **active** - активная, **archive** - аудитория в архиве",
            "type": "string",
            "enum": [
              "active",
              "archive"
            ],
            "example": "active"
          },
          "createdAt": {
            "$ref": "#/components/schemas/Join/properties/createdAt"
          },
          "filialId": {
            "description": "ID Филиала",
            "type": "integer",
            "format": "int64",
            "example": 100
          }
        },
        "required": [
          "id",
          "name",
          "status",
          "createdAt",
          "filialId"
        ]
      },
      "UserRoom": {
        "title": "Аудитория",
        "properties": {
          "id": {
            "description": "ID",
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 1
          },
          "name": {
            "description": "Название",
            "type": "string",
            "maxLength": 200,
            "example": "Московский филиал на Коуровской"
          },
          "status": {
            "description": "Текущее состояние аудитории. **active** - активная, **archive** - аудитория в архиве",
            "type": "string",
            "enum": [
              "active",
              "archive"
            ],
            "example": "active"
          },
          "filialId": {
            "description": "ID Филиала",
            "type": "integer",
            "format": "int64",
            "example": 100
          }
        },
        "required": [
          "id",
          "name",
          "filialId"
        ]
      },
      "Course": {
        "description": "Программа (курс, предмет)",
        "properties": {
          "id": {
            "description": "ID",
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 100
          },
          "name": {
            "description": "Название",
            "type": "string",
            "maxLength": 200,
            "minLength": 2,
            "example": "Акварель"
          },
          "shortDescription": {
            "description": "Короткое описание программы",
            "type": "string",
            "nullable": true,
            "example": "Освоение основных техник и приемов работы с акварелью."
          },
          "siteUrl": {
            "description": "Ссылка на страницу описания программы",
            "type": "string",
            "nullable": true,
            "example": "https://site.com/aquarel.html"
          },
          "description": {
            "description": "Длинное описание программы (поддерживается html)",
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "$ref": "#/components/schemas/Join/properties/createdAt"
          },
          "courseType": {
            "description": "Тип программы. **course** - курс, **master** - мастер-класс, **personal** - индивидуальное занятие",
            "type": "string",
            "enum": [
              "course",
              "master",
              "personal"
            ],
            "example": "course"
          }
        },
        "required": [
          "id",
          "name",
          "createdAt",
          "courseType"
        ]
      },
      "UserCourse": {
        "description": "Программа (курс, предмет)",
        "properties": {
          "id": {
            "description": "ID",
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 100
          },
          "name": {
            "description": "Название",
            "type": "string",
            "maxLength": 200,
            "minLength": 2,
            "example": "Акварель"
          },
          "shortDescription": {
            "description": "Короткое описание программы",
            "type": "string",
            "nullable": true,
            "example": "Освоение основных техник и приемов работы с акварелью."
          },
          "siteUrl": {
            "description": "Ссылка на страницу описания программы",
            "type": "string",
            "nullable": true,
            "example": "https://site.com/aquarel.html"
          },
          "description": {
            "description": "Длинное описание программы (поддерживается html)",
            "type": "string",
            "nullable": true
          },
          "courseType": {
            "description": "Тип программы. **course** - курс, **master** - мастер-класс, **personal** - индивидуальное занятие",
            "type": "string",
            "enum": [
              "course",
              "master",
              "personal"
            ],
            "example": "course"
          }
        },
        "required": [
          "id",
          "name",
          "courseType"
        ]
      },
      "ClassAttribute": {
        "description": "Признак группы",
        "oneOf": [
          {
            "properties": {
              "id": {
                "$ref": "#/components/schemas/Task/properties/id"
              },
              "name": {
                "$ref": "#/components/schemas/ClassAttribute/oneOf/1/properties/name"
              },
              "type": {
                "description": "Вид признака. **string** – текст, **number** – число, **boolean** – чекбокс, **select** – выбор.",
                "enum": [
                  "string",
                  "number",
                  "boolean"
                ],
                "example": "string",
                "type": "string"
              },
              "alias": {
                "description": "Алиас",
                "type": "string"
              },
              "inClass": {
                "$ref": "#/components/schemas/ClassAttribute/oneOf/1/properties/inClass"
              },
              "addition": {
                "$ref": "#/components/schemas/ClassAttribute/oneOf/1/properties/addition"
              },
              "required": {
                "description": "Обязательно для заполнения",
                "type": "boolean",
                "default": false
              },
              "order": {
                "description": "Порядок сортировки",
                "type": "integer",
                "format": "int64",
                "default": 0
              },
              "createdAt": {
                "$ref": "#/components/schemas/Join/properties/createdAt"
              },
              "updatedAt": {
                "$ref": "#/components/schemas/Join/properties/updatedAt"
              }
            },
            "required": [
              "name",
              "type",
              "alias",
              "inClass",
              "addition",
              "required",
              "order"
            ]
          },
          {
            "properties": {
              "id": {
                "$ref": "#/components/schemas/Task/properties/id"
              },
              "name": {
                "description": "Название",
                "type": "string"
              },
              "type": {
                "description": "Вид признака. **string** – текст, **number** – число, **boolean** – чекбокс, **select** – выбор.",
                "enum": [
                  "select"
                ],
                "example": "select",
                "type": "string"
              },
              "alias": {
                "$ref": "#/components/schemas/ClassAttribute/oneOf/0/properties/alias"
              },
              "inClass": {
                "description": "Активировать признак",
                "type": "boolean",
                "default": false
              },
              "addition": {
                "description": "Отображать в \"строке\" группы в списке групп",
                "type": "boolean",
                "default": false
              },
              "required": {
                "$ref": "#/components/schemas/ClassAttribute/oneOf/0/properties/required"
              },
              "order": {
                "$ref": "#/components/schemas/ClassAttribute/oneOf/0/properties/order"
              },
              "selectFields": {
                "description": "Варианты выбора. Только для атрибутов с типом select.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "$ref": "#/components/schemas/Task/properties/id"
                    },
                    "name": {
                      "$ref": "#/components/schemas/ClassAttribute/oneOf/1/properties/name"
                    }
                  }
                },
                "example": [
                  {
                    "id": 1,
                    "name": "Значение 1"
                  },
                  {
                    "id": 2,
                    "name": "Значение 2"
                  }
                ]
              },
              "createdAt": {
                "$ref": "#/components/schemas/Join/properties/createdAt"
              },
              "updatedAt": {
                "$ref": "#/components/schemas/Join/properties/updatedAt"
              }
            },
            "required": [
              "name",
              "type",
              "alias",
              "inClass",
              "addition",
              "required",
              "order",
              "selectFields"
            ]
          }
        ]
      },
      "ClassAttributeValue": {
        "description": "Признак группы",
        "properties": {
          "attributeName": {
            "description": "Название признака",
            "type": "string",
            "example": "Текстовый признак"
          },
          "attributeAlias": {
            "description": "Алиас признака",
            "type": "string",
            "example": "tekstovii_priznak"
          },
          "attributeType": {
            "description": "Вид признака",
            "type": "string",
            "enum": [
              "select",
              "string",
              "number",
              "boolean"
            ],
            "example": "string"
          },
          "attributeId": {
            "description": "ID признака",
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "value": {
            "description": "Установленное значение",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              },
              {
                "type": "boolean"
              }
            ]
          }
        },
        "required": [
          "attributeName",
          "attributeAlias",
          "attributeType",
          "attributeId",
          "value"
        ]
      },
      "Class": {
        "description": "Группа",
        "properties": {
          "id": {
            "description": "ID",
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "name": {
            "description": "Название",
            "type": "string",
            "maxLength": 200,
            "nullable": true,
            "example": "Группа по выходным"
          },
          "beginDate": {
            "description": "Старт занятий",
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2019-06-10T15:00:00.000Z"
          },
          "maxStudents": {
            "description": "Максимальное количество студентов в группе",
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "example": 15
          },
          "status": {
            "description": "Текущее состояние группы. **opened** - набор открыт, **closed** - набор закрыт, **archive** - группа в архиве",
            "type": "string",
            "enum": [
              "opened",
              "closed",
              "archive"
            ],
            "example": "opened"
          },
          "createdAt": {
            "$ref": "#/components/schemas/Join/properties/createdAt"
          },
          "courseId": {
            "description": "ID программы",
            "type": "integer",
            "format": "int64",
            "example": 100
          },
          "payType": {
            "description": "Способ оплаты за обучение. **full** - разово, **lessons** - за занятия",
            "type": "string",
            "enum": [
              "full",
              "lessons"
            ],
            "example": "full"
          },
          "filialId": {
            "description": "ID филиала",
            "type": "integer",
            "format": "int64",
            "example": 300
          },
          "payPass": {
            "description": "Списывать посещения из абонемента за пропуски без уваж. причины. Возвращается значение `payPassReason || payPassNoReason`. Необходимо использовать объект `payPassRules`",
            "deprecated": true,
            "type": "boolean",
            "example": true
          },
          "payPassRules": {
            "description": "Правила списания из абонемента за пропуски",
            "type": "object",
            "properties": {
              "payPassReason": {
                "type": "boolean",
                "description": "Списывать за пропуски по уважительной причине",
                "default": false
              },
              "payPassReasonRate": {
                "type": "number",
                "minimum": 1,
                "maximum": 100,
                "description": "Процент от обычного списания при списании за пропуск по уважительной причине."
              },
              "payPassNoReason": {
                "type": "boolean",
                "description": "Списывать за пропуски без уважительной причины",
                "default": false
              },
              "payPassNoReasonRate": {
                "type": "number",
                "minimum": 1,
                "maximum": 100,
                "description": "Процент от обычного списания при списании за пропуск без уважительной причины."
              }
            }
          },
          "price": {
            "description": "Цена",
            "type": "number",
            "format": "double",
            "nullable": true,
            "example": 1000
          },
          "priceComment": {
            "description": "Комментарий к цене",
            "type": "string",
            "maxLength": 255,
            "nullable": true,
            "example": "Абонемент 5 занятий - 2500 р., 10 занятий - 4000 р."
          },
          "showDates": {
            "description": "Отобажение даты начала у названия группы",
            "type": "boolean",
            "default": true,
            "example": false
          },
          "priceForWidget": {
            "description": "Цена для виджетов.",
            "type": "string",
            "maxLength": 255,
            "nullable": true,
            "example": "2500-4000 р/аб."
          },
          "color": {
            "description": "Цвет группы",
            "type": "string",
            "nullable": true,
            "maxLength": 10,
            "example": "#ff33f5"
          },
          "managerIds": {
            "description": "Список ID ведущих группы",
            "type": "array",
            "items": {
              "type": "integer"
            },
            "example": [
              1,
              2
            ]
          },
          "comment": {
            "description": "Комментарий к группе",
            "type": "string",
            "example": "Занятия по ПН-ПТ"
          }
        },
        "required": [
          "id",
          "createdAt",
          "showDates",
          "filialId",
          "courseId",
          "payType",
          "status"
        ]
      },
      "UserClass": {
        "description": "Группа",
        "properties": {
          "id": {
            "description": "ID",
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "name": {
            "description": "Название",
            "type": "string",
            "maxLength": 200,
            "nullable": true,
            "example": "Группа по выходным"
          },
          "beginDate": {
            "description": "Старт занятий",
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2019-06-10T15:00:00.000Z"
          },
          "status": {
            "description": "Текущее состояние группы. **opened** - набор открыт, **closed** - набор закрыт, **archive** - группа в архиве",
            "type": "string",
            "enum": [
              "opened",
              "closed",
              "archive"
            ],
            "example": "opened"
          },
          "courseId": {
            "description": "ID программы",
            "type": "integer",
            "format": "int64",
            "example": 100
          },
          "payType": {
            "description": "Способ оплаты за обучение. **full** - разово, **lessons** - за занятия",
            "type": "string",
            "enum": [
              "full",
              "lessons"
            ],
            "example": "full"
          },
          "filialId": {
            "$ref": "#/components/schemas/Class/properties/filialId"
          },
          "payPass": {
            "description": "Списывать посещения из абонемента за пропуски без уваж. причины",
            "type": "boolean",
            "example": true
          },
          "price": {
            "description": "Цена",
            "type": "number",
            "format": "double",
            "nullable": true,
            "example": 1000
          },
          "showDates": {
            "description": "Отобажение даты начала у названия группы",
            "type": "boolean",
            "default": true,
            "example": false
          },
          "allowRecords": {
            "description": "Разрешать запись на занятия при записи в группу",
            "type": "boolean"
          },
          "allowCancelRecords": {
            "description": "Разрешать отмену записей на занятия",
            "type": "boolean"
          },
          "color": {
            "description": "Цвет группы",
            "type": "string",
            "nullable": true,
            "maxLength": 10,
            "example": "#ff33f5"
          },
          "freeRecords": {
            "description": "Количество свободных мест",
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "example": 10
          }
        },
        "required": [
          "id",
          "showDates",
          "payPass",
          "filialId",
          "courseId",
          "payType",
          "status"
        ]
      },
      "Lesson": {
        "description": "Занятие",
        "properties": {
          "id": {
            "description": "ID",
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 1
          },
          "date": {
            "description": "Дата проведения",
            "type": "string",
            "format": "date",
            "example": "2019-06-14"
          },
          "beginTime": {
            "description": "Время начала",
            "type": "string",
            "pattern": "\\d\\d:\\d\\d",
            "example": "09:00"
          },
          "endTime": {
            "description": "Время окончания",
            "type": "string",
            "pattern": "\\d\\d:\\d\\d",
            "example": "09:40"
          },
          "createdAt": {
            "$ref": "#/components/schemas/Join/properties/createdAt"
          },
          "filialId": {
            "$ref": "#/components/schemas/Class/properties/filialId"
          },
          "roomId": {
            "description": "ID аудитории",
            "type": "integer",
            "format": "int64",
            "example": 100
          },
          "classId": {
            "$ref": "#/components/schemas/Join/properties/classId"
          },
          "status": {
            "description": "Статус занятия. 1 - Проведено, 0 - Не проведено",
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "comment": {
            "$ref": "#/components/schemas/Join/properties/comment"
          },
          "maxStudents": {
            "description": "Максимальное количество учеников на занятии",
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "example": 10
          },
          "topic": {
            "description": "Тема занятия",
            "type": "string",
            "nullable": true,
            "example": "Планеты солнечной системы."
          },
          "description": {
            "description": "Описание занятия",
            "type": "string",
            "nullable": true,
            "example": "На этом занятии узнаем, сколько планет в солнечной системе и как появилась луна."
          },
          "teacherIds": {
            "description": "Преподаватели",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "records": {
            "description": "Записи на занятие",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LessonRecordExtended"
            }
          },
          "homeTask": {
            "$ref": "#/components/schemas/HomeTask"
          },
          "lessonTask": {
            "$ref": "#/components/schemas/LessonTask"
          },
          "marks": {
            "description": "Оценки за занятие",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mark"
            }
          },
          "answers": {
            "description": "Ответы на задание",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShortTaskAnswer"
            }
          }
        },
        "required": [
          "id",
          "classId",
          "roomId",
          "status",
          "date",
          "beginTime",
          "endTime",
          "filialId"
        ]
      },
      "LessonSettings": {
        "description": "Настройки занятия",
        "properties": {
          "autoStatus": {
            "description": "Статус занятия «Проведено» ставится автоматически\n\n  * `off` – Отключено\n\n  * `afterBegin` – После начала занятия\n\n  * `afterEnd` – После окончания занятия\n",
            "enum": [
              "off",
              "afterBegin",
              "afterEnd"
            ],
            "type": "string",
            "default": "off"
          },
          "autoStatusTimer": {
            "description": "Статус автоматически ставится за n минут до начала\\окончания занятия",
            "type": "integer",
            "minimum": 0,
            "maximum": 1440,
            "default": 0
          },
          "lessonVisibility": {
            "description": "Видимость занятия в ЛК и виджетах\n\n  * `off` – Не видно\n\n  * `always` – Видно всегда\n\n  * `beforeBegin` – Станет видимым за n минут до начала (регулируется параметром lessonVisibilityTimer)\n\n  * `exactTime` – Станет видимым за n дней до занятия (регулируется параметром lessonVisibilityTimer) в указанное время (регулируется параметром lessonVisibilityTime)\n",
            "type": "string",
            "enum": [
              "off",
              "always",
              "beforeBegin",
              "exactTime"
            ],
            "default": "always"
          },
          "lessonVisibilityTimer": {
            "description": "Видимость занятия за n минут/дней до начала",
            "type": "integer",
            "minimum": 0,
            "default": 0
          },
          "lessonVisibilityTime": {
            "description": "Время, в которое занятие станет видимым при lessonVisibility=exactTime",
            "type": "string",
            "pattern": "\\d\\d:\\d\\d",
            "example": 1005,
            "nullable": true
          },
          "materialsVisibilityTimer": {
            "description": "Доступ к материалам задания откроется за n минут до начала",
            "type": "integer",
            "minimum": 0,
            "nullable": true
          },
          "webinarAccess": {
            "description": "Доступ к вебинару\n\n  * `always` – Открыт\n\n  * `subExists` – При наличи абонемента\n\n  * `invoiceFullPay` – Если счет оплачен полностью\n\n  * `invoiceHalfPay` – Если счет оплачен частично\n",
            "type": "string",
            "enum": [
              "always",
              "subExists",
              "invoiceFullPay",
              "invoiceHalfPay"
            ],
            "default": "subExists"
          },
          "videoAccess": {
            "description": "Доступ к видео\n\n  * `always` – Открыт\n\n  * `subExists` – При наличи абонемента\n\n  * `invoiceFullPay` – Если счет оплачен полностью\n\n  * `invoiceHalfPay` – Если счет оплачен частично\n",
            "type": "string",
            "enum": [
              "always",
              "subExists",
              "invoiceFullPay",
              "invoiceHalfPay"
            ],
            "default": "subExists"
          },
          "lessonTaskAccess": {
            "description": "Доступ к заданию на урок\n\n  * `always` – Открыт\n\n  * `subExists` – При наличи абонемента\n\n  * `invoiceFullPay` – Если счет оплачен полностью\n\n  * `invoiceHalfPay` – Если счет оплачен частично\n",
            "type": "string",
            "enum": [
              "always",
              "subExists",
              "invoiceFullPay",
              "invoiceHalfPay"
            ],
            "default": "subExists"
          },
          "homeTaskAccess": {
            "description": "Доступ к домашнему заданию\n\n  * `always` – Открыт\n\n  * `subExists` – При наличи абонемента\n\n  * `invoiceFullPay` – Если счет оплачен полностью\n\n  * `invoiceHalfPay` – Если счет оплачен частично\n",
            "type": "string",
            "enum": [
              "always",
              "subExists",
              "invoiceFullPay",
              "invoiceHalfPay"
            ],
            "default": "subExists"
          }
        }
      },
      "Lessons": {
        "title": "Список занятий",
        "properties": {
          "lessons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Lesson"
            }
          },
          "stats": {
            "$ref": "#/components/schemas/Paging"
          }
        }
      },
      "UserIndividualLesson": {
        "description": "Свободное время для записи на индивидуальное занятие",
        "properties": {
          "date": {
            "description": "Дата проведения",
            "type": "string",
            "format": "date",
            "example": "2019-06-14"
          },
          "beginTime": {
            "description": "Время начала",
            "type": "string",
            "pattern": "\\d\\d:\\d\\d",
            "example": "09:00"
          },
          "endTime": {
            "description": "Время окончания",
            "type": "string",
            "pattern": "\\d\\d:\\d\\d",
            "example": "09:40"
          },
          "filialId": {
            "$ref": "#/components/schemas/Class/properties/filialId"
          },
          "classId": {
            "$ref": "#/components/schemas/Join/properties/classId"
          },
          "teacherIds": {
            "description": "Массив ID преподавателей для записи",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "LessonRecords": {
        "title": "Список записей",
        "properties": {
          "lessonRecords": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LessonRecordExtended"
            }
          },
          "stats": {
            "$ref": "#/components/schemas/Paging"
          }
        }
      },
      "UserLesson": {
        "description": "Занятие",
        "properties": {
          "id": {
            "description": "ID",
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 1
          },
          "date": {
            "description": "Дата проведения",
            "type": "string",
            "format": "date",
            "example": "2019-06-14"
          },
          "beginTime": {
            "description": "Время начала",
            "type": "string",
            "pattern": "\\d\\d:\\d\\d",
            "example": "09:00"
          },
          "endTime": {
            "description": "Время окончания",
            "type": "string",
            "pattern": "\\d\\d:\\d\\d",
            "example": "09:40"
          },
          "filialId": {
            "$ref": "#/components/schemas/Class/properties/filialId"
          },
          "roomId": {
            "description": "ID аудитории",
            "type": "integer",
            "format": "int64",
            "example": 100
          },
          "classId": {
            "$ref": "#/components/schemas/Join/properties/classId"
          },
          "status": {
            "description": "Статус занятия. 1 - Проведено, 0 - Не проведено",
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "freeRecords": {
            "description": "Количество свободных мест",
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "example": 10
          },
          "topic": {
            "description": "Тема занятия",
            "type": "string",
            "nullable": true,
            "example": "Планеты солнечной системы."
          },
          "description": {
            "description": "Описание занятия",
            "type": "string",
            "nullable": true,
            "example": "На этом занятии узнаем, сколько планет в солнечной системе и как появилась луна."
          },
          "teacherIds": {
            "description": "Преподаватели",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "records": {
            "description": "Записи на занятие",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserLessonRecord"
            }
          },
          "homeTask": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/HomeTask"
              },
              {
                "$ref": "#/components/schemas/RestrictError"
              }
            ]
          },
          "lessonTask": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/LessonTask"
              },
              {
                "$ref": "#/components/schemas/RestrictError"
              }
            ]
          },
          "comments": {
            "description": "Комментарии к занятию",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserComment"
            }
          },
          "marks": {
            "description": "Оценки за занятие",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mark"
            }
          },
          "answers": {
            "description": "Ответы на задание",
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShortTaskAnswer"
            }
          },
          "params": {
            "description": "Доп информация о занятии",
            "type": "object",
            "properties": {
              "videos": {
                "description": "Видео к занятию",
                "oneOf": [
                  {
                    "title": "Ссылка на видео",
                    "type": "object",
                    "properties": {
                      "value": {
                        "type": "string",
                        "title": "Ссылка"
                      }
                    }
                  },
                  {
                    "$ref": "#/components/schemas/RestrictError"
                  }
                ]
              },
              "webinars": {
                "description": "Вебинар",
                "oneOf": [
                  {
                    "title": "Ссылка на вебинар",
                    "type": "object",
                    "properties": {
                      "value": {
                        "type": "string",
                        "title": "Ссылка"
                      }
                    }
                  },
                  {
                    "$ref": "#/components/schemas/RestrictError"
                  }
                ]
              }
            }
          }
        },
        "required": [
          "id",
          "classId",
          "roomId",
          "status",
          "date",
          "beginTime",
          "endTime",
          "filialId"
        ]
      },
      "LessonPaging": {
        "required": [
          "totalItems"
        ],
        "properties": {
          "totalItems": {
            "description": "Общее количество строк в результате, без учета limit и offset",
            "type": "integer",
            "example": 5
          },
          "records": {
            "description": "Количество записей ученика scopeUserId в общем результате",
            "type": "integer"
          },
          "visits": {
            "description": "Количество посещений ученика scopeUserId в общем результате",
            "type": "integer"
          },
          "freeVisits": {
            "description": "Количество бесплатных посещений ученика scopeUserId в общем результате",
            "type": "integer"
          },
          "lessonsLost": {
            "description": "Количество пропусков ученика scopeUserId в общем результате",
            "type": "integer"
          },
          "goodReasons": {
            "description": "Количество пропусков с уважительной причиной ученика scopeUserId в общем результате",
            "type": "integer"
          },
          "nonPayedLessons": {
            "description": "Количество посещений в долг ученика scopeUserId в общем результате",
            "type": "integer"
          },
          "marksAvg": {
            "description": "Средняя оценка ученика scopeUserId в общем результате",
            "type": "number"
          },
          "homeMarksAvg": {
            "description": "Средняя оценка за д/з ученика scopeUserId в общем результате",
            "type": "number"
          },
          "lessonMarksAvg": {
            "description": "Средняя оценка за занятие ученика scopeUserId в общем результате",
            "type": "number"
          }
        }
      },
      "UserLessons": {
        "title": "Список занятий",
        "properties": {
          "lessons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserLesson"
            }
          },
          "stats": {
            "$ref": "#/components/schemas/LessonPaging"
          }
        }
      },
      "UserIndividualLessons": {
        "title": "Список свободных слотов для записи на индивидуальные занятия",
        "properties": {
          "individualLessons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserIndividualLesson"
            }
          }
        }
      },
      "LessonRecordsPaging": {
        "required": [
          "totalItems"
        ],
        "properties": {
          "totalItems": {
            "description": "Общее количество строк в результате, без учета limit и offset",
            "type": "integer",
            "example": 5
          }
        }
      },
      "UserLessonRecords": {
        "title": "Список записей на занятия",
        "properties": {
          "lessonRecords": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserLessonRecord"
            }
          },
          "stats": {
            "$ref": "#/components/schemas/LessonRecordsPaging"
          }
        }
      },
      "PaymentsPaging": {
        "required": [
          "totalItems"
        ],
        "properties": {
          "totalItems": {
            "description": "Общее количество строк в результате, без учета limit и offset",
            "type": "integer",
            "example": 5
          },
          "totalSum": {
            "description": "Общая сумма без учета limit",
            "type": "number"
          },
          "totalIncome": {
            "description": "Общий приход без учета limit",
            "type": "number"
          },
          "totalRefund": {
            "description": "Общий возврат без учета limit",
            "type": "number"
          },
          "totalDebit": {
            "description": "Общая сумма списаний без учета limit",
            "type": "number"
          }
        }
      },
      "UserPaymentExtendedEdit": {
        "description": "Платеж",
        "properties": {
          "date": {
            "description": "Дата платежа",
            "type": "string",
            "format": "date",
            "example": "2019-06-14"
          },
          "summa": {
            "description": "Сумма",
            "type": "number",
            "format": "double",
            "example": 1990
          },
          "paymentTypeId": {
            "type": "number",
            "description": "Id типа оплаты"
          },
          "filialId": {
            "$ref": "#/components/schemas/Class/properties/filialId"
          },
          "cashboxId": {
            "description": "ID кассы",
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 777
          },
          "comment": {
            "$ref": "#/components/schemas/Join/properties/comment"
          }
        },
        "required": [
          "date",
          "summa",
          "paymentTypeId"
        ]
      },
      "UserPaymentExtended": {
        "description": "Платеж",
        "properties": {
          "id": {
            "description": "ID",
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 1
          },
          "userId": {
            "$ref": "#/components/schemas/Join/properties/userId"
          },
          "date": {
            "description": "Дата платежа",
            "type": "string",
            "format": "date",
            "example": "2019-06-14"
          },
          "summa": {
            "description": "Сумма",
            "type": "number",
            "format": "double",
            "example": 1990
          },
          "userSubscriptionId": {
            "description": "ID абонемента",
            "type": "integer",
            "format": "int64",
            "example": 1504,
            "nullable": true
          },
          "optype": {
            "description": "Тип операции. income - приход, debit - списание, refund - возврат",
            "type": "string",
            "enum": [
              "income",
              "debit",
              "refund"
            ]
          },
          "filialId": {
            "$ref": "#/components/schemas/Class/properties/filialId"
          },
          "comment": {
            "$ref": "#/components/schemas/Join/properties/comment"
          }
        },
        "discriminator": {
          "propertyName": "optype",
          "mapping": {
            "income": "#/components/schemas/IncomePayment",
            "debit": "#/components/schemas/DebitPayment",
            "refund": "#/components/schemas/RefundPayment"
          }
        },
        "required": [
          "date",
          "summa",
          "optype",
          "userId"
        ]
      },
      "IncomePayment": {
        "description": "Приход",
        "allOf": [
          {
            "$ref": "#/components/schemas/UserPaymentExtended"
          },
          {
            "type": "object",
            "properties": {
              "managerId": {
                "description": "ID сотрудника, который принял платеж",
                "type": "integer",
                "format": "int64",
                "nullable": true
              },
              "paymentTypeId": {
                "type": "number",
                "description": "Id типа оплаты"
              },
              "cashboxId": {
                "$ref": "#/components/schemas/UserPaymentExtendedEdit/properties/cashboxId"
              }
            },
            "required": [
              "paymentTypeId"
            ]
          }
        ]
      },
      "DebitPayment": {
        "description": "Списание",
        "allOf": [
          {
            "$ref": "#/components/schemas/UserPaymentExtended"
          },
          {
            "type": "object",
            "properties": {
              "invoiceId": {
                "type": "number",
                "description": "Id счета для списания"
              },
              "invoice": {
                "$ref": "#/components/schemas/UserInvoice",
                "readOnly": true
              }
            }
          }
        ],
        "required": [
          "invoiceId"
        ]
      },
      "RefundPayment": {
        "description": "Возврат",
        "allOf": [
          {
            "$ref": "#/components/schemas/UserPaymentExtended"
          },
          {
            "type": "object",
            "properties": {
              "paymentTypeId": {
                "type": "number",
                "description": "Id типа оплаты"
              },
              "managerId": {
                "description": "ID сотрудника, который сделал возврат",
                "type": "integer",
                "format": "int64",
                "nullable": true
              },
              "cashboxId": {
                "$ref": "#/components/schemas/UserPaymentExtendedEdit/properties/cashboxId"
              }
            },
            "required": [
              "paymentTypeId"
            ]
          }
        ]
      },
      "UserPayment": {
        "description": "Платеж",
        "properties": {
          "id": {
            "description": "ID",
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 1
          },
          "userId": {
            "$ref": "#/components/schemas/Join/properties/userId"
          },
          "date": {
            "description": "Дата платежа",
            "type": "string",
            "format": "date",
            "example": "2019-06-14"
          },
          "summa": {
            "description": "Сумма",
            "type": "number",
            "format": "double",
            "example": 1990
          },
          "userSubscriptionId": {
            "description": "ID абонемента",
            "readOnly": true,
            "deprecated": true,
            "type": "integer",
            "format": "int64",
            "example": 1504,
            "nullable": true
          },
          "optype": {
            "description": "Тип операции. income - приход, debit - списание, refund - возврат",
            "type": "string",
            "enum": [
              "income",
              "debit",
              "refund"
            ]
          },
          "invoice": {
            "$ref": "#/components/schemas/UserInvoice",
            "readOnly": true
          }
        },
        "required": [
          "id",
          "date",
          "summa",
          "optype",
          "userId"
        ]
      },
      "UserPayments": {
        "title": "Список платежей",
        "properties": {
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserPayment"
            }
          },
          "stats": {
            "$ref": "#/components/schemas/PaymentsPaging"
          }
        }
      },
      "UserPaymentsExtended": {
        "title": "Список платежей",
        "properties": {
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserPaymentExtended"
            }
          },
          "stats": {
            "$ref": "#/components/schemas/PaymentsPaging"
          }
        }
      },
      "UserInvoice": {
        "title": "Счет, выставляемый клиенту",
        "readOnly": true,
        "properties": {
          "id": {
            "description": "ID счета",
            "type": "integer",
            "format": "int64"
          },
          "userId": {
            "description": "ID ученика",
            "type": "integer",
            "format": "int64"
          },
          "date": {
            "description": "Дата счета",
            "type": "string",
            "format": "date"
          },
          "createdAt": {
            "description": "Дата создания счета",
            "type": "string",
            "format": "date"
          },
          "price": {
            "description": "Сумма счета",
            "type": "number",
            "format": "float"
          },
          "nextSum": {
            "description": "Сумма следующего платежа",
            "type": "number",
            "format": "float"
          },
          "payUntil": {
            "description": "Срок оплаты счета",
            "type": "string",
            "format": "date"
          },
          "joinId": {
            "description": "ID заявки",
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "userSubscriptionId": {
            "description": "ID абонемента",
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "payed": {
            "description": "Оплачено по счету",
            "type": "number",
            "format": "float",
            "default": 0
          },
          "comment": {
            "description": "Комментарий",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "id",
          "userId",
          "date",
          "createdAt",
          "price",
          "payUntil",
          "payed"
        ]
      },
      "UserInvoiceEdit": {
        "title": "Счет, выставляемый клиенту",
        "properties": {
          "payUntil": {
            "description": "Срок оплаты счета",
            "type": "string",
            "format": "date"
          },
          "comment": {
            "description": "Комментарий",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "payUntil"
        ]
      },
      "UserInvoices": {
        "title": "Счета",
        "properties": {
          "invoices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserInvoice"
            }
          },
          "stats": {
            "$ref": "#/components/schemas/InvoicePaging"
          }
        }
      },
      "InvoicePaging": {
        "required": [
          "totalItems",
          "totalPrice",
          "totalPayed"
        ],
        "properties": {
          "totalItems": {
            "description": "Общее количество строк в результате, без учета limit и offset",
            "type": "integer",
            "example": 5
          },
          "totalPrice": {
            "description": "Сумма выставленных счетов",
            "type": "number",
            "format": "float"
          },
          "totalPayed": {
            "description": "Оплаченная сумма",
            "type": "number",
            "format": "float"
          }
        }
      },
      "BillsPaging": {
        "required": [
          "totalItems"
        ],
        "properties": {
          "totalItems": {
            "description": "Общее количество строк в результате, без учета limit и offset",
            "type": "integer",
            "example": 5
          },
          "totalDebt": {
            "description": "Общее количество занятий в долг",
            "type": "number"
          },
          "totalBilled": {
            "description": "Общая сумма списаний",
            "type": "number"
          }
        }
      },
      "UserBill": {
        "readOnly": true,
        "description": "Списание",
        "properties": {
          "id": {
            "description": "ID",
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 1
          },
          "date": {
            "description": "Дата списания",
            "type": "string",
            "format": "date",
            "example": "2019-06-14"
          },
          "summa": {
            "description": "Сумма",
            "type": "number",
            "format": "double",
            "nullable": true,
            "example": 1990
          },
          "userId": {
            "$ref": "#/components/schemas/Join/properties/userId"
          },
          "lessonsCount": {
            "description": "Количество списанных из абонемента занятий",
            "type": "integer",
            "format": "int64",
            "example": 1,
            "nullable": true
          },
          "lessonRecordId": {
            "description": "ID записи на занятие, за которое произошло списание",
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "lessonRecord": {
            "$ref": "#/components/schemas/UserLessonRecordLimited"
          },
          "lessonId": {
            "description": "ID занятия, за которое произошло списание",
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "classId": {
            "description": "ID группы, за которое произошло списание",
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "userSubscriptionId": {
            "description": "ID абонемента",
            "type": "integer",
            "format": "int64",
            "example": 1504,
            "nullable": true
          }
        },
        "required": [
          "id",
          "date"
        ]
      },
      "UserBills": {
        "title": "Списания",
        "properties": {
          "bills": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserBill"
            }
          },
          "stats": {
            "$ref": "#/components/schemas/BillsPaging"
          }
        }
      },
      "UserUserSubscription": {
        "description": "Абонемент",
        "properties": {
          "id": {
            "description": "ID",
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 1
          },
          "externalId": {
            "description": "Пользовательский номер абонемента",
            "type": "string",
            "example": "ЛТ-2305",
            "nullable": true
          },
          "sellDate": {
            "description": "Дата продажи",
            "type": "string",
            "format": "date",
            "example": "2019-06-14"
          },
          "beginDate": {
            "description": "Дата начала действия",
            "type": "string",
            "format": "date",
            "example": "2019-06-14",
            "nullable": true
          },
          "endDate": {
            "description": "Дата окончания действия",
            "type": "string",
            "format": "date",
            "example": "2019-06-14",
            "nullable": true
          },
          "price": {
            "description": "Стоимость",
            "type": "number",
            "format": "double",
            "example": 1990
          },
          "payed": {
            "description": "Оплаченная сумма",
            "type": "number",
            "format": "double",
            "example": 990
          },
          "userId": {
            "description": "ID ученика",
            "type": "integer",
            "format": "int64"
          },
          "statTotalPayed": {
            "description": "Оплаченная сумма",
            "type": "number",
            "format": "double"
          },
          "statTotalBilled": {
            "description": "Списанная сумма",
            "type": "number",
            "format": "double"
          },
          "statTotalBurned": {
            "description": "Сгорело занятий",
            "type": "integer",
            "format": "int64"
          },
          "statTotalVisits": {
            "description": "Проведено занятий по абонементу",
            "type": "integer",
            "format": "int64"
          },
          "remindDate": {
            "description": "Срок оплаты долга",
            "type": "string",
            "format": "date",
            "example": "2019-06-14",
            "nullable": true,
            "deprecated": true
          },
          "remindSumm": {
            "description": "Сумма долга к оплате",
            "type": "number",
            "format": "double",
            "example": 500,
            "nullable": true,
            "deprecated": true
          },
          "classIds": {
            "description": "Группы, в которых действует абонемент",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "nullable": true
          },
          "courseIds": {
            "description": "Программы, в которых действует абонемент",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "nullable": true
          },
          "freezeFrom": {
            "description": "Дата начала заморозки",
            "type": "string",
            "format": "date",
            "example": "2019-06-14",
            "nullable": true
          },
          "freezeTo": {
            "description": "Дата окончания заморозки",
            "type": "string",
            "format": "date",
            "example": "2019-06-14",
            "nullable": true
          },
          "visitCount": {
            "description": "Количество занятий в абонементе",
            "type": "integer",
            "format": "int64",
            "example": 1,
            "nullable": true,
            "maximum": 200
          },
          "visitedCount": {
            "description": "Количество списанных занятий в абонементе.",
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "subscriptionId": {
            "description": "ID вида абонемента",
            "type": "integer",
            "format": "int64",
            "example": 12
          },
          "mainClassId": {
            "description": "Основная группа, к которой привязан абонемент",
            "type": "integer",
            "format": "int64"
          },
          "statusId": {
            "description": "Статус абонемента:\n* `1` - Не активный\n* `2` - Активный\n* `3` - Заморожен\n* `4` - Окончен\n",
            "type": "integer",
            "format": "int64"
          },
          "invoices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserInvoice"
            }
          }
        },
        "required": [
          "id",
          "sellDate",
          "userId",
          "price"
        ]
      },
      "UserUserSubscriptions": {
        "title": "Абонементы",
        "properties": {
          "subscriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserUserSubscription"
            }
          },
          "stats": {
            "$ref": "#/components/schemas/UserSubscriptionsPaging"
          }
        }
      },
      "UserSubscriptionsPaging": {
        "required": [
          "totalItems"
        ],
        "properties": {
          "totalItems": {
            "description": "Общее количество строк в результате, без учета limit и offset",
            "type": "integer",
            "example": 5
          },
          "totalDebt": {
            "description": "Общий долг по абонементам",
            "type": "number"
          },
          "totalBilled": {
            "description": "Общая сумма списаний из абонементов",
            "type": "number"
          },
          "totalPrice": {
            "description": "Общая стоимость всех абонементов",
            "type": "number"
          }
        }
      },
      "LessonRecord": {
        "title": "Запись на занятие",
        "properties": {
          "id": {
            "description": "ID записи",
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 4
          },
          "userId": {
            "$ref": "#/components/schemas/Join/properties/userId"
          },
          "lessonId": {
            "description": "ID занятия",
            "type": "integer",
            "format": "int64",
            "example": 300
          },
          "free": {
            "description": "Бесплатная запись (посещение для ученика будет бесплатным)",
            "type": "boolean",
            "default": false,
            "example": true
          },
          "visit": {
            "description": "Статус посещения (true - ученик посетил занятие, false - пропустил)",
            "default": false,
            "type": "boolean",
            "example": false
          },
          "goodReason": {
            "description": "Уважительная причина отсутствия (true - есть уважительная причина, false - нет)",
            "default": false,
            "type": "boolean",
            "example": false
          },
          "test": {
            "description": "Пробная запись на занятие",
            "default": false,
            "type": "boolean",
            "example": false
          },
          "skip": {
            "description": "Не учитывать запись в количестве занятых мест",
            "default": false,
            "type": "boolean",
            "readOnly": true
          },
          "paid": {
            "description": "Платное занятие",
            "default": true,
            "type": "boolean",
            "readOnly": true
          },
          "bill": {
            "$ref": "#/components/schemas/UserBill"
          },
          "userSubscription": {
            "$ref": "#/components/schemas/UserSubscription"
          },
          "createdAt": {
            "$ref": "#/components/schemas/Join/properties/createdAt"
          },
          "missedLessonRecordId": {
            "description": "Id записи на пропущенное занятие (для отработки)",
            "type": "number"
          }
        },
        "required": [
          "userId",
          "lessonId"
        ]
      },
      "UserLessonRecord": {
        "title": "Запись на занятие",
        "properties": {
          "id": {
            "description": "ID записи",
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 4
          },
          "userId": {
            "$ref": "#/components/schemas/Join/properties/userId"
          },
          "lessonId": {
            "$ref": "#/components/schemas/LessonRecord/properties/lessonId"
          },
          "free": {
            "description": "Бесплатная запись (посещение для ученика будет бесплатным)",
            "type": "boolean",
            "default": false,
            "example": true,
            "readOnly": true
          },
          "visit": {
            "description": "Статус посещения (true - ученик посетил занятие, false - пропустил)",
            "default": false,
            "type": "boolean",
            "example": false,
            "readOnly": true
          },
          "goodReason": {
            "description": "Уважительная причина отсутствия (true - есть уважительная причина, false - нет)",
            "default": false,
            "type": "boolean",
            "example": false,
            "readOnly": true
          },
          "test": {
            "description": "Пробная запись на занятие",
            "default": false,
            "type": "boolean",
            "readOnly": true
          },
          "skip": {
            "description": "Не учитывать запись в количестве занятых мест",
            "default": false,
            "type": "boolean",
            "readOnly": true
          },
          "paid": {
            "description": "Платное занятие",
            "default": true,
            "type": "boolean",
            "readOnly": true
          },
          "bill": {
            "description": "Списание за посещение",
            "$ref": "#/components/schemas/UserBill"
          },
          "missedLessonRecordId": {
            "description": "Id записи на пропущенное занятие",
            "type": "number",
            "nullable": true,
            "example": null
          }
        },
        "required": [
          "userId",
          "lessonId"
        ]
      },
      "UserLessonRecordIndividual": {
        "title": "Запись на занятие",
        "properties": {
          "date": {
            "description": "Дата занятия",
            "type": "string",
            "format": "date",
            "example": "2019-06-14"
          },
          "time": {
            "description": "Время занятия",
            "type": "string",
            "pattern": "\\d\\d:\\d\\d",
            "example": "09:00"
          },
          "teacherId": {
            "type": "integer",
            "description": "ID преподавателя",
            "example": 1
          },
          "classId": {
            "description": "ID группы",
            "type": "integer",
            "example": 1
          },
          "filialId": {
            "description": "ID филиала",
            "type": "integer",
            "example": 1
          },
          "userId": {
            "description": "ID ученика",
            "type": "integer",
            "example": 1
          }
        },
        "required": [
          "date",
          "time",
          "teacherId",
          "classId",
          "userId"
        ]
      },
      "UserLessonRecordLimited": {
        "title": "Запись на занятие",
        "properties": {
          "id": {
            "description": "ID записи",
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 4
          },
          "userId": {
            "$ref": "#/components/schemas/Join/properties/userId"
          },
          "lessonId": {
            "$ref": "#/components/schemas/LessonRecord/properties/lessonId"
          },
          "free": {
            "description": "Бесплатная запись (посещение для ученика будет бесплатным)",
            "type": "boolean",
            "default": false,
            "example": true,
            "readOnly": true
          },
          "visit": {
            "description": "Статус посещения (true - ученик посетил занятие, false - пропустил)",
            "default": false,
            "type": "boolean",
            "example": false,
            "readOnly": true
          },
          "goodReason": {
            "description": "Уважительная причина отсутствия (true - есть уважительная причина, false - нет)",
            "default": false,
            "type": "boolean",
            "example": false,
            "readOnly": true
          },
          "test": {
            "description": "Пробная запись на занятие",
            "default": false,
            "type": "boolean",
            "readOnly": true
          },
          "skip": {
            "description": "Не учитывать запись в количестве занятых мест",
            "default": false,
            "type": "boolean",
            "readOnly": true
          }
        },
        "required": [
          "userId",
          "lessonId"
        ]
      },
      "LessonRecordEdit": {
        "title": "Запись на занятия",
        "properties": {
          "free": {
            "description": "Бесплатная запись (посещение для ученика будет бесплатным)",
            "type": "boolean",
            "default": false,
            "example": true
          },
          "visit": {
            "description": "Статус посещения (true - ученик посетил занятие, false - пропустил)",
            "default": false,
            "type": "boolean",
            "example": false
          },
          "goodReason": {
            "description": "Уважительная причина отсутствия (true - есть уважительная причина, false - нет)",
            "default": false,
            "type": "boolean",
            "example": false
          },
          "test": {
            "description": "Пробная запись на занятие",
            "type": "boolean",
            "default": false,
            "example": false
          },
          "skip": {
            "description": "Не учитывать запись в количестве занятых мест",
            "type": "boolean",
            "default": false,
            "example": false
          }
        }
      },
      "LessonRecordExtended": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LessonRecord"
          },
          {
            "type": "object",
            "properties": {
              "workOffRecord": {
                "nullable": true,
                "$ref": "#/components/schemas/WorkOffLessonRecord"
              },
              "missedRecord": {
                "nullable": true,
                "$ref": "#/components/schemas/MissedLessonRecord"
              }
            }
          }
        ]
      },
      "LessonWorkOffCreate": {
        "title": "Данные для записи на отработку",
        "anyOf": [
          {
            "required": [
              "userId",
              "lessonId"
            ],
            "properties": {
              "userId": {
                "$ref": "#/components/schemas/Join/properties/userId"
              },
              "lessonId": {
                "$ref": "#/components/schemas/LessonRecord/properties/lessonId"
              }
            }
          },
          {
            "required": [
              "userId",
              "lesson"
            ],
            "title": "Данные для записи на индивидуальную отработку",
            "properties": {
              "userId": {
                "$ref": "#/components/schemas/Join/properties/userId"
              },
              "lesson": {
                "title": "Данные для создания индивидуального занятия",
                "properties": {
                  "date": {
                    "description": "Дата проведения",
                    "type": "string",
                    "format": "date",
                    "example": "2019-06-14"
                  },
                  "beginTime": {
                    "description": "Время начала",
                    "type": "string",
                    "pattern": "\\d\\d:\\d\\d",
                    "example": "09:00"
                  },
                  "endTime": {
                    "description": "Время окончания",
                    "type": "string",
                    "pattern": "\\d\\d:\\d\\d",
                    "example": "09:40"
                  },
                  "filialId": {
                    "$ref": "#/components/schemas/Class/properties/filialId"
                  },
                  "classId": {
                    "$ref": "#/components/schemas/Join/properties/classId"
                  },
                  "roomId": {
                    "description": "ID аудитории",
                    "type": "integer",
                    "format": "int64",
                    "example": 100
                  },
                  "teacherId": {
                    "description": "Массив ID преподавателей для записи",
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "WorkOffLessonRecord": {
        "title": "Информация о занятии-отработке для пропущенного занятия ученика",
        "properties": {
          "lessonRecordId": {
            "description": "ID записи на занятие отработку",
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 2
          },
          "date": {
            "description": "Дата проведения",
            "type": "string",
            "format": "date",
            "example": "2019-06-14"
          },
          "beginTime": {
            "description": "Время начала",
            "type": "string",
            "pattern": "\\d\\d:\\d\\d",
            "example": "09:00"
          },
          "endTime": {
            "description": "Время окончания",
            "type": "string",
            "pattern": "\\d\\d:\\d\\d",
            "example": "09:40"
          },
          "roomId": {
            "description": "ID аудитории",
            "type": "integer",
            "format": "int64",
            "example": 100
          },
          "visit": {
            "description": "Статус посещения (true - ученик посетил занятие, false - пропустил)",
            "default": false,
            "type": "boolean",
            "example": false,
            "readOnly": true
          },
          "lessonId": {
            "$ref": "#/components/schemas/LessonRecord/properties/lessonId"
          },
          "lessonStatus": {
            "description": "Статус занятия. 1 - Проведено, 0 - Не проведено",
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "classId": {
            "$ref": "#/components/schemas/Join/properties/classId"
          },
          "teacherIds": {
            "description": "Преподаватели",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "MissedLessonRecord": {
        "title": "Информация о пропущенном занятии для занятия отработки",
        "properties": {
          "lessonRecordId": {
            "description": "ID записи на пропущенное занятие",
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 2
          },
          "date": {
            "description": "Дата проведения",
            "type": "string",
            "format": "date",
            "example": "2019-06-14"
          },
          "beginTime": {
            "description": "Время начала",
            "type": "string",
            "pattern": "\\d\\d:\\d\\d",
            "example": "09:00"
          },
          "endTime": {
            "description": "Время окончания",
            "type": "string",
            "pattern": "\\d\\d:\\d\\d",
            "example": "09:40"
          },
          "roomId": {
            "description": "ID аудитории",
            "type": "integer",
            "format": "int64",
            "example": 100
          },
          "lessonId": {
            "$ref": "#/components/schemas/LessonRecord/properties/lessonId"
          },
          "classId": {
            "$ref": "#/components/schemas/Join/properties/classId"
          },
          "teacherIds": {
            "description": "Преподаватели",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "Join": {
        "title": "Заявка",
        "properties": {
          "id": {
            "description": "ID заявки",
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 300
          },
          "userId": {
            "description": "ID ученика",
            "type": "integer",
            "format": "int64",
            "example": 300
          },
          "classId": {
            "description": "ID группы",
            "type": "integer",
            "format": "int64",
            "example": 400
          },
          "price": {
            "description": "Цена (для групп с разовой оплатой)",
            "type": "number",
            "format": "double",
            "nullable": true,
            "example": 6000
          },
          "statusId": {
            "description": "Статус заявки",
            "type": "integer",
            "format": "int64",
            "example": 2
          },
          "stateChangedAt": {
            "description": "Дата изменения статуса",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true,
            "example": "2019-06-12T13:00:12.000Z"
          },
          "statusChangeReasonId": {
            "description": "ID причины смены статуса",
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "autoJoin": {
            "description": "Автоматически записывать в статусе \"Учится\" на все занятия в группе",
            "type": "boolean",
            "example": true,
            "default": true
          },
          "autoDebit": {
            "description": "Автоматически списывать средства с баланса при наличии счета (только для групп с Формой оплаты Единой суммой/в рассрочку)",
            "type": "boolean",
            "example": true,
            "default": false
          },
          "remindDate": {
            "description": "Срок оплаты долга",
            "type": "string",
            "format": "date",
            "example": "2019-06-14",
            "nullable": true
          },
          "remindSum": {
            "description": "Сумма долга к оплате",
            "type": "number",
            "format": "double",
            "example": 500,
            "nullable": true
          },
          "managerId": {
            "description": "ID сотрудника, который создал заявку",
            "type": "integer",
            "format": "int64",
            "example": 300,
            "nullable": true
          },
          "stats": {
            "$ref": "#/components/schemas/JoinStats"
          },
          "comment": {
            "description": "Комментарий",
            "type": "string",
            "nullable": true
          },
          "advSourceId": {
            "$ref": "#/components/schemas/User/properties/advSourceId"
          },
          "createSourceId": {
            "description": "ID способа заведения (как заведена карточка)",
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 56
          },
          "updatedAt": {
            "description": "Дата изменения",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2019-06-12T13:00:12.000Z"
          },
          "createdAt": {
            "description": "Дата создания",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2019-06-12T13:00:12.000Z"
          },
          "tags": {
            "readOnly": true,
            "description": "Теги",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "nullable": true,
            "example": [
              0,
              4
            ]
          },
          "params": {
            "nullable": true,
            "$ref": "#/components/schemas/JoinParams"
          },
          "invoices": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserInvoice"
            }
          }
        },
        "required": [
          "classId",
          "userId",
          "statusId"
        ]
      },
      "JoinEdit": {
        "title": "Заявка",
        "properties": {
          "id": {
            "description": "ID заявки",
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 300
          },
          "price": {
            "description": "Цена (для групп с разовой оплатой)",
            "type": "number",
            "format": "double",
            "example": 6000
          },
          "statusId": {
            "description": "Статус заявки",
            "type": "integer",
            "format": "int64",
            "example": 2
          },
          "statusChangeReasonId": {
            "description": "ID причины смены статуса",
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "autoJoin": {
            "description": "Автоматически записывать в статусе \"Учится\" на все занятия в группе",
            "type": "boolean",
            "example": true,
            "default": true
          },
          "autoDebit": {
            "description": "Автоматически списывать средства с баланса при наличии счета (только для групп с Формой оплаты Единой суммой/в рассрочку)",
            "type": "boolean",
            "example": true,
            "default": false
          },
          "managerId": {
            "$ref": "#/components/schemas/Task/properties/managerId",
            "description": "ID сотрудника, который создал заявку",
            "nullable": true
          },
          "comment": {
            "$ref": "#/components/schemas/Join/properties/comment"
          },
          "advSourceId": {
            "$ref": "#/components/schemas/User/properties/advSourceId"
          },
          "createSourceId": {
            "$ref": "#/components/schemas/Join/properties/createSourceId"
          },
          "params": {
            "nullable": true,
            "$ref": "#/components/schemas/JoinParams",
            "readOnly": true
          }
        },
        "required": [
          "statusId",
          "price",
          "statusChangeReasonId",
          "autoJoin",
          "comment",
          "advSourceId",
          "createSourceId"
        ]
      },
      "CreateJoinResult": {
        "title": "Результат создания заявки",
        "properties": {
          "joinId": {
            "description": "ID созданной заявки",
            "type": "integer",
            "format": "int64"
          },
          "lessonsCount": {
            "description": "Количество созданных записей на занятия",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "UserJoin": {
        "title": "Заявка",
        "properties": {
          "id": {
            "description": "ID заявки",
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 300
          },
          "userId": {
            "$ref": "#/components/schemas/Join/properties/userId",
            "readOnly": true
          },
          "classId": {
            "$ref": "#/components/schemas/Join/properties/classId"
          },
          "price": {
            "description": "Цена (для групп с разовой оплатой)",
            "type": "number",
            "format": "double",
            "nullable": true,
            "example": 6000,
            "readOnly": true
          },
          "status": {
            "description": "Статус заявки",
            "type": "string",
            "enum": [
              "study",
              "over"
            ],
            "readOnly": true
          },
          "statusId": {
            "description": "ID статуса заявки",
            "type": "number",
            "example": 1,
            "readOnly": true
          },
          "autoJoin": {
            "description": "Автоматически записывать на все занятия в группе",
            "type": "boolean",
            "example": true,
            "default": true,
            "readOnly": true
          },
          "autoDebit": {
            "description": "Автоматически списывать средства с баланса при наличии счета (только для групп с Формой оплаты Единой суммой/в рассрочку)",
            "type": "boolean",
            "example": true,
            "default": false
          },
          "remindDate": {
            "description": "Срок оплаты долга",
            "type": "string",
            "format": "date",
            "example": "2019-06-14",
            "nullable": true,
            "readOnly": true
          },
          "remindSum": {
            "description": "Сумма долга к оплате",
            "type": "number",
            "format": "double",
            "example": 500,
            "nullable": true,
            "readOnly": true
          },
          "stats": {
            "$ref": "#/components/schemas/JoinStats"
          },
          "lessonIds": {
            "description": "ID занятий, на которые нужно записать ученика при создании заявки",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "writeOnly": true,
            "nullable": true
          },
          "summa": {
            "type": "number",
            "example": 500,
            "minimum": 1,
            "writeOnly": true,
            "description": "Сумма частичной оплаты записи в группу (если включена опция в группе)"
          }
        },
        "required": [
          "classId",
          "userId"
        ]
      },
      "JoinParams": {
        "title": "Дополнительные параметры заявки",
        "properties": {
          "invoice": {
            "title": "Правила создания счета. Если не указаны, то берутся из настроек группы",
            "nullable": true,
            "type": "object",
            "properties": {
              "autoCreate": {
                "description": "Создавать ли счет автоматически",
                "type": "boolean"
              },
              "createRule": {
                "description": "Когда создавать счет. Актуально при autoCreate=true. create - создать счет при создании заявки, setStatus - создать счет при установке статуса",
                "type": "string",
                "enum": [
                  "create",
                  "setStatus"
                ]
              },
              "joinStateId": {
                "description": "Статусы заявки, при установке которых будет создан счет. Актуально при createRule=setStatus",
                "nullable": true,
                "type": "array",
                "items": {
                  "type": "number"
                }
              },
              "payDateType": {
                "description": "Правила установки срока оплаты. relative - дата определяется относительно даты создания, exact - устанавливается точная дата оплаты",
                "nullable": true,
                "type": "string",
                "enum": [
                  "retative",
                  "exact"
                ]
              },
              "payDateDays": {
                "description": "Количество дней, через сколько нужно оплатить счет. Например, если сегодня 2020-01-01, и payDateDays=3, то срок оплаты будет установлен в 2020-01-04. Актуально при payDateType=relative",
                "nullable": true,
                "type": "number"
              },
              "payDate": {
                "description": "Срок оплаты счета. Актуально при payDateType=exact",
                "nullable": true,
                "type": "string",
                "format": "date"
              }
            }
          }
        }
      },
      "JoinStats": {
        "title": "Статистика по заявке",
        "readOnly": true,
        "properties": {
          "visits": {
            "description": "Количество посещений",
            "type": "integer",
            "format": "int32",
            "example": 5
          },
          "freeVisits": {
            "description": "Количество бесплатных посещений",
            "type": "integer",
            "format": "int32",
            "example": 0
          },
          "nextRecord": {
            "description": "Ближайшая запись на занятие",
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "lastVisit": {
            "description": "Последнее посещение",
            "type": "string",
            "format": "date",
            "example": "2019-06-02",
            "nullable": true
          },
          "lessonsLost": {
            "description": "Количество пропущенных занятий",
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "totalPayed": {
            "description": "Внесенная сумма (для групп с разовой оплатой)",
            "type": "number",
            "format": "double",
            "example": 1000
          },
          "nonPayedLessons": {
            "description": "Количество неоплаченных занятий (занятия в долг)",
            "type": "integer",
            "format": "int32",
            "example": 1
          }
        }
      },
      "Joins": {
        "title": "Список заявок",
        "properties": {
          "joins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Join"
            }
          },
          "stats": {
            "$ref": "#/components/schemas/Paging"
          }
        }
      },
      "StatusReason": {
        "title": "Причина изменения статуса",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Task/properties/id"
          },
          "name": {
            "description": "Название",
            "type": "string",
            "maxLength": 200,
            "example": "Не подходит график"
          }
        }
      },
      "UserAttribute": {
        "title": "Признак ученика",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Task/properties/id"
          },
          "name": {
            "description": "Название",
            "type": "string",
            "maxLength": 200,
            "example": "Уровень подготовки"
          },
          "alias": {
            "description": "Алиас",
            "type": "string",
            "maxLength": 200,
            "example": "level"
          },
          "type": {
            "description": "Тип признака",
            "type": "string",
            "maxLength": 30,
            "enum": [
              "string",
              "date",
              "select",
              "checkbox",
              "boolean",
              "number",
              "unique",
              "phone",
              "email"
            ]
          },
          "variants": {
            "description": "Варианты признака для типа **select**",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "$ref": "#/components/schemas/Task/properties/id"
                },
                "name": {
                  "description": "Название варианта",
                  "type": "string",
                  "maxLength": 200,
                  "example": "Начальный"
                },
                "createdAt": {
                  "$ref": "#/components/schemas/Join/properties/createdAt"
                }
              },
              "required": [
                "id",
                "name"
              ]
            }
          },
          "createdAt": {
            "$ref": "#/components/schemas/Join/properties/createdAt"
          }
        },
        "required": [
          "id",
          "name",
          "alias",
          "type",
          "createdAt"
        ]
      },
      "Task": {
        "title": "Задача",
        "properties": {
          "id": {
            "description": "ID сущности",
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 1
          },
          "body": {
            "description": "Текст задачи",
            "type": "string",
            "maxLength": 250,
            "example": "Позвонить Иванову Павлу, предложить абонемент"
          },
          "beginDate": {
            "description": "Начало задачи",
            "type": "string",
            "format": "date-time",
            "example": "2019-06-13T10:00:00.000Z"
          },
          "endDate": {
            "description": "Окончание задачи",
            "type": "string",
            "format": "date-time",
            "example": "2019-06-13T10:00:00.000Z"
          },
          "isAllDay": {
            "description": "Задача на весь день",
            "type": "boolean",
            "default": false,
            "example": false
          },
          "isComplete": {
            "description": "Задача выполнена",
            "type": "boolean",
            "default": false,
            "example": false
          },
          "reminds": {
            "description": "За сколько времени напомнить о задаче (в миллисекундах)",
            "nullable": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "example": [
              900000,
              3600000
            ]
          },
          "managerId": {
            "deprecated": true,
            "nullable": true,
            "description": "ID сотрудника",
            "type": "integer",
            "format": "int64",
            "example": 300
          },
          "managerIds": {
            "description": "Список id ответственных сотрудников (если одновременно указаны managerId и managerIds, то используется managerIds)",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "example": [
              1,
              2,
              3
            ]
          },
          "userId": {
            "description": "ID ученика",
            "type": "integer",
            "format": "int64",
            "example": 300,
            "nullable": true
          },
          "ownerId": {
            "description": "ID сотрудника, который создал задачу, null при автоматическом создании",
            "type": "integer",
            "format": "int64",
            "example": 300,
            "nullable": true
          },
          "classId": {
            "description": "ID группы",
            "type": "integer",
            "deprecated": true,
            "format": "int64",
            "example": 400,
            "nullable": true
          },
          "classIds": {
            "description": "Список ID групп",
            "nullable": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "example": [
              1,
              2,
              3
            ]
          },
          "filialId": {
            "description": "ID филиала",
            "type": "integer",
            "format": "int64",
            "deprecated": true,
            "example": 300,
            "nullable": true
          },
          "filialIds": {
            "description": "Список ID филиалов",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "example": [
              1,
              2,
              3
            ],
            "nullable": true
          },
          "categoryId": {
            "description": "ID категории задачи",
            "type": "integer",
            "format": "int64",
            "example": 1,
            "nullable": true
          },
          "createdAt": {
            "$ref": "#/components/schemas/Join/properties/createdAt"
          }
        },
        "required": [
          "body",
          "beginDate",
          "endDate"
        ]
      },
      "TaskCategory": {
        "title": "Категория задачи",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Task/properties/id"
          },
          "name": {
            "description": "Название категории",
            "type": "string",
            "maxLength": 200
          },
          "createdAt": {
            "$ref": "#/components/schemas/Join/properties/createdAt"
          }
        },
        "required": [
          "id",
          "name",
          "createdAt"
        ]
      },
      "Tasks": {
        "title": "Список задач",
        "properties": {
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Task"
            }
          },
          "stats": {
            "$ref": "#/components/schemas/Paging"
          }
        }
      },
      "UserComments": {
        "title": "Список комментариев",
        "properties": {
          "userComments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserComment"
            }
          },
          "stats": {
            "$ref": "#/components/schemas/Paging"
          }
        }
      },
      "KeyAuth": {
        "title": "Параметры для авторизации с помощью API ключа",
        "properties": {
          "apiKey": {
            "description": "Ключ API",
            "type": "string"
          }
        },
        "required": [
          "apiKey"
        ]
      },
      "UserAuth": {
        "title": "Параметры для авторизации с помощью логина и пароля аккаунта",
        "properties": {
          "login": {
            "description": "Email аккаунта",
            "type": "string",
            "format": "email"
          },
          "password": {
            "description": "Пароль аккаунта",
            "type": "string"
          }
        },
        "required": [
          "login",
          "password"
        ]
      },
      "AccessToken": {
        "title": "Токен для работы с API",
        "properties": {
          "accessToken": {
            "description": "API Токен",
            "type": "string"
          },
          "expiresAt": {
            "description": "Время жизни токена, После этого времени токен становится невалидным",
            "type": "string",
            "format": "date-time"
          },
          "level": {
            "description": "Уровень доступа токена. Определяет, к каким действиям будет открыт доступ.",
            "type": "string",
            "enum": [
              "company",
              "user"
            ]
          }
        },
        "required": [
          "accessToken",
          "expiresAt",
          "level"
        ]
      },
      "AuthResult": {
        "title": "Результат авторизации",
        "properties": {
          "csrfToken": {
            "description": "CSRF-токен. Действует в рамках сессии. Его нужно добавлять в каждый запрос в заголовок x-csrf-token",
            "type": "string"
          },
          "expiresAt": {
            "description": "Время жизни токена, После этого времени токен становится невалидным",
            "type": "string",
            "format": "date-time"
          },
          "level": {
            "description": "Уровень доступа токена. Определяет, к каким действиям будет открыт доступ.",
            "type": "string",
            "enum": [
              "user"
            ]
          }
        },
        "required": [
          "csrfToken",
          "expiresAt",
          "level"
        ]
      },
      "SuccessTokenLogin": {
        "title": "Результат авторизации",
        "properties": {
          "csrfToken": {
            "description": "CSRF-токен. Действует в рамках сессии. Его нужно добавлять в каждый запрос в заголовок x-csrf-token",
            "type": "string"
          }
        },
        "required": [
          "csrfToken",
          "expiresAt",
          "level"
        ]
      },
      "AuthTokenResult": {
        "title": "Токен авторизации",
        "properties": {
          "authToken": {
            "description": "Токен авторизации. Действует ограниченное время и только один раз.",
            "type": "string"
          },
          "expiresAt": {
            "description": "Время жизни токена, После этого времени токен становится невалидным",
            "type": "string",
            "format": "date-time"
          },
          "level": {
            "description": "Уровень доступа токена. Определяет, к каким действиям будет открыт доступ.",
            "type": "string",
            "enum": [
              "user"
            ]
          }
        },
        "required": [
          "authToken",
          "expiresAt",
          "level"
        ]
      },
      "CompanyRestricted": {
        "title": "Компания",
        "properties": {
          "name": {
            "description": "Название компании",
            "type": "string"
          },
          "currency": {
            "description": "Валюта",
            "type": "string"
          }
        }
      },
      "AccountRestricted": {
        "title": "Аккаунт",
        "properties": {
          "id": {
            "description": "Id аккаунта",
            "type": "integer",
            "format": "int64"
          },
          "email": {
            "description": "Email",
            "type": "string",
            "format": "email"
          },
          "params": {
            "description": "Настройки аккаунта",
            "$ref": "#/components/schemas/AccountSettings"
          }
        }
      },
      "AccountInfo": {
        "title": "Основная информация по аккаунту",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/AccountRestricted"
          },
          "company": {
            "$ref": "#/components/schemas/CompanyRestricted"
          },
          "users": {
            "description": "Ученики аккаунта",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRestricted"
            }
          },
          "subscriptions": {
            "description": "Текущие абонементы учеников",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserUserSubscription"
            },
            "readOnly": true
          },
          "filials": {
            "description": "Филиалы",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserFilial"
            }
          },
          "courses": {
            "description": "Программы",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserCourse"
            }
          },
          "classes": {
            "description": "Группы",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserClass"
            }
          },
          "managers": {
            "description": "Сотрудники",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserManager"
            }
          },
          "rooms": {
            "description": "Аудитории",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRoom"
            }
          },
          "families": {
            "description": "Семьи, в которых состоят ученики. Представлены объектом, где каждый ключ – id ученика, а в качестве значения перечисляются участники его семьи.",
            "type": "object"
          }
        }
      },
      "UserRestoreKey": {
        "title": "Данные для получения ключа восстановления пароля",
        "properties": {
          "email": {
            "description": "Email аккаунта, на который будет отправлен ключ восстановления",
            "type": "string",
            "format": "email"
          }
        },
        "required": [
          "email"
        ]
      },
      "UserRestorePassword": {
        "title": "Данные для установки нового пароля по ключу",
        "properties": {
          "restoreKey": {
            "description": "Ключ восстановления пароля",
            "type": "string"
          },
          "password": {
            "description": "Новый пароль",
            "minLength": 6,
            "type": "string"
          }
        },
        "required": [
          "restoreKey",
          "password"
        ]
      },
      "UserPassword": {
        "title": "Пароль пользователя",
        "properties": {
          "password": {
            "description": "Новый пароль",
            "type": "string",
            "minLength": 6
          }
        }
      },
      "Image": {
        "title": "Изображение",
        "properties": {
          "id": {
            "description": "ID изображения в системе",
            "type": "integer",
            "format": "int64",
            "example": 123456
          },
          "originalFilename": {
            "description": "Оригинальное имя файла",
            "type": "string",
            "example": "abc.png"
          },
          "url": {
            "description": "Полная ссылка к изображению",
            "type": "string",
            "example": "https://storage.net/images/mt/dp/abc.png"
          },
          "mimetype": {
            "description": "Тип изображения",
            "type": "string",
            "example": "image/png"
          },
          "width": {
            "description": "Ширина",
            "type": "integer",
            "format": "int64",
            "example": 4353
          },
          "height": {
            "description": "Высота",
            "type": "integer",
            "format": "int64",
            "example": 3433
          },
          "weight": {
            "description": "Размер файла",
            "type": "integer",
            "format": "int64",
            "example": 323432
          }
        }
      },
      "LkSettings": {
        "title": "Настройки личного кабинета компании",
        "properties": {
          "companyName": {
            "description": "Название компании",
            "type": "string"
          },
          "logo": {
            "description": "Логотип",
            "type": "string",
            "nullable": true
          },
          "color": {
            "description": "Основной цвет",
            "type": "string"
          },
          "accentColor": {
            "description": "Цвет текста кнопок",
            "type": "string"
          },
          "buttonsColor": {
            "description": "Цвет фона кнопок",
            "type": "string"
          },
          "contacts": {
            "description": "Контакты компании",
            "type": "object"
          },
          "allowPages": {
            "description": "Страницы, доступные для просмотра",
            "type": "object"
          },
          "selectLessons": {
            "description": "Выбор занятий при записи в группу",
            "type": "string"
          },
          "allowRecords": {
            "description": "Разрешать запись на занятия",
            "type": "boolean"
          },
          "allowRecordsTimeout": {
            "description": "За сколько минут до начала запрещать запись",
            "type": "integer"
          },
          "cancelRecords": {
            "description": "Разрешать запись на занятия",
            "type": "string"
          },
          "cancelRecordsTimeout": {
            "description": "За сколько минут до начала запрещать отменять запись",
            "type": "integer"
          },
          "yandexMetrikaCounter": {
            "description": "Счетчик Яндекс.Метрики",
            "type": "string"
          },
          "googleAnalyticsCounter": {
            "description": "Счетчик Google Аналитики",
            "type": "string"
          },
          "disableJoinWithStatuses": {
            "description": "Блокировать запись в группы/на занятия в определенных статусах",
            "type": "boolean"
          }
        }
      },
      "AccountSettings": {
        "title": "Настройки аккаунта",
        "properties": {
          "calendarFields": {
            "description": "Поля, отображаемые в календаре занятий",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "subject",
                "teachers",
                "rooms",
                "filials",
                "taskMarkers"
              ]
            }
          },
          "calendarZoom": {
            "description": "Масштаб календаря",
            "type": "string",
            "enum": [
              "small",
              "medium",
              "large"
            ]
          },
          "calendarStartHour": {
            "description": "Начало дня в календаре",
            "type": "integer",
            "default": 9
          },
          "truncateNames": {
            "description": "Обрезать названия, если не помещаются в одну строку в календаре",
            "type": "boolean",
            "default": false
          },
          "searchLessonsDefault": {
            "description": "Отображение занятий по-умолчанию. *all* - все, *mine* - только ученика",
            "type": "string",
            "enum": [
              "all",
              "mine"
            ]
          },
          "searchFilialsDefault": {
            "description": "Отображение филиала по-умолчанию *all* - все, *selected* - выбранный филиал из searchFilialId",
            "type": "string",
            "enum": [
              "all",
              "selected"
            ]
          },
          "searchFilialId": {
            "description": "Филиал для отображения занятий по-умолчанию",
            "nullable": true,
            "type": "integer"
          }
        }
      },
      "UserComment": {
        "title": "Комментарий",
        "properties": {
          "id": {
            "description": "ID комментария",
            "type": "integer",
            "example": 1,
            "format": "int64",
            "readOnly": true
          },
          "comment": {
            "description": "Текст комментария",
            "type": "string"
          },
          "showToUser": {
            "description": "Видимость комментария для ученика",
            "type": "boolean",
            "example": true,
            "default": true
          },
          "userId": {
            "description": "ID пользователя",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "lessonId": {
            "description": "ID занятия",
            "type": "integer",
            "format": "int64",
            "example": 1,
            "nullable": true
          },
          "classId": {
            "description": "ID группы",
            "type": "integer",
            "format": "int64",
            "example": 1,
            "nullable": true
          },
          "managerId": {
            "description": "ID менеджера",
            "type": "integer",
            "format": "int64",
            "example": 1,
            "nullable": true
          },
          "updatedAt": {
            "$ref": "#/components/schemas/Join/properties/updatedAt"
          },
          "createdAt": {
            "$ref": "#/components/schemas/Join/properties/createdAt"
          }
        },
        "required": [
          "userId",
          "comment"
        ]
      },
      "UserCommentEdit": {
        "title": "Комментарии",
        "properties": {
          "comment": {
            "description": "Текст комментария",
            "type": "string"
          },
          "showToUser": {
            "description": "Видимость комментария для ученика",
            "type": "boolean",
            "default": true
          },
          "lessonId": {
            "description": "ID занятия",
            "type": "integer",
            "format": "int64",
            "example": 1,
            "nullable": true
          },
          "classId": {
            "description": "ID группы",
            "type": "integer",
            "format": "int64",
            "example": 1,
            "nullable": true
          },
          "managerId": {
            "description": "ID менеджера",
            "type": "integer",
            "format": "int64",
            "example": 1,
            "nullable": true
          }
        },
        "required": [
          "comment"
        ]
      },
      "Integration": {
        "title": "Интеграция",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Task/properties/id"
          },
          "enabled": {
            "type": "boolean",
            "description": "Включена ли интеграция"
          },
          "params": {
            "description": "Параметры",
            "type": "object"
          }
        }
      },
      "VkEvent": {
        "title": "Событие в группе VK",
        "properties": {
          "type": {
            "description": "Тип события",
            "type": "string"
          },
          "group_id": {
            "description": "ID сообщества, в котором произошло событие",
            "type": "integer"
          },
          "secret": {
            "description": "Секретный ключ callback сервера",
            "type": "string"
          },
          "object": {
            "description": "Объект, инициировавший событие",
            "type": "object"
          }
        },
        "required": [
          "type",
          "group_id",
          "secret"
        ]
      },
      "VkAdsEvent": {
        "title": "Событие в VK рекламе",
        "properties": {
          "id": {
            "description": "ID события",
            "type": "string"
          },
          "resource": {
            "description": "Тип события",
            "type": "string"
          },
          "resource_id": {
            "description": "ID подписки",
            "type": "integer"
          },
          "data": {
            "description": "Объект, инициировавший событие",
            "type": "object"
          }
        },
        "required": [
          "resource",
          "resource_id",
          "data"
        ]
      },
      "FbEvent": {
        "title": "События лид форм FB",
        "properties": {
          "object": {
            "description": "Тип объекта",
            "type": "string"
          },
          "entry": {
            "description": "Список событий",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "changes": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "required": [
          "object",
          "entry"
        ]
      },
      "TildaEvent": {
        "title": "Событие Tilda",
        "properties": {
          "tranid": {
            "description": "Уникальный номер заявки",
            "type": "string"
          },
          "formid": {
            "description": "Номер блока, с которого была отправка",
            "type": "string"
          }
        }
      },
      "JivoSiteEvent": {
        "title": "Событие JivoSite",
        "properties": {
          "event_name": {
            "description": "Код события",
            "type": "string"
          }
        }
      },
      "LessonTask": {
        "title": "Задание на занятие",
        "properties": {
          "files": {
            "type": "array",
            "description": "Массив прикрепленных файлов",
            "items": {
              "$ref": "#/components/schemas/LessonFile"
            }
          },
          "text": {
            "description": "Текст задания в формате HTML",
            "type": "string"
          },
          "createdAt": {
            "$ref": "#/components/schemas/Join/properties/createdAt"
          }
        }
      },
      "HomeTask": {
        "title": "Задание на дом",
        "properties": {
          "files": {
            "type": "array",
            "description": "Массив прикрепленных файлов",
            "items": {
              "$ref": "#/components/schemas/LessonFile"
            }
          },
          "text": {
            "description": "Текст задания в формате HTML",
            "type": "string"
          },
          "createdAt": {
            "$ref": "#/components/schemas/Join/properties/createdAt"
          }
        }
      },
      "RestrictError": {
        "title": "Код ограничения доступа",
        "properties": {
          "code": {
            "description": "Код",
            "type": "string",
            "enum": [
              "noSubscription",
              "noInvoice",
              "earlyAccess"
            ]
          },
          "data": {
            "type": "object",
            "description": "Дополнительные данные"
          }
        }
      },
      "LessonTaskEdit": {
        "title": "Редактируемые данные задания",
        "properties": {
          "text": {
            "description": "Текст задания в формате HTML",
            "type": "string"
          }
        }
      },
      "LessonTaskFile": {
        "title": "Файл задания на занятие",
        "properties": {
          "id": {
            "description": "ID файла",
            "type": "integer"
          },
          "original": {
            "description": "Имя файла для отображения в CRM и личном кабинете ученика",
            "type": "string"
          }
        }
      },
      "LessonMarkEdit": {
        "title": "Редактируемые данные оценки",
        "properties": {
          "value": {
            "description": "Оценка",
            "type": "number",
            "example": 5
          }
        }
      },
      "LessonFile": {
        "title": "Файл",
        "properties": {
          "id": {
            "description": "ID файла",
            "type": "integer",
            "example": 1,
            "format": "int64"
          },
          "original": {
            "description": "Имя файла",
            "type": "string",
            "example": "Документ.docx"
          },
          "size": {
            "description": "Размер файла (в байтах)",
            "type": "number",
            "example": 472328
          },
          "downloadUrl": {
            "description": "Прямая ссылка на страницу скачивания файла",
            "type": "string",
            "nullable": true
          },
          "uploadState": {
            "description": "Состояние обработки файла",
            "type": "string",
            "enum": [
              "done",
              "process",
              "error"
            ],
            "nullable": true
          }
        }
      },
      "File": {
        "title": "Файл",
        "properties": {
          "id": {
            "description": "ID файла",
            "type": "integer",
            "example": 1,
            "format": "int64"
          },
          "original": {
            "description": "Имя файла",
            "type": "string",
            "example": "Документ.docx"
          },
          "size": {
            "description": "Размер файла (в байтах)",
            "type": "number",
            "example": 472328
          },
          "downloadUrl": {
            "description": "Прямая ссылка на страницу скачивания файла",
            "type": "string",
            "nullable": true
          },
          "uploadState": {
            "description": "Состояние обработки файла",
            "type": "string",
            "enum": [
              "done",
              "process",
              "error"
            ],
            "nullable": true
          },
          "managerId": {
            "description": "ID сотрудника, загрузившего файл",
            "type": "integer",
            "example": 1,
            "format": "int64",
            "nullable": true
          },
          "manager": {
            "type": "object",
            "description": "Сотрудник, оставивший комментарий",
            "nullable": true
          },
          "contract": {
            "$ref": "#/components/schemas/Contract"
          },
          "comment": {
            "description": "Комментарий к файлу для ученика",
            "type": "object",
            "properties": {
              "managerId": {
                "type": "integer",
                "description": "ID сотрудника, оставившего комментарий",
                "nullable": true
              },
              "manager": {
                "type": "object",
                "description": "Сотрудник, оставивший комментарий",
                "nullable": true
              },
              "text": {
                "type": "string",
                "description": "Текст комментария",
                "nullable": true
              }
            }
          },
          "lessonId": {
            "description": "Занятие, к которому привязан файл",
            "nullable": true,
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "Avatar": {
        "title": "Данные фото ученика",
        "properties": {
          "filename": {
            "description": "Имя файла",
            "type": "string",
            "example": "Фото.png"
          },
          "mimetype": {
            "description": "MIME тип файла",
            "type": "string",
            "example": "image/png"
          },
          "data": {
            "description": "Данные base64",
            "type": "string"
          }
        }
      },
      "Mark": {
        "title": "Оценка",
        "properties": {
          "type": {
            "description": "Тип оценки",
            "enum": [
              "home",
              "lesson"
            ],
            "type": "string",
            "example": "home"
          },
          "userId": {
            "description": "ID пользователя",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "lessonId": {
            "description": "ID занятия",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "value": {
            "description": "Оценка",
            "type": "number",
            "example": 5
          },
          "createdAt": {
            "$ref": "#/components/schemas/Join/properties/createdAt"
          }
        }
      },
      "TaskAnswerCommentCreate": {
        "title": "Комментарий к ответу на задание",
        "properties": {
          "text": {
            "description": "Текст комментария",
            "type": "string"
          },
          "managerId": {
            "description": "ID преподавателя, который оставил комментарий",
            "type": "integer",
            "format": "int64",
            "example": 1
          }
        }
      },
      "TaskAnswerCommentCreateUser": {
        "title": "Комментарий к ответу на задание",
        "properties": {
          "text": {
            "description": "Текст комментария",
            "type": "string"
          },
          "userId": {
            "description": "ID пользователя, который оставил комментарий",
            "type": "integer",
            "format": "int64",
            "example": 1
          }
        }
      },
      "TaskAnswerFileCreate": {
        "title": "Файл к ответу на задание",
        "properties": {
          "data": {
            "description": "Данные в формате base64",
            "type": "string"
          },
          "name": {
            "description": "Имя файла",
            "type": "string",
            "example": "Ответ.docx"
          }
        }
      },
      "TaskAnswerFileCreateUser": {
        "title": "Файл к ответу на задание",
        "properties": {
          "data": {
            "description": "Данные в формате base64",
            "type": "string"
          },
          "name": {
            "description": "Имя файла",
            "type": "string",
            "example": "Ответ.docx"
          },
          "scopeUserId": {
            "description": "ID пользователя, который прикрепляет файл",
            "type": "integer",
            "format": "int64",
            "example": 1
          }
        }
      },
      "FileCreateUser": {
        "title": "Свободный файл",
        "properties": {
          "data": {
            "description": "Данные в формате base64",
            "type": "string"
          },
          "name": {
            "description": "Имя файла",
            "type": "string",
            "example": "Ответ.docx"
          },
          "comment": {
            "description": "Комментарий ученика",
            "type": "string",
            "example": "Мой комментарий",
            "nullable": true
          },
          "userId": {
            "description": "ID пользователя, который прикрепляет файл",
            "type": "integer",
            "format": "int64",
            "example": 1
          }
        }
      },
      "FileCreateCompany": {
        "title": "Свободный файл",
        "properties": {
          "data": {
            "description": "Данные в формате base64",
            "type": "string"
          },
          "name": {
            "description": "Имя файла",
            "type": "string",
            "example": "Ответ.docx"
          },
          "comment": {
            "description": "Комментарий сотрудника",
            "type": "string",
            "example": "Мой комментарий",
            "nullable": true
          },
          "userComment": {
            "description": "Комментарий ученика/для ученика",
            "type": "string",
            "example": "Мой комментарий",
            "nullable": true
          },
          "managerId": {
            "description": "ID сотрудника, который прикрепляет файл",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "contractId": {
            "description": "ID договора ученика",
            "type": "integer",
            "format": "int64"
          },
          "userId": {
            "description": "ID ученика",
            "type": "integer",
            "format": "int64"
          },
          "visible": {
            "description": "Флаг определяющий виден ли файл ученику",
            "default": false,
            "nullable": true,
            "type": "boolean",
            "example": true
          }
        }
      },
      "FileEditCompany": {
        "title": "Редактирование файла",
        "properties": {
          "comment": {
            "description": "Комментарий сотрудника",
            "type": "string",
            "example": "Мой комментарий",
            "nullable": true
          },
          "userComment": {
            "description": "Комментарий ученика/для ученика",
            "type": "string",
            "example": "Мой комментарий",
            "nullable": true
          },
          "managerId": {
            "description": "ID сотрудника, который редактирует файл",
            "type": "integer",
            "format": "int64",
            "example": 1,
            "nullable": true
          },
          "visible": {
            "description": "Флаг определяющий виден ли файл ученику",
            "default": false,
            "nullable": true,
            "type": "boolean",
            "example": true
          }
        }
      },
      "TaskAnswerComment": {
        "title": "Комментарий к ответу на задание",
        "properties": {
          "id": {
            "description": "ID комментария",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "isSystem": {
            "description": "Системный",
            "type": "boolean",
            "example": true
          },
          "text": {
            "description": "Текст комментария",
            "type": "string"
          },
          "managerId": {
            "description": "ID сотрудника, оставившего комментарий",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "managerName": {
            "description": "Имя сотрудника, оставившего комментарий",
            "type": "string",
            "example": "Иван Иванов"
          },
          "createdAt": {
            "$ref": "#/components/schemas/Join/properties/createdAt"
          }
        }
      },
      "ShortTaskAnswer": {
        "title": "Обрезанные данные ответа на задание (без текста ответа)",
        "properties": {
          "id": {
            "description": "ID ответа",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "type": {
            "description": "Тип оценки",
            "enum": [
              "home",
              "lesson"
            ],
            "type": "string",
            "example": "home"
          },
          "status": {
            "description": "Статус",
            "enum": [
              "draft",
              "sent",
              "accept",
              "return"
            ],
            "type": "string",
            "example": "draft"
          }
        }
      },
      "TaskAnswer": {
        "title": "Данные ответа на задание",
        "required": [
          "userId",
          "type"
        ],
        "properties": {
          "id": {
            "description": "ID ответа",
            "type": "integer",
            "readOnly": true,
            "format": "int64",
            "example": 1
          },
          "userId": {
            "description": "ID пользователя",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "type": {
            "description": "Тип ответа",
            "enum": [
              "home",
              "lesson"
            ],
            "type": "string",
            "example": "home"
          },
          "status": {
            "description": "Статус",
            "enum": [
              "draft",
              "sent",
              "accept",
              "return"
            ],
            "type": "string",
            "example": "draft"
          },
          "text": {
            "description": "Текст ответа",
            "type": "string",
            "nullable": true
          },
          "comments": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/TaskAnswerComment"
            }
          },
          "files": {
            "description": "Файлы прикрепленные к ответу",
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LessonFile"
            }
          },
          "createdAt": {
            "$ref": "#/components/schemas/Join/properties/createdAt"
          }
        }
      },
      "TaskAnswerCreateUser": {
        "title": "Данные создаваемого ответа",
        "required": [
          "userId",
          "type"
        ],
        "properties": {
          "userId": {
            "description": "ID ученика",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "type": {
            "description": "Тип оценки",
            "enum": [
              "home",
              "lesson"
            ],
            "type": "string",
            "example": "home"
          },
          "text": {
            "description": "Текст ответа",
            "type": "string"
          }
        }
      },
      "TaskAnswerEditUser": {
        "title": "Редактируемые данные ответа",
        "required": [
          "userId"
        ],
        "properties": {
          "text": {
            "description": "Текст ответа",
            "type": "string"
          },
          "userId": {
            "description": "ID пользователя",
            "type": "integer",
            "format": "int64",
            "example": 1
          }
        }
      },
      "TaskAnswerEdit": {
        "title": "Редактируемые данные ответа",
        "properties": {
          "text": {
            "description": "Текст ответа",
            "type": "string"
          }
        }
      },
      "TaskAnswerStatus": {
        "title": "Редактируемые данные ответа",
        "required": [
          "managerId",
          "status"
        ],
        "properties": {
          "status": {
            "description": "Статус",
            "enum": [
              "draft",
              "sent",
              "accept",
              "return"
            ],
            "type": "string",
            "example": "draft"
          },
          "managerId": {
            "description": "ID преподавателя, который сменил статус",
            "type": "integer",
            "format": "int64",
            "example": 1
          }
        }
      },
      "IgEvent": {
        "title": "Событие в Instagram",
        "properties": {
          "type": {
            "description": "Тип события",
            "type": "string"
          },
          "changes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "lead": {
                  "type": "object"
                },
                "object": {
                  "type": "object"
                }
              },
              "required": [
                "lead",
                "object"
              ]
            }
          }
        },
        "required": [
          "type",
          "changes"
        ]
      },
      "DownloadFile": {
        "title": "Данные файла",
        "properties": {
          "data": {
            "description": "Данные в формате base64",
            "type": "string"
          },
          "original": {
            "description": "Имя файла",
            "type": "string"
          },
          "mimetype": {
            "description": "mimetype файла",
            "type": "string"
          }
        }
      },
      "AmoEvent": {
        "title": "Событие amoCRM",
        "properties": {
          "leads": {
            "description": "Список сделок",
            "type": "object"
          },
          "contacts": {
            "description": "Список контактов",
            "type": "object"
          }
        }
      },
      "PaymentSystemEvent": {
        "title": "Событие в платежной системе"
      },
      "PaymentTochkaEvent": {
        "title": "Событие в платежной системе ТочкаБанка"
      },
      "SmsVizitkaEvent": {
        "title": "Событие в СМС-визитке"
      },
      "BitrixEvent": {
        "title": "Событие Bitrix24",
        "properties": {
          "event": {
            "description": "Код события",
            "type": "string"
          },
          "data": {
            "description": "Данные события",
            "type": "object"
          }
        }
      },
      "UserSubscriptionEdit": {
        "description": "Абонемент ученика",
        "properties": {
          "externalId": {
            "description": "Пользовательский номер абонемента",
            "type": "string",
            "example": "ЛТ-2305",
            "nullable": true
          },
          "sellDate": {
            "description": "Дата продажи",
            "type": "string",
            "format": "date",
            "example": "2019-06-14"
          },
          "beginDate": {
            "description": "Дата начала действия",
            "type": "string",
            "format": "date",
            "example": "2019-06-14"
          },
          "endDate": {
            "description": "Дата окончания действия",
            "type": "string",
            "format": "date",
            "example": "2019-06-14",
            "nullable": true
          },
          "price": {
            "description": "Стоимость при продаже",
            "type": "number",
            "format": "double",
            "example": 1100,
            "minimum": 0
          },
          "comment": {
            "description": "Комментарий",
            "type": "string",
            "example": "comment!"
          },
          "classIds": {
            "description": "Группы, в которых действует абонемент",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "period": {
            "description": "Срок действия",
            "type": "string",
            "nullable": true,
            "pattern": "^[0-9]+ (day|month|year)$",
            "example": "2 day"
          },
          "visitCount": {
            "description": "Количество занятий в абонементе",
            "type": "integer",
            "format": "int64",
            "default": 0,
            "example": 1,
            "nullable": true,
            "maximum": 200
          },
          "mainClassId": {
            "description": "ID основной группы абонемента",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "sellDate",
          "classIds",
          "price",
          "mainClassId",
          "beginDate"
        ]
      },
      "UserSubscriptionStats": {
        "title": "Статистика по абонементу",
        "readOnly": true,
        "properties": {
          "totalPayed": {
            "description": "Внесенная сумма",
            "type": "number",
            "format": "float",
            "example": 1000
          },
          "lastPay": {
            "description": "Дата последней оплаты",
            "type": "string",
            "format": "date",
            "example": "2021-04-12",
            "nullable": true
          },
          "totalBilled": {
            "description": "Списано из из абонемента (расход)",
            "type": "number",
            "format": "float",
            "example": 40
          },
          "totalVisited": {
            "description": "Использованно посещений",
            "type": "number",
            "format": "int32",
            "example": 1
          },
          "totalBurned": {
            "description": "Сгорело занятий",
            "type": "number",
            "format": "int32",
            "example": 1
          }
        }
      },
      "UserSubscription": {
        "description": "Абонемент ученика",
        "properties": {
          "id": {
            "description": "ID",
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 1
          },
          "externalId": {
            "description": "Пользовательский номер абонемента",
            "type": "string",
            "example": "ЛТ-2305",
            "nullable": true
          },
          "userId": {
            "description": "ID ученика",
            "type": "integer",
            "format": "int64"
          },
          "subscriptionId": {
            "description": "ID вида абонемента",
            "type": "integer",
            "format": "int64",
            "example": 12
          },
          "price": {
            "description": "Стоимость при продаже (с учетом скидки и доп. компенсации)",
            "type": "number",
            "format": "double",
            "example": 1100,
            "readOnly": true
          },
          "originalPrice": {
            "description": "Цена абонемента (без учета скидки и доп. компенсации). При создании по умолчанию будет взята цена основного абонемента",
            "type": "number",
            "format": "double",
            "example": 2000
          },
          "discount": {
            "description": "Скидка, % от цены абонемента",
            "type": "number",
            "example": 20,
            "minimum": 0,
            "maximum": 100,
            "nullable": true
          },
          "extraDiscount": {
            "description": "Дополнительная компенсация цены абонемента",
            "type": "number",
            "format": "double",
            "example": 500,
            "minimum": 0,
            "nullable": true
          },
          "comment": {
            "description": "Комментарий",
            "type": "string",
            "example": "comment!",
            "nullable": true
          },
          "sellDate": {
            "description": "Дата продажи",
            "type": "string",
            "format": "date",
            "example": "2019-06-14"
          },
          "beginDate": {
            "description": "Дата начала действия. Если не указан, устанавливается в текущую дату.",
            "type": "string",
            "format": "date",
            "example": "2019-06-14",
            "nullable": true
          },
          "endDate": {
            "description": "Дата окончания действия",
            "type": "string",
            "format": "date",
            "example": "2019-06-14",
            "nullable": true
          },
          "payed": {
            "description": "Оплаченная сумма",
            "type": "number",
            "format": "double",
            "example": 990,
            "readOnly": true
          },
          "remindDate": {
            "description": "Срок оплаты долга",
            "type": "string",
            "format": "date",
            "example": "2019-06-14",
            "nullable": true,
            "readOnly": true
          },
          "remindSumm": {
            "description": "Сумма долга к оплате",
            "type": "number",
            "format": "double",
            "example": 500,
            "readOnly": true,
            "nullable": true
          },
          "classIds": {
            "description": "Группы, в которых действует абонемент",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "courseIds": {
            "description": "Программы, в которых действует абонемент",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "nullable": true,
            "readOnly": true
          },
          "freezeFrom": {
            "description": "Дата начала заморозки",
            "type": "string",
            "format": "date",
            "example": "2019-06-14",
            "nullable": true,
            "readOnly": true
          },
          "freezeTo": {
            "description": "Дата окончания заморозки",
            "type": "string",
            "format": "date",
            "example": "2019-06-14",
            "nullable": true,
            "readOnly": true
          },
          "period": {
            "description": "Срок действия. При создании по умолчанию значение будет взято из основного абонемента",
            "type": "string",
            "nullable": true,
            "pattern": "^[0-9]+ (day|month|year)$",
            "example": "2 day"
          },
          "visitCount": {
            "description": "Количество занятий в абонементе. При создании по умолчанию значение будет взято из основного абонемента",
            "type": "integer",
            "format": "int64",
            "example": 1,
            "nullable": true,
            "maximum": 200
          },
          "visitedCount": {
            "description": "Количество списанных занятий в абонементе. Вместо этого поля рекомендуется использовать поле stats.totalVisited",
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "readOnly": true,
            "deprecated": true
          },
          "statusId": {
            "description": "Статус абонемента:\n* `1` - Не активный\n* `2` - Активный\n* `3` - Заморожен\n* `4` - Окончен\n",
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "mainClassId": {
            "description": "ID основной группы абонемента",
            "type": "integer",
            "format": "int64"
          },
          "managerId": {
            "description": "ID менеджера",
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "autoDebit": {
            "description": "Автоматически списывать средства с баланса при наличии счета (только для групп с Формой оплаты Единой суммой/в рассрочку)",
            "type": "boolean",
            "default": true
          },
          "burnLeftovers": {
            "description": "Списывать остатки абонемента после окончания его срока",
            "type": "boolean",
            "default": true
          },
          "useLeftovers": {
            "description": "Использовать оставшиеся посещения абонемента после окончания его срока автоматически",
            "type": "boolean",
            "default": true
          },
          "stats": {
            "$ref": "#/components/schemas/UserSubscriptionStats"
          }
        },
        "required": [
          "sellDate",
          "userId",
          "subscriptionId",
          "classIds",
          "mainClassId"
        ]
      },
      "UserSubscriptions": {
        "title": "Абонементы ученика",
        "properties": {
          "subscriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSubscription"
            }
          },
          "stats": {
            "$ref": "#/components/schemas/Paging"
          }
        }
      },
      "Contract": {
        "title": "Документ",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Task/properties/id"
          },
          "number": {
            "description": "Номер документа",
            "type": "string",
            "nullable": true,
            "maxLength": 200
          },
          "updatedAt": {
            "$ref": "#/components/schemas/Join/properties/updatedAt"
          },
          "createdAt": {
            "$ref": "#/components/schemas/Join/properties/createdAt"
          },
          "name": {
            "description": "Название документа",
            "type": "string",
            "example": "Договор 1"
          },
          "type": {
            "description": "Тип документа, contract - договор, reference - справка, other - иное",
            "type": "string",
            "enum": [
              "contract",
              "reference",
              "other"
            ]
          },
          "userId": {
            "$ref": "#/components/schemas/Join/properties/userId"
          },
          "date": {
            "description": "Дата заключения (для договора)",
            "type": "string",
            "format": "date",
            "nullable": true,
            "example": "2019-06-12T00:00:00.000Z"
          },
          "dateFrom": {
            "description": "Дата действия от",
            "type": "string",
            "format": "date",
            "nullable": true,
            "example": "2019-06-12T00:00:00.000Z"
          },
          "dateTo": {
            "description": "Дата действия до",
            "type": "string",
            "format": "date",
            "nullable": true,
            "example": "2019-06-12T00:00:00.000Z"
          }
        }
      },
      "UserCreateOnlinePayment": {
        "title": "Данные для создания платежа",
        "required": [
          "userId",
          "integrationId",
          "payload"
        ],
        "properties": {
          "userId": {
            "type": "number",
            "format": "int64",
            "example": 123,
            "description": "ID ученика"
          },
          "integrationId": {
            "type": "number",
            "format": "int64",
            "example": 144,
            "description": "ID интеграции с платежной системой"
          },
          "payload": {
            "description": "Информация о том, для чего нужно создать платеж",
            "anyOf": [
              {
                "title": "Оплата счета",
                "type": "object",
                "required": [
                  "payFor",
                  "invoiceId"
                ],
                "properties": {
                  "payFor": {
                    "type": "string",
                    "enum": [
                      "invoice"
                    ],
                    "description": "Обозначение того, за что нужно заплатить"
                  },
                  "invoiceId": {
                    "type": "number",
                    "format": "int64",
                    "example": 333,
                    "description": "Номер счета"
                  },
                  "debitFromBalans": {
                    "type": "boolean",
                    "example": true,
                    "description": "Списывать ли средства с баланса"
                  },
                  "summa": {
                    "type": "number",
                    "example": 500,
                    "minimum": 1,
                    "description": "Сумма частичной оплаты долга за запись в группу/абонемент"
                  }
                }
              },
              {
                "title": "Оплата на баланс",
                "type": "object",
                "required": [
                  "payFor",
                  "summa"
                ],
                "properties": {
                  "payFor": {
                    "type": "string",
                    "enum": [
                      "balans"
                    ],
                    "description": "Обозначение того, за что нужно заплатить"
                  },
                  "summa": {
                    "type": "number",
                    "example": 500,
                    "minimum": 1,
                    "description": "Сумма платежа"
                  }
                }
              },
              {
                "title": "Оплата абонемента для существующей записи в группу",
                "type": "object",
                "required": [
                  "payFor",
                  "subscriptionId",
                  "joinId"
                ],
                "properties": {
                  "payFor": {
                    "type": "string",
                    "enum": [
                      "subForExistingJoin"
                    ],
                    "description": "Обозначение того, за что нужно заплатить"
                  },
                  "subscriptionId": {
                    "type": "number",
                    "format": "int64",
                    "example": 126,
                    "description": "ID вида абонемента"
                  },
                  "joinId": {
                    "type": "number",
                    "format": "int64",
                    "example": 127,
                    "description": "ID записи в группу"
                  },
                  "subscriptionStartDate": {
                    "description": "Дата начала действия абонемента (если в абонементе разрешен выбор даты)\n* `fromNow` - с даты оплаты\n* `fromThisMonth` - с начала текущего месяца\n* `fromNextMonth` - с начала следующего месяца\n",
                    "type": "string",
                    "enum": [
                      "fromNow",
                      "fromThisMonth",
                      "fromNextMonth"
                    ],
                    "example": "fromThisMonth"
                  },
                  "debitFromBalans": {
                    "type": "boolean",
                    "example": true,
                    "description": "Списывать ли средства с баланса"
                  },
                  "summa": {
                    "type": "number",
                    "example": 500,
                    "minimum": 1,
                    "description": "Сумма частичной оплаты при новой покупке"
                  }
                }
              },
              {
                "title": "Оплата абонемента для новой записи в группу",
                "type": "object",
                "required": [
                  "payFor",
                  "subscriptionId",
                  "classId"
                ],
                "properties": {
                  "payFor": {
                    "type": "string",
                    "enum": [
                      "subForNewJoin"
                    ],
                    "description": "Обозначение того, за что нужно заплатить"
                  },
                  "subscriptionId": {
                    "type": "number",
                    "format": "int64",
                    "example": 126,
                    "description": "ID вида абонемента"
                  },
                  "classId": {
                    "type": "number",
                    "format": "int64",
                    "example": 127,
                    "description": "ID группы"
                  },
                  "lessonIds": {
                    "description": "ID занятий, на которые нужно будет записать ученика при создании заявки",
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "writeOnly": true,
                    "nullable": true
                  },
                  "subscriptionStartDate": {
                    "description": "Дата начала действия абонемента (если в абонементе разрешен выбор даты)\n* `fromNow` - с даты оплаты\n* `fromThisMonth` - с начала текущего месяца\n* `fromNextMonth` - с начала следующего месяца\n",
                    "type": "string",
                    "enum": [
                      "fromNow",
                      "fromThisMonth",
                      "fromNextMonth"
                    ],
                    "example": "fromThisMonth"
                  },
                  "debitFromBalans": {
                    "type": "boolean",
                    "example": true,
                    "description": "Списывать ли средства с баланса"
                  },
                  "summa": {
                    "type": "number",
                    "example": 500,
                    "minimum": 1,
                    "description": "Сумма частичной оплаты при новой покупке"
                  }
                }
              },
              {
                "title": "Оплата существующей записи в группу с типом оплаты \"единой суммой\"",
                "type": "object",
                "required": [
                  "payFor",
                  "joinId"
                ],
                "properties": {
                  "payFor": {
                    "type": "string",
                    "enum": [
                      "existingJoin"
                    ],
                    "description": "Обозначение того, за что нужно заплатить"
                  },
                  "joinId": {
                    "type": "number",
                    "format": "int64",
                    "example": 127,
                    "description": "ID записи в группу"
                  },
                  "debitFromBalans": {
                    "type": "boolean",
                    "example": true,
                    "description": "Списывать ли средства с баланса"
                  }
                }
              },
              {
                "title": "Оплата новой записи в группу с типом оплаты \"единой суммой\"",
                "type": "object",
                "required": [
                  "payFor",
                  "classId"
                ],
                "properties": {
                  "payFor": {
                    "type": "string",
                    "enum": [
                      "newJoin"
                    ],
                    "description": "Обозначение того, за что нужно заплатить"
                  },
                  "classId": {
                    "type": "number",
                    "format": "int64",
                    "example": 127,
                    "description": "ID группы"
                  },
                  "lessonIds": {
                    "description": "ID занятий, на которые нужно будет записать ученика при создании заявки",
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "writeOnly": true,
                    "nullable": true
                  },
                  "debitFromBalans": {
                    "type": "boolean",
                    "example": true,
                    "description": "Списывать ли средства с баланса"
                  },
                  "summa": {
                    "type": "number",
                    "example": 500,
                    "minimum": 1,
                    "description": "Сумма частичной оплаты записи в группу (если включена опция в группе)"
                  }
                }
              }
            ]
          }
        }
      },
      "SubscriptionsGrouping": {
        "description": "Группировка видов абонементов",
        "properties": {
          "id": {
            "description": "ID",
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 100
          },
          "name": {
            "description": "Название",
            "type": "string",
            "maxLength": 50,
            "minLength": 2,
            "example": "Мультиабонеметы"
          },
          "description": {
            "description": "Короткое описание группировки",
            "type": "string",
            "maxLength": 250,
            "nullable": true,
            "example": "В этой группировке находятся только мультиабонементы"
          },
          "createdAt": {
            "$ref": "#/components/schemas/Join/properties/createdAt"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "CashboxEdit": {
        "title": "Касса",
        "properties": {
          "name": {
            "description": "Название",
            "type": "string",
            "maxLength": 50,
            "minLength": 3,
            "example": "Главная касса налички"
          },
          "networkIds": {
            "description": "ID сетей.",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "example": [
              2
            ]
          },
          "filialIds": {
            "description": "ID филиалов для которых доступна касса.",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "example": [
              2,
              3
            ]
          },
          "allowNegative": {
            "description": "Может ли у кассы быть отрицательный баланс",
            "type": "boolean",
            "example": true,
            "default": false
          },
          "initialBalance": {
            "type": "number",
            "description": "Начальное количество средств в кассе",
            "example": 100,
            "default": 0
          },
          "registerVisibility": {
            "description": "ID менеджеров и ролей, кто может видеть информацию по кассе\n* `integer` - ID менеджера\n* `string` - role_ + ID роли\n",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "example": [
              "role_1",
              2
            ]
          },
          "balanceVisibility": {
            "description": "ID менеджеров и ролей, кто может видеть баланс кассы (из тех кто видит кассу)\n* `integer` - ID менеджера\n* `string` - role_ + ID роли\n",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "example": [
              "role_1",
              2
            ]
          },
          "comment": {
            "description": "Комментарий к кассе",
            "type": "string",
            "nullable": true,
            "example": null
          },
          "statusId": {
            "description": "Статус кассы:\n* `0` - Архив\n* `1` - Активный\n",
            "default": 1,
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "CashboxCreate": {
        "title": "Касса",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "paymentTypeId": {
                "type": "number",
                "description": "Id типа оплаты"
              }
            }
          },
          {
            "$ref": "#/components/schemas/CashboxEdit"
          }
        ],
        "required": [
          "paymentTypeId",
          "name",
          "filialIds"
        ]
      },
      "Cashbox": {
        "title": "Касса",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "description": "ID кассы в системе",
                "type": "integer",
                "format": "int64",
                "example": 123456
              },
              "paymentTypeId": {
                "type": "number",
                "description": "Id типа оплаты",
                "example": 7
              }
            }
          },
          {
            "$ref": "#/components/schemas/CashboxEdit"
          },
          {
            "type": "object",
            "properties": {
              "balance": {
                "type": "number",
                "description": "Текущее количество средств в кассе",
                "example": 100,
                "default": 0
              }
            }
          }
        ]
      },
      "Cashboxes": {
        "title": "Кассы",
        "properties": {
          "cashboxes": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Cashbox"
                },
                {
                  "type": "object",
                  "properties": {
                    "balance": {
                      "type": "number",
                      "description": "Текущее количество средств в кассе",
                      "example": 100,
                      "default": 0
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "parameters": {
      "lessonId": {
        "name": "lessonId",
        "description": "ID занятия",
        "in": "query",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "maxItems": 100,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "example": 42
      },
      "offset": {
        "name": "offset",
        "in": "query",
        "description": "Номер первой записи. Используется для постраничного вывода.",
        "schema": {
          "type": "integer",
          "default": 0
        },
        "example": 0
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "description": "Максимальное количество возвращаемых строк. Используется для постраничного вывода.",
        "schema": {
          "type": "integer",
          "default": 100,
          "maximum": 500
        },
        "example": 0
      },
      "sortDirection": {
        "name": "sortDirection",
        "in": "query",
        "description": "Направление сортировки",
        "schema": {
          "default": "asc",
          "type": "string",
          "enum": [
            "asc",
            "desc"
          ]
        },
        "example": "asc"
      },
      "createdAt": {
        "name": "createdAt",
        "in": "query",
        "description": "Дата создания. Если указана одна дата, то происходит поиск только по одной дате. Если указаны 2 даты, то производится поиск по диапазону.",
        "style": "form",
        "explode": false,
        "schema": {
          "oneOf": [
            {
              "type": "array",
              "maxLength": 2,
              "items": {
                "type": "string",
                "format": "date",
                "description": "Дата YYYY-MM-DD. Пример: 2020-01-01"
              }
            },
            {
              "type": "array",
              "maxLength": 2,
              "items": {
                "type": "string",
                "format": "date-time",
                "description": "Дата в формате YYYY-MM-DDTHH:mm:ssZ. Пример: 2020-01-01T00:00:00Z"
              }
            },
            {
              "type": "array",
              "maxLength": 2,
              "items": {
                "type": "string",
                "pattern": "^(\\d{4})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]).+?(\\d{2}:\\d{2})$",
                "description": "Дата со смещением. Пример: 2020-01-01T00:00:00+00:00"
              }
            }
          ]
        }
      },
      "updatedAt": {
        "name": "updatedAt",
        "in": "query",
        "description": "Дата изменения. Если указана одна дата, то происходит поиск только по одной дате. Если указаны 2 даты, то производится поиск по диапазону.",
        "style": "form",
        "explode": false,
        "schema": {
          "oneOf": [
            {
              "type": "array",
              "maxLength": 2,
              "items": {
                "type": "string",
                "format": "date",
                "description": "Дата YYYY-MM-DD. Пример: 2020-01-01"
              }
            },
            {
              "type": "array",
              "maxLength": 2,
              "items": {
                "type": "string",
                "format": "date-time",
                "description": "Дата в формате YYYY-MM-DDTHH:mm:ssZ. Пример: 2020-01-01T00:00:00Z"
              }
            },
            {
              "type": "array",
              "maxLength": 2,
              "items": {
                "type": "string",
                "pattern": "^(\\d{4})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]).+?(\\d{2}:\\d{2})$",
                "description": "Дата со смещением. Пример: 2020-01-01T00:00:00+00:00"
              }
            }
          ]
        }
      },
      "stateChangedAt": {
        "name": "stateChangedAt",
        "in": "query",
        "description": "Дата изменения статуса. Если указана одна дата, то происходит поиск только по одной дате. Если указаны 2 даты, то производится поиск по диапазону.",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "maxLength": 2,
          "items": {
            "type": "string",
            "format": "date"
          }
        },
        "example": "2019-01-01"
      },
      "period": {
        "name": "date",
        "in": "query",
        "description": "Период. Если указана одна дата, то происходит поиск только по одной дате. Если указаны 2 даты, то производится поиск по диапазону.",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "maxLength": 2,
          "items": {
            "type": "string",
            "format": "date"
          }
        },
        "example": "2019-01-01"
      },
      "filialId": {
        "name": "filialId",
        "description": "ID филиала.",
        "in": "query",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "example": 4
      },
      "classId": {
        "name": "classId",
        "description": "ID группы",
        "in": "query",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "example": 10
      },
      "roomId": {
        "name": "roomId",
        "description": "ID аудитории",
        "in": "query",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "example": 43
      },
      "teacherId": {
        "name": "teacherId",
        "description": "ID сотрудника - преподавателя",
        "in": "query",
        "schema": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "example": 2
      },
      "lessonStatusId": {
        "name": "statusId",
        "description": "Статус занятия. 0 - не проведено, 1 - проведено",
        "in": "query",
        "schema": {
          "type": "integer"
        },
        "example": 0
      },
      "lessonVisitStatus": {
        "name": "visit",
        "description": "Статус посещения занятия ученика, указанного в userId. Без указания userId не имеет смысла. visited - Посетил, lost - Пропустил. Выбираются только проведенные занятия.\n",
        "in": "query",
        "schema": {
          "type": "string",
          "enum": [
            "visited",
            "lost"
          ]
        },
        "example": "visited"
      },
      "lessonUserId": {
        "name": "userId",
        "description": "ID ученика, записанного на занятие",
        "in": "query",
        "schema": {
          "type": "integer",
          "format": "int64"
        },
        "example": 123
      },
      "scopeUserId": {
        "name": "scopeUserId",
        "description": "ID ученика для определения видимости занятий",
        "in": "query",
        "schema": {
          "type": "integer",
          "format": "int64"
        },
        "example": 123
      },
      "joinStatusId": {
        "name": "statusId",
        "description": "Статус записи",
        "in": "query",
        "schema": {
          "type": "integer"
        },
        "example": 0
      },
      "joinUserId": {
        "name": "userId",
        "description": "ID ученика",
        "in": "query",
        "schema": {
          "type": "integer",
          "format": "int64"
        },
        "example": 123
      },
      "userId": {
        "name": "userId",
        "description": "ID ученика",
        "in": "query",
        "schema": {
          "type": "integer",
          "format": "int64"
        },
        "example": 123
      },
      "managerId": {
        "name": "managerId",
        "description": "ID сотрудника",
        "in": "query",
        "schema": {
          "type": "integer",
          "format": "int64"
        },
        "example": 123
      },
      "phone": {
        "name": "phone",
        "in": "query",
        "description": "Номер телефона. Mожно указать часть номера для поиска по подстроке.",
        "schema": {
          "type": "string",
          "maxLength": 15
        },
        "example": 790012312323
      },
      "email": {
        "name": "email",
        "in": "query",
        "description": "Email. Можно указать часть адреса для поиска по подстроке",
        "schema": {
          "type": "string"
        },
        "example": "foo@site.com"
      },
      "name": {
        "name": "name",
        "in": "query",
        "description": "Имя. Можно указать часть имени для поиска по подстроке.",
        "schema": {
          "type": "string"
        },
        "example": "Иванов"
      },
      "includeJoins": {
        "name": "includeJoins",
        "in": "query",
        "description": "Включить в ответ заявки учеников",
        "schema": {
          "type": "boolean",
          "default": false,
          "example": true
        }
      },
      "includeLessons": {
        "name": "includeLessons",
        "in": "query",
        "description": "Включить в ответ информацию о занятии",
        "schema": {
          "type": "boolean",
          "default": false,
          "example": true
        }
      },
      "includeBills": {
        "name": "includeBills",
        "in": "query",
        "description": "Включить в ответ данные о списании",
        "schema": {
          "type": "boolean",
          "default": false,
          "example": true
        }
      },
      "debt": {
        "name": "debt",
        "in": "query",
        "description": "Занятия в долг (не оплаченные)",
        "schema": {
          "type": "boolean",
          "example": true
        }
      },
      "taskCompleted": {
        "name": "isComplete",
        "in": "query",
        "description": "Статус задачи, завершена или нет.",
        "schema": {
          "type": "boolean",
          "example": true
        }
      },
      "includeRecords": {
        "name": "includeRecords",
        "in": "query",
        "description": "Включить в ответ записи на занятия",
        "schema": {
          "type": "boolean",
          "default": false,
          "example": true
        }
      },
      "includeWorkOffs": {
        "name": "includeWorkOffs",
        "in": "query",
        "description": "Включить в ответ к записи на занятие информацию об отработке (для пропуска) / пропущенном занятии (для отработки)",
        "schema": {
          "type": "boolean",
          "default": false,
          "example": true
        }
      },
      "includeComments": {
        "name": "includeComments",
        "in": "query",
        "description": "Включить в ответ комментарии к занятию",
        "schema": {
          "type": "boolean",
          "default": false,
          "example": true
        }
      },
      "includeMarks": {
        "name": "includeMarks",
        "in": "query",
        "description": "Включить в ответ оценки к занятию",
        "schema": {
          "type": "boolean",
          "default": false,
          "example": true
        }
      },
      "includeUserSubscriptions": {
        "name": "includeUserSubscriptions",
        "in": "query",
        "description": "Включить в ответ абонементы ученика",
        "schema": {
          "type": "boolean",
          "default": false,
          "example": true
        }
      },
      "includeTasks": {
        "name": "includeTasks",
        "in": "query",
        "description": "Включить в ответ задания к занятию",
        "schema": {
          "type": "boolean",
          "default": false,
          "example": true
        }
      },
      "includeTasksLimited": {
        "name": "includeTasksLimited",
        "in": "query",
        "description": "Включить в ответ данные о заданиях к занятию, кроме самого текста задания",
        "schema": {
          "type": "boolean",
          "default": false,
          "example": true
        }
      },
      "includeTaskAnswers": {
        "name": "includeTaskAnswers",
        "in": "query",
        "description": "Включить в ответ ответы на задание",
        "schema": {
          "type": "boolean",
          "default": false,
          "example": true
        }
      },
      "includeParams": {
        "name": "includeParams",
        "in": "query",
        "description": "Включить в ответ дополнительную информацию к занятию",
        "schema": {
          "type": "boolean",
          "default": false,
          "example": true
        }
      },
      "includeClasses": {
        "name": "includeClasses",
        "in": "query",
        "description": "Включить в ответ группы",
        "schema": {
          "type": "boolean",
          "default": false,
          "example": true
        }
      },
      "includeImages": {
        "name": "includeImages",
        "in": "query",
        "description": "Включить в ответ изображения",
        "schema": {
          "type": "boolean",
          "default": false,
          "example": true
        }
      },
      "includeManagers": {
        "name": "includeManagers",
        "in": "query",
        "description": "Включить в ответ сотрудников",
        "schema": {
          "type": "boolean",
          "default": false,
          "example": true
        }
      },
      "includeAttributes": {
        "name": "includeAttributes",
        "in": "query",
        "description": "Включить в ответ атрибуты",
        "schema": {
          "type": "boolean",
          "default": false,
          "example": true
        }
      },
      "userSubscriptionStatus": {
        "name": "statusId",
        "in": "query",
        "description": "Статус абонемента:\n* `1` - Не активный\n* `2` - Активный\n* `3` - Заморожен\n* `4` - Окончен\n",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      },
      "fileId": {
        "name": "fileId",
        "description": "ID файла",
        "in": "query",
        "schema": {
          "type": "integer",
          "format": "int64"
        },
        "example": 123
      },
      "reasonType": {
        "name": "type",
        "in": "query",
        "description": "Тип причины",
        "schema": {
          "type": "string",
          "example": "join",
          "default": "join",
          "enum": [
            "join",
            "client"
          ]
        }
      },
      "amoCRMContactId": {
        "name": "amoCRMContactId",
        "description": "Id контакта amoCRM",
        "in": "query",
        "schema": {
          "type": "integer",
          "format": "int64"
        },
        "example": 123
      },
      "bitrixContactId": {
        "name": "bitrixContactId",
        "description": "Id контакта Битрикс24",
        "in": "query",
        "schema": {
          "type": "integer",
          "format": "int64"
        },
        "example": 124
      },
      "includeSubscriptions": {
        "name": "includeSubscriptions",
        "in": "query",
        "description": "Включить в ответ виды абонементов",
        "schema": {
          "type": "boolean",
          "default": false,
          "example": true
        }
      },
      "includePayLink": {
        "name": "includePayLink",
        "in": "query",
        "description": "Включить в ответ ключи оплаты",
        "schema": {
          "type": "boolean",
          "default": false,
          "example": true
        }
      },
      "cashboxId": {
        "name": "cashboxId",
        "description": "ID кассы",
        "in": "query",
        "schema": {
          "type": "integer",
          "format": "int64"
        },
        "example": 123
      }
    }
  }
}